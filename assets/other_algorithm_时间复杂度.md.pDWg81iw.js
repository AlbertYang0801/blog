import{_ as l,c as o,o as e,aN as t}from"./chunks/framework.A-MC8nKA.js";const u=JSON.parse('{"title":"时间复杂度","description":"","frontmatter":{},"headers":[],"relativePath":"other/algorithm/时间复杂度.md","filePath":"other/algorithm/时间复杂度.md","lastUpdated":1752827268000}'),i={name:"other/algorithm/时间复杂度.md"};function r(n,a,d,h,c,s){return e(),o("div",null,a[0]||(a[0]=[t('<h1 id="时间复杂度" tabindex="-1">时间复杂度 <a class="header-anchor" href="#时间复杂度" aria-label="Permalink to &quot;时间复杂度&quot;">​</a></h1><h3 id="o-1" tabindex="-1">O(1) <a class="header-anchor" href="#o-1" aria-label="Permalink to &quot;O(1)&quot;">​</a></h3><ul><li>数组下表查询</li></ul><h3 id="o-n" tabindex="-1">O(n) <a class="header-anchor" href="#o-n" aria-label="Permalink to &quot;O(n)&quot;">​</a></h3><ul><li>链表元素查询，最坏情况是要查n次。</li></ul><h3 id="o-logn" tabindex="-1">O(logn) <a class="header-anchor" href="#o-logn" aria-label="Permalink to &quot;O(logn)&quot;">​</a></h3><ul><li>平衡二叉树</li><li>数组二分法查找指定元素</li></ul><p><strong>开根号</strong></p><ul><li><p>比如16长度的数组，想要找到指定元素最多需要4次、</p><p>16→8→4→2→1</p></li><li><p>红黑树（平衡二叉树、完全二叉树）</p></li></ul><blockquote><p>比如查找某个元素的次数最多查到最后一层，跟树的层级一致。B→J→W→X</p></blockquote><p><img src="https://s2.loli.net/2025/07/18/FCvx3cE2rV9KWwe.png" alt="image.png" loading="lazy"></p><h3 id="o-log-n" tabindex="-1">O(log n) <a class="header-anchor" href="#o-log-n" aria-label="Permalink to &quot;O(log n)&quot;">​</a></h3><p>复杂度解释：</p><ul><li>在一个理想平衡的二叉搜索树中，每次查找操作从根节点开始，通过比较目标值与当前节点的值来决定是向左还是向右子树进行下一步查找。</li><li>每次比较后，查找范围大致减半，这类似于二分查找的逻辑。</li><li>如果树完全平衡，则树的高度 <code>h</code> 与节点数目 <code>n</code> 之间的关系近似为 <code>h = log₂(n+1)</code>。</li><li>因此，在最坏情况下，查找操作需要的时间复杂度为 <code>O(log n)</code>。</li></ul>',14)]))}const _=l(i,[["render",r]]);export{u as __pageData,_ as default};
