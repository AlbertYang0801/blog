import{_ as i,c as a,o as n,aM as l}from"./chunks/framework.Du1sph90.js";const c=JSON.parse('{"title":"Spring事务总结","description":"","frontmatter":{},"headers":[],"relativePath":"frame/spring/Spring事务总结.md","filePath":"frame/spring/Spring事务总结.md","lastUpdated":1752832844000}'),t={name:"frame/spring/Spring事务总结.md"};function p(e,s,h,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="spring事务总结" tabindex="-1">Spring事务总结 <a class="header-anchor" href="#spring事务总结" aria-label="Permalink to &quot;Spring事务总结&quot;">​</a></h1><h3 id="编程式事务" tabindex="-1">编程式事务 <a class="header-anchor" href="#编程式事务" aria-label="Permalink to &quot;编程式事务&quot;">​</a></h3><p>在代码中硬编码，不推荐使用。</p><h3 id="声明式事务" tabindex="-1">声明式事务 <a class="header-anchor" href="#声明式事务" aria-label="Permalink to &quot;声明式事务&quot;">​</a></h3><ul><li>基于注解的声明式事务</li><li>基于 XML 的声明式事务</li></ul><h3 id="transactional-注解" tabindex="-1">@Transactional 注解 <a class="header-anchor" href="#transactional-注解" aria-label="Permalink to &quot;@Transactional 注解&quot;">​</a></h3><p>Exception 分为运行时异常 RuntimeException 和非运行时异常。事务管理能保证出现异常情况的时候保证数据的一致性。</p><p>默认 <code>@Transactional</code> 注解只会在遇到 RuntimeException 类型异常或者 Error时，才会回滚事务。遇到其它异常，Spring 不会回滚事务。</p><h3 id="作用范围" tabindex="-1">作用范围 <a class="header-anchor" href="#作用范围" aria-label="Permalink to &quot;作用范围&quot;">​</a></h3><p>当 <code>@Transactional</code>注解作用于类上的时，该类的所有方法都将具有该类型的事务属性，同样的我们也可以在方法级别上使用该注解来覆盖类级别的定义。</p><h3 id="ttransactional-rollbackfor-exception-class" tabindex="-1">@Ttransactional(rollbackFor=Exception.class) <a class="header-anchor" href="#ttransactional-rollbackfor-exception-class" aria-label="Permalink to &quot;@Ttransactional(rollbackFor=Exception.class)&quot;">​</a></h3><p>在注解上配置 <code>rollbackFor</code> 属性并指定异常类，则在目标方法中抛出的异常类及其子类时，事务同样会回滚。</p><p>比如配置 <code>rollbackFor=Exception.class</code> 时，若在目标方法出现 Exception 类及其子类异常时便会回滚。</p><h3 id="ttransactional-只有应用到-public-方法才会生效" tabindex="-1">@Ttransactional 只有应用到 public 方法才会生效 <a class="header-anchor" href="#ttransactional-只有应用到-public-方法才会生效" aria-label="Permalink to &quot;@Ttransactional 只有应用到 public 方法才会生效&quot;">​</a></h3><p>只有 <code>@Ttransactional</code> 注解应用到 public 方法上时，才能进行事务管理。</p><h2 id="事务失效的情况" tabindex="-1">事务失效的情况 <a class="header-anchor" href="#事务失效的情况" aria-label="Permalink to &quot;事务失效的情况&quot;">​</a></h2><p>声明式事务是基于 AOP实现的。</p><p>Spring事务是否会失效的判断标准：</p><p>所以<strong>声明式事务的核心，就是动态代理生成的那个对象，没有用到那个对象，事务就没戏。</strong></p><ol><li><p><strong>方法不是public的</strong>：Spring的AOP代理只适用于public方法。如果事务方法不是public，Spring将无法创建代理，事务将不会起作用。</p><blockquote><p>@Transactional的事务管理是通过代理实现的，Spring在启动的时候会扫描有该注解的方法，框架对非public的方法未实现代理。</p></blockquote></li></ol><blockquote></blockquote><ol start="2"><li><p><strong>没有被Spring管理的Bean中调用</strong>：如果事务方法不由Spring管理的Bean调用，事务也不会起作用。</p></li><li><p><strong>异常不被声明</strong>：默认情况下，Spring的事务只在运行时异常(RuntimeException)发生时才回滚。如果方法抛出的是Checked异常，且没有在事务的声明中指定回滚规则，事务不会自动回滚。</p></li><li><p><strong>事务方法内部调用同一个类的另一个方法</strong>：如果在同一个类中，一个方法没有声明事务，而另一个方法声明了事务，调用时事务不会生效。</p><blockquote><p>方法自调用的时候，调用的不是动态代理类的方法，而是直接调用了被代理对象的方法。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //自调用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useSayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>多线程环境下的事务作用域</strong>：每个线程都有自己的事务作用域，如果在多线程环境下，每个线程操作自己的事务，其他线程的事务不会影响当前线程的事务。</p></li><li><p><strong>事务传播行为不正确</strong>：如果使用了错误的事务传播行为，可能导致事务失效。</p></li><li><p><strong>数据库本身不支持事务或者配置错误</strong>：数据库本身不支持事务或者配置不当也可能导致事务失效。</p></li><li><p><strong>事务管理器配置错误</strong>：如果事务管理器没有正确配置，或者没有指定正确的数据源，事务可能不会正确执行。</p></li><li><p><strong>异常捕获但未重新抛出</strong>：如果捕获了事务方法中抛出的异常，但没有重新抛出，事务可能不会回滚。</p><blockquote><p>如果异常被自己捕获了，那么动态代理对象感知步到异常，也不会回滚。</p></blockquote></li></ol><blockquote></blockquote><ol start="10"><li><strong>异步方法内无事务</strong>：如果在异步方法内部执行事务性操作，而该异步方法没有声明事务，事务不会传播到异步执行的环境中。</li></ol><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><p><a href="https://developer.ibm.com/zh/articles/j-master-spring-transactional-use/" target="_blank" rel="noreferrer">透彻的掌握 Spring 中 @transactional 的使用</a></p><ol><li>方法不是public的：Spring的AOP代理只适用于public方法。如果事务方法不是public，Spring将无法创建代理，事务将不会起作用。</li><li>没有被Spring管理的Bean中调用：如果事务方法不由Spring管理的Bean调用，事务也不会起作用。</li><li>异常不被声明：默认情况下，Spring的事务只在运行时异常(RuntimeException)发生时才回滚。如果方法抛出的是Checked异常，且没有在事务的声明中指定回滚规则，事务不会自动回滚。</li><li>事务方法内部调用同一个类的另一个方法：如果在同一个类中，一个方法没有声明事务，而另一个方法声明了事务，调用时事务不会生效。</li><li>多线程环境下的事务作用域：每个线程都有自己的事务作用域，如果在多线程环境下，每个线程操作自己的事务，其他线程的事务不会影响当前线程的事务。</li><li>事务传播行为不正确：如果使用了错误的事务传播行为，可能导致事务失效。</li><li>数据库本身不支持事务或者配置错误：数据库本身不支持事务或者配置不当也可能导致事务失效。</li><li>事务管理器配置错误：如果事务管理器没有正确配置，或者没有指定正确的数据源，事务可能不会正确执行。</li><li>异常捕获但未重新抛出：如果捕获了事务方法中抛出的异常，但没有重新抛出，事务可能不会回滚。</li><li>异步方法内无事务：如果在异步方法内部执行事务性操作，而该异步方法没有声明事务，事务不会传播到异步执行的环境中。</li><li>方法不是public的：Spring的AOP代理只适用于public方法。如果事务方法不是public，Spring将无法创建代理，事务将不会起作用。</li><li>没有被Spring管理的Bean中调用：如果事务方法不由Spring管理的Bean调用，事务也不会起作用。</li><li>异常不被声明：默认情况下，Spring的事务只在运行时异常(RuntimeException)发生时才回滚。如果方法抛出的是Checked异常，且没有在事务的声明中指定回滚规则，事务不会自动回滚。</li><li>事务方法内部调用同一个类的另一个方法：如果在同一个类中，一个方法没有声明事务，而另一个方法声明了事务，调用时事务不会生效。</li><li>多线程环境下的事务作用域：每个线程都有自己的事务作用域，如果在多线程环境下，每个线程操作自己的事务，其他线程的事务不会影响当前线程的事务。</li><li>事务传播行为不正确：如果使用了错误的事务传播行为，可能导致事务失效。</li><li>数据库本身不支持事务或者配置错误：数据库本身不支持事务或者配置不当也可能导致事务失效。</li><li>事务管理器配置错误：如果事务管理器没有正确配置，或者没有指定正确的数据源，事务可能不会正确执行。</li><li>异常捕获但未重新抛出：如果捕获了事务方法中抛出的异常，但没有重新抛出，事务可能不会回滚。</li><li>异步方法内无事务：如果在异步方法内部执行事务性操作，而该异步方法没有声明事务，事务不会传播到异步执行的环境中。</li></ol><h2 id="spring事务和aop的关系" tabindex="-1">Spring事务和AOP的关系 <a class="header-anchor" href="#spring事务和aop的关系" aria-label="Permalink to &quot;Spring事务和AOP的关系&quot;">​</a></h2><p>Spring事务是通过AOP实现的，对代理对象的每个方法进行拦截。</p><p>在方法开始前开始事务，在方法执行结束后根据是否有异常进行提交和回滚。</p><p>Spring事务的代理对象执行某个方法时的步骤：</p><ol><li>判断当前执行的方法是否存在<code>@Transactional</code> 注解</li><li>如果存在，则利用事务管理器（TransactionMananger）新建一个数据库连接，开启一个事务。</li><li>修改数据库连接的autocommit为false。</li><li>执行业务方法。</li><li>执行完了之后如果没有出现异常，<strong>则提交，否则回滚。</strong></li></ol><p>Spring事务是否会失效的判断标准：</p><p><strong>某个加了@Transactional注解的方法被调用时，要判断到底是不是直接被代理对象调用的，如果是则事务会生效，如果不是则失效。</strong></p><h2 id="spring事务的7种传播行为" tabindex="-1">Spring事务的7种传播行为 <a class="header-anchor" href="#spring事务的7种传播行为" aria-label="Permalink to &quot;Spring事务的7种传播行为&quot;">​</a></h2><p>事务传播行为是：事务传播行为指的是当一个事务方法被另一个事务方法调用时，这个方法是怎么运行的。</p><table tabindex="0"><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td><strong>REQUIRED</strong></td><td>支持当前事务，如果<strong>当前没有事务，就新建一个事务</strong>。这是最常见的选择。</td></tr><tr><td>SUPPORTS</td><td>支持当前事务，如果<strong>当前没有事务，就以非事务方式执行</strong>。</td></tr><tr><td>MANDATORY</td><td>支持当前事务，如果<strong>当前没有事务，就抛出异常</strong>。</td></tr><tr><td>REQUIRED_NEW</td><td>新建事务，<strong>如果当前存在事务，把当前事务挂起。</strong></td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行操作，如果<strong>当前存在事务，就把当前事务挂起。</strong></td></tr><tr><td>NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>NESTED</td><td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独的提交或回滚。如果当前事务不存在，那么其行为和 PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的，可以参考资源管理器的文档来确认它们是够支持嵌套事务</td></tr></tbody></table><h3 id="propagation-required-new-的流程" tabindex="-1">PROPAGATION_REQUIRED_NEW 的流程 <a class="header-anchor" href="#propagation-required-new-的流程" aria-label="Permalink to &quot;PROPAGATION_REQUIRED_NEW 的流程&quot;">​</a></h3><p>要求在事务里运行，如果当前有事务，将当前事务挂起。</p><ol><li>首先，代理对象执行a()方法前，先利用事务管理器新建一个数据库连接a</li><li>将数据库连接a的autocommit改为false</li><li>把数据库连接a设置到ThreadLocal中</li><li>执行a()方法中的sql</li><li>执行a()方法过程中，调用了b()方法（注意用代理对象调用b()方法） <ul><li>代理对象执行b()方法前，判断出来了当前线程中已经存在一个数据库连接a了，表示当前线程其实已经拥有一个Spring事务了，则进行挂起</li><li>挂起就是把ThreadLocal中的数据库连接a从ThreadLocal中移除，并放入一个挂起资源对象</li></ul></li></ol><p>中</p><ul><li><p>挂起完成后，再次利用事务管理器新建一个数据库连接b</p></li><li><p>将数据库连接b的autocommit改为false</p></li><li><p>把数据库连接b设置到ThreadLocal中</p></li><li><p>执行b()方法中的sql</p></li><li><p>b()方法正常执行完，则从ThreadLocal中拿到数据库连接b进行提交</p></li><li><p>提交之后会恢复所挂起的数据库连接a，这里的恢复，其实只是把在挂起资源对象中所保存的数据库连接a再次设置到ThreadLocal中</p><p>b()方法事务执行完毕，重置 ThreadLocal状态，将oldTransactionInfo放入ThreadLocal</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> restoreThreadLocalStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Use stack to restore old transaction TransactionInfo.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Will be null if none was set.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			transactionInfoHolder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.oldTransactionInfo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><ol><li>a()方法正常执行完，则从ThreadLocal中拿到数据库连接a进行提交</li></ol><h3 id="事务传播行为练习" tabindex="-1">事务传播行为练习 <a class="header-anchor" href="#事务传播行为练习" aria-label="Permalink to &quot;事务传播行为练习&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Propagation.REQUIRES_NEW, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> insertUserA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        insertUserB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Propagation.NESTED, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> insertUserB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //回滚之后会继续向上抛出异常，虽然不是一个事务，但是两个SQL还是都会回滚</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="强制手动回滚" tabindex="-1">强制手动回滚 <a class="header-anchor" href="#强制手动回滚" aria-label="Permalink to &quot;强制手动回滚&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Propagation.REQUIRES_NEW, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception.class)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callBack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserDo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //强制回滚</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            TransactionAspectSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTransactionStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRollbackOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;抛出异常，强制回滚&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="事务执行逻辑" tabindex="-1">事务执行逻辑 <a class="header-anchor" href="#事务执行逻辑" aria-label="Permalink to &quot;事务执行逻辑&quot;">​</a></h2><ol><li><p>开启事务@<code>EnableTransactionManagement</code>、<code>TransactionManagementConfigurationSelector.class</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MapperScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.albert.mysql.mapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableTransactionManagement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MysqlApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MysqlApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>注册类</p><ul><li><p><code>AutoProxyRegistrar</code></p><p>主要作用是开启自动代理功能，因为开启事务是在原方法类基础上生成代理对象完成的。</p></li><li><p><code>ProxyTransactionManagementConfiguration</code></p><p>配置类，定义了三个配置类，包含扫描事务注解和代理逻辑。</p></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TransactionManagementConfigurationSelector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AdviceModeImportSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableTransactionManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Returns {@link ProxyTransactionManagementConfiguration} or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * {@code AspectJ(Jta)TransactionManagementConfiguration} for {@code PROXY}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * and {@code ASPECTJ} values of {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnableTransactionManagement</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mode()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * respectively.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectImports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AdviceMode </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">adviceMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (adviceMode) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {AutoProxyRegistrar.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">						ProxyTransactionManagementConfiguration.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASPECTJ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">determineTransactionAspectClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			default:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">determineTransactionAspectClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ClassUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;javax.transaction.Transactional&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				TransactionManagementConfigUtils.JTA_TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				TransactionManagementConfigUtils.TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li><li><p>配置类<code>ProxyTransactionManagementConfiguration</code></p><ul><li><p><code>AnnotationTransactionAttributeSource</code></p><p>用来判断某个类上是否存在@Transactional注解，或者判断某个方法上是否存在@Transactional注解的</p></li><li><p><code>TransactionInterceptor</code></p><p>代理逻辑，当某个类中存在@Transactional注解时，到时就产生一个代理对象作为Bean，代理对象在执行某个方法时，最终就会进入到TransactionInterceptor的<code>invoke()</code>方法。</p></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeanFactoryTransactionAttributeSourceAdvisor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transactionAdvisor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		BeanFactoryTransactionAttributeSourceAdvisor advisor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BeanFactoryTransactionAttributeSourceAdvisor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		advisor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTransactionAttributeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transactionAttributeSource);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		advisor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAdvice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transactionInterceptor);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.enableTx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			advisor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.enableTx.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> advisor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TransactionAttributeSource </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transactionAttributeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //用来判断某个类上是否存在@Transactional注解，或者判断某个方法上是否存在@Transactional注解的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnnotationTransactionAttributeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TransactionInterceptor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transactionInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TransactionAttributeSource transactionAttributeSource) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //代理逻辑，当某个类中存在@Transactional注解时，到时就产生一个代理对象作为Bean，代理对象在执行某个方法时，最终就会进入到TransactionInterceptor的invoke()方法。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		TransactionInterceptor interceptor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TransactionInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		interceptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTransactionAttributeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transactionAttributeSource);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.txManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			interceptor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTransactionManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.txManager);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interceptor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></li><li><p>事务方法 invoke 的基本逻辑</p><ul><li>创建事务</li><li>执行业务逻辑</li><li>有异常回滚事务</li><li>提交事务</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PlatformTransactionManager ptm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> asPlatformTransactionManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tm);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String joinpointIdentification </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> methodIdentification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method, targetClass, txAttr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (txAttr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CallbackPreferringPlatformTransactionManager)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// Standard transaction demarcation with getTransaction and commit/rollback calls.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //创建事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			TransactionInfo txInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTransactionIfNecessary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ptm, txAttr, joinpointIdentification);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Object retVal;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// This is an around advice: Invoke the next interceptor in the chain.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// This will normally result in a target object being invoked.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //执行业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				retVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proceedWithInvocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// target invocation exception</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //如果发生异常进行事务回滚</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				completeTransactionAfterThrowing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txInfo, ex);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //清除事务信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				cleanupTransactionInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txInfo);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (retVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vavrPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VavrDelegate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isVavrTry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(retVal)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				// Set rollback-only in case of Vavr failure matching our rollback rules...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				TransactionStatus status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txInfo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTransactionStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txAttr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					retVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VavrDelegate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">evaluateTryFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(retVal, txAttr, status);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //执行完成，提交事务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			commitTransactionAfterReturning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txInfo);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retVal;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></li></ol><p><strong>整个过程的核心：</strong></p><p>在执行某个方法时，判断当前是否已经存在一个事务，就是判断当前线程的ThreadLocal中是否存在一个数据库连接对象，如果存在则表示已经存在一个事务了。</p><p>同一个方法里面使用 ThreadLocal保存当前事务信息</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadLocal&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TransactionInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; transactionInfoHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NamedThreadLocal&lt;&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current aspect-driven transaction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>oldTransactionInfo</p>`,54)]))}const g=i(t,[["render",p]]);export{c as __pageData,g as default};
