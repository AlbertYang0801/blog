import{_ as a,c as o,o as l,aM as t}from"./chunks/framework.Du1sph90.js";const _=JSON.parse('{"title":"集合概述","description":"","frontmatter":{},"headers":[],"relativePath":"java/collection/Collection集合概述.md","filePath":"java/collection/Collection集合概述.md","lastUpdated":1751523274000}'),c={name:"java/collection/Collection集合概述.md"};function d(i,e,r,n,h,s){return l(),o("div",null,e[0]||(e[0]=[t('<h1 id="集合概述" tabindex="-1">集合概述 <a class="header-anchor" href="#集合概述" aria-label="Permalink to &quot;集合概述&quot;">​</a></h1><h3 id="为什么使用集合" tabindex="-1">为什么使用集合？ <a class="header-anchor" href="#为什么使用集合" aria-label="Permalink to &quot;为什么使用集合？&quot;">​</a></h3><p>当我们需要保存一组类型相同的数据的时候，我们应该用一个容器来保存，这个容器就是数组。</p><p>但是数组的长度是固定的，当添加的元素超过了数组的长度之后，需要对数组重新定义。而且数组存储的数据是<code>有序的</code>、<code>可重复的</code>，太过于单一，扩展性不够。</p><p>于是，引入了集合，Java 内部给我们提供了功能完善的集合框架。能<code>存储任意对象</code>，长度可以<code>动态改变</code>，提高了数据存储的灵活性。</p><h3 id="数组和集合的区别" tabindex="-1">数组和集合的区别 <a class="header-anchor" href="#数组和集合的区别" aria-label="Permalink to &quot;数组和集合的区别&quot;">​</a></h3><ol><li>存储类型 <ul><li>数组可以存储<code>基本数据类型</code>，又可以存储<code>引用数据类型</code>。</li><li>集合只能存储<code>引用数据类型</code>。（集合中也可以存储基本数据类型，但是在存储的时候会<code>自动装箱</code>变成引用类型）</li></ul></li><li>存储长度 <ul><li>数组的长度是<code>固定</code>的，不可以改变。</li><li>集合的长度可以<code>动态改变</code>。</li></ul></li></ol><h3 id="数据和集合的使用" tabindex="-1">数据和集合的使用 <a class="header-anchor" href="#数据和集合的使用" aria-label="Permalink to &quot;数据和集合的使用&quot;">​</a></h3><ul><li>如果元素个数<code>固定</code>推荐使用<code>数组</code>。</li><li>如果元素个数<code>不固定</code>推荐使用<code>集合</code>。</li></ul><h3 id="集合架构图" tabindex="-1">集合架构图 <a class="header-anchor" href="#集合架构图" aria-label="Permalink to &quot;集合架构图&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/05/28/wt5PE7Qi4yzFUpj.png" alt="" loading="lazy"></p><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><p><a href="https://leetcode-cn.com/leetbook/read/array-and-string/ybfut/" target="_blank" rel="noreferrer">LeetBook - 数组简介</a></p>',13)]))}const u=a(c,[["render",d]]);export{_ as __pageData,u as default};
