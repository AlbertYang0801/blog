import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.D7pKEi_Q.js";const E=JSON.parse('{"title":"AOP","description":"","frontmatter":{},"headers":[],"relativePath":"frame/spring/custom/AOP.md","filePath":"frame/spring/custom/AOP.md"}'),n={name:"frame/spring/custom/AOP.md"};function h(l,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h1><h2 id="bytebuddy" tabindex="-1">ByteBuddy <a class="header-anchor" href="#bytebuddy" aria-label="Permalink to &quot;ByteBuddy&quot;">​</a></h2><p>AOP即面向切面编程，本质上是一个 Proxy 模式。核心就是拦截核心 Bean 的方法调用。</p><ul><li>JDK动态代理</li><li>CGLIB动态生成字节码代理。</li></ul><blockquote><p>如果是接口AOP，则采用JDK动态代理。如果是类AOP，则采用CGLIB。</p></blockquote><h2 id="aop实现核心" tabindex="-1">AOP实现核心 <a class="header-anchor" href="#aop实现核心" aria-label="Permalink to &quot;AOP实现核心&quot;">​</a></h2><ul><li>找到符合AOP要求的原始Bean</li><li>执行指定的拦截器逻辑</li></ul><h3 id="aop流程" tabindex="-1">AOP流程 <a class="header-anchor" href="#aop流程" aria-label="Permalink to &quot;AOP流程&quot;">​</a></h3><ol><li>利用 <code>BeanPostProcessor</code> 检测每个Bean。</li><li>扫描每个 Bean 的 @Around 注解。</li><li>执行 InvocationHandler 的代理方法。</li></ol><h3 id="实现-before-和-after" tabindex="-1">实现 @Before 和 @After <a class="header-anchor" href="#实现-before-和-after" aria-label="Permalink to &quot;实现 @Before 和 @After&quot;">​</a></h3><p>基于@Around的模板就可以实现。</p><p>通过适配器模式，将After逻辑注入到代理类<code>InvocationHandler</code>的代理逻辑里面。（@Before同理）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AfterInvocationHandlerAdapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InvocationHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Object invoke </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(proxy, args);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(proxy, invoke, method, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">returnValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Throwable;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://gitee.com/zztiyjw/summer-framework/tree/master/summer-aop" target="_blank" rel="noreferrer">https://gitee.com/zztiyjw/summer-framework/tree/master/summer-aop</a></p>`,14)]))}const c=i(n,[["render",h]]);export{E as __pageData,c as default};
