import{_ as s,c as a,o as t,ag as l}from"./chunks/framework.D7pKEi_Q.js";const E=JSON.parse('{"title":"Seata分布式事务","description":"","frontmatter":{},"headers":[],"relativePath":"frame/springcloud/Seata分布式事务.md","filePath":"frame/springcloud/Seata分布式事务.md"}'),h={name:"frame/springcloud/Seata分布式事务.md"};function n(p,i,e,k,r,d){return t(),a("div",null,i[0]||(i[0]=[l('<h1 id="seata分布式事务" tabindex="-1">Seata分布式事务 <a class="header-anchor" href="#seata分布式事务" aria-label="Permalink to &quot;Seata分布式事务&quot;">​</a></h1><p>在分布式情况下，一次业务请求需要调用多个系统操作多个数据源时，针对多个数据源操作会产生分布式事务问题。每个系统能够保证各自数据源的一致性问题，但是全部系统数据的一致性问题没法保证。</p><h3 id="官网地址" tabindex="-1">官网地址 <a class="header-anchor" href="#官网地址" aria-label="Permalink to &quot;官网地址&quot;">​</a></h3><p><a href="https://seata.io/zh-cn/docs/user/quickstart.html" target="_blank" rel="noreferrer">https://seata.io/zh-cn/docs/user/quickstart.html</a></p><h3 id="下载地址" tabindex="-1">下载地址 <a class="header-anchor" href="#下载地址" aria-label="Permalink to &quot;下载地址&quot;">​</a></h3><p><a href="https://seata.io/zh-cn/blog/download.html" target="_blank" rel="noreferrer">https://seata.io/zh-cn/blog/download.html</a></p><h3 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h3><p>事务ID + 三组件</p><p><strong>事务ID</strong></p><ul><li>Transaction ID(XID)</li></ul><p><strong>三组件</strong></p><ul><li><p>TC-事务协调者</p><p>维护全局和分支事务的状态，<strong>驱动全局事务提交或回滚</strong>。</p><p><strong>为单独部署的服务端。</strong></p></li><li><p>TM-事务管理器</p><p>定义全局事务的范围，开启全局事务，提交或回滚全局事务。</p><p><strong>嵌入到应用中的 Clinet 客户端</strong>。在代码中加注解的地方对应的就是事务管理器 TM。</p></li><li><p>RM</p><p>对应的资源管理器，管理分支事务处理的资源。与 TC 交谈以注册分支事务和报告分支事务的状态，<strong>驱动分支事务的提交或者回滚</strong>。</p></li></ul><h3 id="处理过程" tabindex="-1">处理过程 <a class="header-anchor" href="#处理过程" aria-label="Permalink to &quot;处理过程&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/06/10/3foHNOjRdbeqa4g.png" alt=""></p><p><img src="https://s2.loli.net/2025/06/10/wW1LMaeKdUqDjng.png" alt=""></p><p><strong>TM-事务管理器</strong></p><p>在需要开启全局事务的地方，加注解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GlobalTransactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fsp-create-order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception.class)</span></span></code></pre></div><h3 id="分布式事务的执行流程" tabindex="-1">分布式事务的执行流程 <a class="header-anchor" href="#分布式事务的执行流程" aria-label="Permalink to &quot;分布式事务的执行流程&quot;">​</a></h3><ol><li>TM 开启分布式事务，TM 会向 TC（seata服务器） 注册全局事务记录。</li><li>RM 向 TC 汇报事务执行情况。</li><li>TM 结束分布式事务，事务一阶段结束。TM 会通知 TC 提交、回滚分布式事务。</li><li>TC 汇总各个系统的事务信息，决定分布式事务是整体提交还是整体回滚。</li><li>TC 通知所有 RM 提交/回滚资源，事务二阶段结束。</li></ol><hr><h2 id="seata的四大模式" tabindex="-1">Seata的四大模式 <a class="header-anchor" href="#seata的四大模式" aria-label="Permalink to &quot;Seata的四大模式&quot;">​</a></h2><ul><li>XA模式:强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式:最终一致的分阶段事务模式，有业务侵入</li><li>AT模式:最终一致的分阶段事务模式，无业务侵入，也是<strong>Seata的默认模式</strong>。</li><li>SAGA模式:长事务模式，有业务侵入</li></ul><h3 id="xa模式的2pc" tabindex="-1">XA模式的2PC <a class="header-anchor" href="#xa模式的2pc" aria-label="Permalink to &quot;XA模式的2PC&quot;">​</a></h3><ul><li>一阶段执行本地事务，但是不提交，锁定资源。</li><li>二阶段根据一阶段本地事务执行结果，commit或者rollback。</li></ul><p><img src="https://s2.loli.net/2025/06/10/JC9zBcZptiHoGxh.png" alt=""></p><p><img src="https://s2.loli.net/2025/06/10/NcL8vPVxdZmSeG7.png" alt=""></p><p><img src="https://s2.loli.net/2025/06/10/IGftLvKFZVUoukx.png" alt=""></p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>依赖于数据库的事务来实现。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><p>因为一阶段需要锁定数据库资源，要等到二阶段结束才能释放，容易造成资源的浪费，性能较差，需要依赖关系型数据库实现事务。</p><h3 id="at模式的2pc" tabindex="-1">AT模式的2PC <a class="header-anchor" href="#at模式的2pc" aria-label="Permalink to &quot;AT模式的2PC&quot;">​</a></h3><p>和XA类似都是二阶段提交，但是AT模式一阶段直接提交本地事务。不锁定资源，解决了XA模式锁定资源的问题。</p><p>二阶段采用反向补偿机制回滚事务。</p><p>Seata默认的分布式事务模式时AT。</p><h3 id="一阶段" tabindex="-1">一阶段 <a class="header-anchor" href="#一阶段" aria-label="Permalink to &quot;一阶段&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/06/10/4wGr78O2TjkMuoz.png" alt=""></p><ol><li><p><strong>TC</strong></p><p>seata 作为 TC (事务协调者)，记录了 TM 开启分布式事务时，生成的全局事务ID - XID。</p><p><img src="https://s2.loli.net/2025/06/10/aDl8Fb9WcEp4O2Y.png" alt=""></p></li><li><p><strong>RM</strong></p></li></ol><p>每个分支的资源管理器对应数据库, 在 undo_log 中记录了对应分支的本地事务的信息。</p><p>包含全局事务ID - XID、分支ID、rollback_info。</p><p><img src="https://s2.loli.net/2025/06/10/GojgFOedq7AV9Qs.png" alt=""></p><p>其中 <strong>rollback_info</strong> 中包含了一阶段事务中, 对应更新数据的 <strong>before_image</strong> 和 <strong>after_image</strong> 信息。</p><blockquote><p>数据的 before_image 和 after_image 作用于二阶段的事务回滚。</p></blockquote><h3 id="二阶段" tabindex="-1">二阶段 <a class="header-anchor" href="#二阶段" aria-label="Permalink to &quot;二阶段&quot;">​</a></h3><p>在一阶段中，每个分支的事务执行完毕，并向 TC 上报事务的执行结果。由 TC 根据结果决定全体提交还是全体回滚。</p><ul><li><p><strong>全体提交</strong></p><p>在全体提交时，由于一阶段各个分支已经完成事务的提交，所以全体提交时只需要将一阶段保存的快照数据和行锁删除，完成数据清理就算全体事务提交成功。</p><p><img src="https://s2.loli.net/2025/06/10/cVg2zX63qIC41OJ.png" alt=""></p></li><li><p><strong>全体回滚</strong></p><p>由于一阶段事务未全体执行成功，导致二阶段进行回滚。</p><p>各个分支回滚的方式是通过一阶段记录的 <code>undo_log</code> 中记录的 <code>rollback_info</code> 数据进行回滚。</p><p>其中包含了 <strong>before_image</strong> （更新前数据）和 <strong>after_image</strong>（更新后数据）,其中用更新后数据来和数据库数据作校验，若一致说明数据正常，可以还原到更新前数据。</p><p>（类似于乐观锁）若数据库数据和 <strong>after_image</strong>（更新后数据），说明出现了脏数据（人工干预处理）。</p><blockquote><p>疑问：在操作数据的时候，是加了行锁的，所以不应该出现脏数据的问题。</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> after_image</span></span></code></pre></div><p>注意更新的方式使用的是 <strong>反向补偿</strong>。不同于传统的 redo_log （重做日志刷新到磁盘）方式，反向补偿是通过一条 update 语句来实现数据的回滚的（确定回滚语句的主键，根据一阶段记录的 before_image 数据进行更新实现回滚）。</p><p>最终删除掉一阶段保存的快照信息和行锁即可。</p><p><img src="https://s2.loli.net/2025/06/10/s8kh59LE6BRGrVp.png" alt=""></p></li></ul><h3 id="使用流程" tabindex="-1">使用流程 <a class="header-anchor" href="#使用流程" aria-label="Permalink to &quot;使用流程&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Seata控制分布式事务</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）、每一个微服务先必须创建undo_log;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）、安装事务协调器；seata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: https:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">github</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">releases</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">）、整合</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、导入依赖  spring</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cloud</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">starter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">alibaba</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">seata  seata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jar</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、解压并启动seata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-server</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">conf注册中心相关的配置</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，修改registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nacos</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">conf</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、所有想要用到分布式事务的微服务使用seata DatasourceProxy代理自己的数据源</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、每个微服务，</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">都必须导入registry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cof</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">conf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vgroup_mapping.{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fescar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-service-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、启动测试</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、给分布式大事务的路口标注@GlobalTransactional</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、每一个远程的小事务用 @Transactional</span></span></code></pre></div><h3 id="at和xa的区别" tabindex="-1">AT和XA的区别 <a class="header-anchor" href="#at和xa的区别" aria-label="Permalink to &quot;AT和XA的区别&quot;">​</a></h3><ol><li>一阶段事务提交 <ul><li>AT模式一阶段直接提交事务，二阶段回滚依赖于反向补偿。</li><li>XA模式一阶段不提交事务，锁定资源。二阶段按事务提交状况 commit 或 rollback。</li></ul></li><li></li></ol><h3 id="at和tcc的区别" tabindex="-1">AT和TCC的区别 <a class="header-anchor" href="#at和tcc的区别" aria-label="Permalink to &quot;AT和TCC的区别&quot;">​</a></h3><p>AT 模式基于 支持本地 ACID 事务 的 关系型数据库：</p><ul><li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li><li>二阶段 commit 行为：马上成功结束，自动 异步批量清理回滚日志。</li><li>二阶段 rollback 行为：通过回滚日志，自动 生成补偿操作，完成数据回滚。</li></ul><p>依赖数据库实现提交和回滚。</p><hr><p>相应的，TCC 模式，不依赖于底层数据资源的事务支持：</p><ul><li>一阶段 prepare 行为：调用 自定义 的 prepare 逻辑。</li><li>二阶段 commit 行为：调用 自定义 的 commit 逻辑。</li><li>二阶段 rollback 行为：调用 自定义 的 rollback 逻辑。</li></ul><p>所谓 TCC 模式，是指支持把 自定义 的分支事务纳入到全局事务的管理中。</p><p>业务层面实现提交和回滚逻辑。</p><h2 id="tcc模式" tabindex="-1">TCC模式 <a class="header-anchor" href="#tcc模式" aria-label="Permalink to &quot;TCC模式&quot;">​</a></h2><p>Tcc 是分布式事务中二阶段提交协议的实现，它的全称为 <code>Tny-Confirm-Cancel</code> , 即资源预留(Try)、确认操作(Confirm)、取消操作(Cancel)。具体含义如下：</p><ul><li>Try(prepare)阶段：对业务资源的检查并预留。</li><li>Confirm(commit)阶段：对业务处理进行提交，该步骤会对 Try 预留的资源进行释放，只要 Try 成功，Confirm 一定要能成功.</li><li>Cancel(rollback)阶段：对业务处理进行取消，即回滚操作。</li></ul><h3 id="tcc如何控制异常" tabindex="-1">TCC如何控制异常 <a class="header-anchor" href="#tcc如何控制异常" aria-label="Permalink to &quot;TCC如何控制异常&quot;">​</a></h3><h3 id="空回滚" tabindex="-1">空回滚 <a class="header-anchor" href="#空回滚" aria-label="Permalink to &quot;空回滚&quot;">​</a></h3><p>在没有调用参与方的 try 方法情况下，二阶段调用参与方的 Cancel 方法。</p><blockquote><p>在开启全局事务后，执行参与方的的 try 方法发生异常，导致一阶段未完成。在二阶段的时候全局事务失败调用 Cancel 方法，导致空回滚发生。</p></blockquote><p><strong>解决办法</strong></p><p>Seata 增加了一个 TCC 事务记录表。</p><p>在 try 执行时插入一条记录，代表一阶段执行了。在二阶段的时候查询记录即可判断 try 方法是否执行过。</p><h3 id="幂等性" tabindex="-1">幂等性 <a class="header-anchor" href="#幂等性" aria-label="Permalink to &quot;幂等性&quot;">​</a></h3><p>二阶段的 commit 和 Cancel 需要保证幂等性。</p><p>比如在二阶段时，参与者 A 执行完，将结果发给 TC的时候，如果出现网络抖动等异常导致 TC 未接收到 A 的二阶段返回结果。TC 会发起重复调用，直到执行成功。</p><p><strong>解决办法</strong></p><p>在 TCC 事务记录表增加一个字段 status，这样在二阶段执行之后修改状态，后续根据状态判断即可解决幂等性问题。</p><ul><li>tried：1</li><li>committed：2</li><li>rollbacked：3</li></ul><h3 id="悬挂" tabindex="-1">悬挂 <a class="header-anchor" href="#悬挂" aria-label="Permalink to &quot;悬挂&quot;">​</a></h3><p>悬挂指的是二阶段 Cannel 执行要比 一阶段 try 执行结束的早，全局事务结束。导致 try 方法预留的资源无法释放或提交。</p><p><img src="https://s2.loli.net/2025/06/10/uh7CD8wqRvN6b2P.png" alt=""></p><p><img src="https://s2.loli.net/2025/06/10/2Z6OlITyciLeqdu.png" alt=""></p><h3 id="seata-怎么解决tcc模式的问题" tabindex="-1">Seata 怎么解决TCC模式的问题 <a class="header-anchor" href="#seata-怎么解决tcc模式的问题" aria-label="Permalink to &quot;Seata 怎么解决TCC模式的问题&quot;">​</a></h3><h3 id="tcc-幂等、悬挂和空回滚问题如何解决" tabindex="-1">TCC 幂等、悬挂和空回滚问题如何解决？ <a class="header-anchor" href="#tcc-幂等、悬挂和空回滚问题如何解决" aria-label="Permalink to &quot;TCC 幂等、悬挂和空回滚问题如何解决？&quot;">​</a></h3><p>TCC 模式中存在的三大问题是<code>幂等</code>、<code>悬挂</code>、<code>空回滚</code>。</p><p>在 Seata1.5.1 版本中，增加了一张事务控制表，表名是 <code>tcc_fence_log</code> 来解决这个问题。</p><p>而在 <code>@TwoPhaseBusinessAction</code> 注解中提到的属性 useTCCFence 就是来指定是否开启这个机制，这个属性值默认是 false。</p><p>/zz引入 status = suspended，意为二阶段 cancel已经执行过，阻止一阶段的 try 方法执行。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CREATE TABLE IF NOT EXISTS </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`tcc_fence_log`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `xid`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">global id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `branch_id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BIGINT NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">branch id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `action_name`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">action name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `status`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TINYINT NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">status(tried:1;committed:2;rollbacke</span></span>\n<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">d:3;suspended:4)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `gmt_create`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DATETIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">create time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  `gmt_modified`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DATETIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT NULL COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">update time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   PRIMARY KEY (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`xid`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`branch_id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   KEY </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`idx_gmt_modified`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`gmt_modified`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   KEY </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`idx_status`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`status`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InnoDB</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEFAULT CHARSET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utf8mb4;</span></span></code></pre></div><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li>如果参与者包含第三方公司接口，则无法控制事务补偿、重试、幂等等机制。</li><li>存在幂等、空回滚、悬挂等问题。</li></ol><h2 id="saga模式" tabindex="-1">Saga模式 <a class="header-anchor" href="#saga模式" aria-label="Permalink to &quot;Saga模式&quot;">​</a></h2><p><a href="https://seata.apache.org/zh-cn/docs/user/mode/saga" target="_blank" rel="noreferrer">seata.apache.org</a></p><p>Saga 模式是 SEATA 提供的长事务解决方案，在 Saga 模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。</p><p><img src="https://s2.loli.net/2025/06/10/eON69fDJndrUWkR.png" alt=""></p><ol><li>一阶段提交本地事务。</li><li>二阶段commit或者rollback。 <ul><li><p>全部执行成功，则commit。</p></li><li><p>如果当前事务执行失败，回滚当前事务包括之前已经成功的参与者。</p><p>通过反向补偿的逻辑（业务实现）来回滚事务。</p></li></ul></li></ol><h3 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h3><ul><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口。</li><li>默认情况下很少使用，如果有跨公司的情况，为了保证强一致性可以使用Saga模式。</li></ul>',96)]))}const g=s(h,[["render",n]]);export{E as __pageData,g as default};
