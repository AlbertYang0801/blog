import{_ as e,c as o,o as r,ae as i}from"./chunks/framework.BAYqcHKv.js";const m=JSON.parse('{"title":"手写Spring","description":"","frontmatter":{},"headers":[],"relativePath":"frame/spring/custom/手写Spring.md","filePath":"frame/spring/custom/手写Spring.md"}'),t={name:"frame/spring/custom/手写Spring.md"};function l(n,a,c,d,p,h){return r(),o("div",null,a[0]||(a[0]=[i('<h1 id="手写spring" tabindex="-1">手写Spring <a class="header-anchor" href="#手写spring" aria-label="Permalink to &quot;手写Spring&quot;">​</a></h1><ul><li>boot模块：实现一个简化版的 <code>Spring Boot</code>，用于打包运行。</li><li>web模块：实现Web MVC和REST API。</li></ul><h2 id="spring主要模块" tabindex="-1">Spring主要模块 <a class="header-anchor" href="#spring主要模块" aria-label="Permalink to &quot;Spring主要模块&quot;">​</a></h2><ul><li>context模块：实现ApplicationContext容器与Bean的管理；</li><li>aop模块：实现AOP功能；</li><li>jdbc模块：实现JdbcTemplate，以及声明式事务管理；</li></ul><h2 id="ioc" tabindex="-1">IOC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IOC&quot;">​</a></h2><p><a href="./IOC.html">IOC</a></p><h2 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h2><p><a href="./AOP.html">AOP</a></p><h2 id="jdbc" tabindex="-1">JDBC <a class="header-anchor" href="#jdbc" aria-label="Permalink to &quot;JDBC&quot;">​</a></h2><p><a href="./JDBC.html">JDBC</a></p><p><a href="./声明式事务.html">声明式事务</a></p><ol><li>由<code>JdbcConfiguration</code>创建的<code>DataSource</code>，实现了连接池；</li><li>由<code>JdbcConfiguration</code>创建的<code>JdbcTemplate</code>，实现基本SQL操作；</li><li>由<code>JdbcConfiguration</code>创建的<code>PlatformTransactionManager</code>，负责拦截<code>@Transactional</code>标识的Bean的public方法，自动管理事务；</li><li>由<code>JdbcConfiguration</code>创建的<code>TransactionalBeanPostProcessor</code>，负责给<code>@Transactional</code>标识的Bean创建AOP代理，拦截器正是<code>PlatformTransactionManager</code>。</li></ol><h2 id="mvc" tabindex="-1">MVC <a class="header-anchor" href="#mvc" aria-label="Permalink to &quot;MVC&quot;">​</a></h2><p><a href="./MVC.html">MVC</a></p><ol><li>一个<code>DispatcherServlet</code>作为核心处理组件，接收所有URL请求，然后按MVC规则转发；</li><li>基于<code>@Controller</code>注解的URL控制器，由应用程序提供，Spring负责解析规则；</li><li>提供<code>ViewResolver</code>，将应用程序的Controller处理后的结果进行渲染，给浏览器返回页面；</li><li>基于<code>@RestController</code>注解的REST处理机制，由应用程序提供，Spring负责将输入输出变为JSON格式；</li><li>多种拦截器和异常处理器等。</li></ol><h2 id="boot" tabindex="-1">Boot <a class="header-anchor" href="#boot" aria-label="Permalink to &quot;Boot&quot;">​</a></h2><p><a href="./Boot.html">Boot</a></p><h2 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h2><ul><li><p>工厂模式</p><p>ApplicationContext</p></li><li><p>适配器模式</p><p>AfterInvocationHandlerAdapter</p></li><li><p>模版模式</p><p>JdbcTemplate</p></li></ul><h2 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h2><p><a href="https://gitee.com/zztiyjw/summer-framework" target="_blank" rel="noreferrer">Albert.Yang/summer-framework</a></p><p><a href="https://liaoxuefeng.com/books/summerframework/introduction/index.html" target="_blank" rel="noreferrer">简介 - 手写Spring - 廖雪峰的官方网站</a></p><p><img src="https://s2.loli.net/2025/07/02/G6nrsIeoTVRmxO3.png" alt="image-20250702102300236"></p>',23)]))}const u=e(t,[["render",l]]);export{m as __pageData,u as default};
