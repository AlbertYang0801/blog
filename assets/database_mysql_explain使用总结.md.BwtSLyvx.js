import{_ as i,c as s,o as a,aM as d}from"./chunks/framework.Du1sph90.js";const E=JSON.parse('{"title":"explain使用总结","description":"","frontmatter":{},"headers":[],"relativePath":"database/mysql/explain使用总结.md","filePath":"database/mysql/explain使用总结.md","lastUpdated":1752827238000}'),e={name:"database/mysql/explain使用总结.md"};function n(l,t,r,h,p,k){return a(),s("div",null,t[0]||(t[0]=[d('<h1 id="explain使用总结" tabindex="-1">explain使用总结 <a class="header-anchor" href="#explain使用总结" aria-label="Permalink to &quot;explain使用总结&quot;">​</a></h1><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><table tabindex="0"><thead><tr><th>id</th><th>Columns</th><th>JSON Name</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>id</td><td>select_id</td><td>每个select子句的标识id</td></tr><tr><td>2</td><td>select_type</td><td>None</td><td>select语句的类型</td></tr><tr><td>3</td><td>table</td><td>table_name</td><td>当前表名</td></tr><tr><td>4</td><td>partitions</td><td>partitions</td><td>匹配的分区</td></tr><tr><td>5</td><td>type</td><td>access_type</td><td>当前表内访问方式 join type</td></tr><tr><td>6</td><td>possible_keys</td><td>possible_keys</td><td>可能使用到的索引</td></tr><tr><td>7</td><td>key</td><td>key</td><td>经过优化器评估最终使用的索引</td></tr><tr><td>8</td><td>key_len</td><td>key_length</td><td>使用到的索引长度</td></tr><tr><td>9</td><td>ref</td><td>ref</td><td>引用到的上一个表的列</td></tr><tr><td>10</td><td>rows</td><td>rows</td><td>rows_examined，要得到最终记录索要扫描经过的记录数</td></tr><tr><td>11</td><td>filtered</td><td>filtered</td><td>按表条件过滤行的百分比</td></tr><tr><td>12</td><td>Extra</td><td>None</td><td>额外的信息说明</td></tr></tbody></table><h3 id="select-type" tabindex="-1">select_type <a class="header-anchor" href="#select-type" aria-label="Permalink to &quot;select_type&quot;">​</a></h3><table tabindex="0"><thead><tr><th>id</th><th>select_type value</th><th>JSON name</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>None</td><td>简单的SELECT语句（不包括UNION操作或子查询操作）</td></tr><tr><td>2</td><td>PRIMARY</td><td>None</td><td>PRIMARY：查询中最外层的SELECT（如两表做UNION或者存在子查询的外层的表操作为PRIMARY，内层的操作为UNION）</td></tr><tr><td>3</td><td>UNION</td><td>None</td><td>UNION：UNION操作中，查询中处于内层的SELECT（内层的SELECT语句与外层的SELECT语句没有依赖关系）</td></tr><tr><td>4</td><td>DEPENDENT UNION</td><td>dependent(true)</td><td>DEPENDENT UNION：UNION操作中，查询中处于内层的SELECT（内层的SELECT语句与外层的SELECT语句有依赖关系）</td></tr><tr><td>5</td><td>UNIOIN RESULT</td><td>union_result</td><td>UNION RESULT：UNION操作的结果，id值通常为NULL</td></tr><tr><td>6</td><td>SUBQUERY</td><td>None</td><td>SUBQUERY：子查询中首个SELECT（如果有多个子查询存在）</td></tr><tr><td>7</td><td>DEPENDENT SUBQUERY</td><td>dependent(true)</td><td>DEPENDENT SUBQUERY：子查询中首个SELECT，但依赖于外层的表（如果有多个子查询存在）</td></tr><tr><td>8</td><td>DERIVED</td><td>None</td><td>DERIVED：被驱动的SELECT子查询（子查询位于FROM子句）</td></tr><tr><td>9</td><td>MATERIALIZED</td><td>materialized_form_subquery</td><td>MATERIALIZED：被物化的子查询</td></tr><tr><td>10</td><td>UNCACHEABLE SUBQUERY</td><td>cacheable(false)</td><td>UNCACHEABLE SUBQUERY：对于外层的主表，子查询不可被物化，每次都需要计算（耗时操作）</td></tr><tr><td>11</td><td>UNCACHEABLE UNION</td><td>cacheable(false)</td><td>UNCACHEABLE UNION：UNION操作中，内层的不可被物化的子查询（类似于UNCACHEABLE SUBQUERY）</td></tr></tbody></table><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><table tabindex="0"><thead><tr><th>id</th><th>type value</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>system</td><td>表中只有一行</td></tr><tr><td>2</td><td>const</td><td>单表中最多有一个匹配行，primary key 或者 unique index的检索</td></tr><tr><td>3</td><td>eq_ref</td><td>多表连接中被驱动表的连接列上有primary key或者unique index的检索</td></tr><tr><td>4</td><td>ref</td><td>与eq_ref类似，但不是使用primary key或者unique index，而是普通索引。也可以是单表上non-unique索引检索</td></tr><tr><td>5</td><td>fulltext</td><td>使用FULLTEXT索引执行连接</td></tr><tr><td>6</td><td>ref_or_null</td><td>与ref类似，区别在于条件中包含对NULL的查询</td></tr><tr><td>7</td><td>index_merge</td><td>索引合并优化，利用一个表里的N个索引查询,key_len表示这些索引键的和最长长度。</td></tr><tr><td>8</td><td>unique_subquery</td><td>in的后面是一个查询primary key</td></tr><tr><td>9</td><td>index_subquery</td><td>in的后面是一个查询普通index字段的子查询</td></tr><tr><td>10</td><td>range</td><td>单表索引中的范围查询,使用索引查询出单个表中的一些行数据。ref列会变为null</td></tr><tr><td>11</td><td>index</td><td>等于ALL。它有两种情况：(1)覆盖索引 (2)用索引的顺序做一个全表扫描。</td></tr><tr><td>12</td><td>all</td><td>全表扫描</td></tr></tbody></table><h3 id="extra" tabindex="-1">extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;extra&quot;">​</a></h3><table tabindex="0"><thead><tr><th>id</th><th>type value</th><th>Meaning</th></tr></thead><tbody><tr><td>1</td><td>const row not found</td><td>所要查询的表为空</td></tr><tr><td>2</td><td>Distinct</td><td>mysql正在查询distinct值，因此当它每查到一个distinct值之后就会停止当前组的搜索，去查询下一个值</td></tr><tr><td>3</td><td>Impossible WHERE</td><td>where条件总为false，表里没有满足条件的记录</td></tr><tr><td>4</td><td>Impossible WHERE noticed after reading const tables</td><td>在优化器评估了const表之后，发现where条件均不满足</td></tr><tr><td>5</td><td>no matching row in const table</td><td>当前join的表为const表，不能匹配</td></tr><tr><td>6</td><td>Not exists</td><td>优化器发现内表记录不可能满足where条件</td></tr><tr><td>7</td><td>Select tables optimized away</td><td>在没有group by子句时，对于MyISAM的select count(*)操作，或者当对于min(),max()的操作可以利用索引优化，优化器发现只会返回一行。</td></tr><tr><td>8</td><td>Using filesort</td><td>使用filesort来进行order by操作</td></tr><tr><td>9</td><td>Using index</td><td>覆盖索引</td></tr><tr><td>10</td><td>Using index for group-by</td><td>对于group by列或者distinct列，可以利用索引检索出数据，而不需要去表里查数据、分组、排序、去重等等</td></tr><tr><td>11</td><td>Using join buffer</td><td>之前的表连接在nested loop之后放进join buffer，再来和本表进行join。适用于本表的访问type为range，index或all</td></tr><tr><td>12</td><td>Using sort_union,using union,using intersect</td><td>index_merge的三种情况</td></tr><tr><td>13</td><td>Using temporary</td><td>使用了临时表来存储中间结果集，适用于group by，distinct，或order by列为不同表的列。</td></tr><tr><td>14</td><td>Using where</td><td>在存储引擎层检索出记录后，在server利用where条件进行过滤，并返回给客户端</td></tr></tbody></table><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h2><h3 id="结合排序选择索引" tabindex="-1">结合排序选择索引 <a class="header-anchor" href="#结合排序选择索引" aria-label="Permalink to &quot;结合排序选择索引&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2025/06/16/ZewYd14QguDjvtx.png" alt="" loading="lazy"></p><p>mysql在选择索引的时候会判断查询代价。</p><ul><li>扫描行数</li><li>排序</li></ul><p>b（50000）虽然比 a（1000） 扫描范围广，但是排序是按照 b 来排的。选择 b 虽然扫描行数过多，但是不用排序，代价更小。</p><p>所以 mysql 选择 b 索引进行查询。从结果看过滤了10w条。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果排序字段加上 a，mysql 就会选择使用 a 索引。从结果看只过滤了1000条。</p><p><img src="https://s2.loli.net/2025/06/16/5HMIQwC3BRYiJSD.png" alt="" loading="lazy"></p><h3 id="in查询走索引" tabindex="-1">in查询走索引 <a class="header-anchor" href="#in查询走索引" aria-label="Permalink to &quot;in查询走索引&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123122</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512312</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2025/06/16/yPlsiXN9f6mbnEk.png" alt="" loading="lazy"></p><p>查索引，找到row，然后回表。所以扫描行数为3行。</p><h3 id="like" tabindex="-1">like <a class="header-anchor" href="#like" aria-label="Permalink to &quot;like&quot;">​</a></h3><h3 id="不走索引" tabindex="-1">不走索引 <a class="header-anchor" href="#不走索引" aria-label="Permalink to &quot;不走索引&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%100&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不符合最做匹配原则，不走索引。</p><p><img src="https://s2.loli.net/2025/06/16/56PTDdoZFXOqY8C.png" alt="" loading="lazy"></p><h3 id="走索引" tabindex="-1">走索引 <a class="header-anchor" href="#走索引" aria-label="Permalink to &quot;走索引&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1001203%&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2025/06/16/fILKDYGsEmCyuHw.png" alt="" loading="lazy"></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://weikeqin.com/2020/02/05/mysql-explain/" target="_blank" rel="noreferrer">mysql explain 详解</a></p>',34)]))}const y=i(e,[["render",n]]);export{E as __pageData,y as default};
