import{_ as s,c as i,o as l,aN as e}from"./chunks/framework.A-MC8nKA.js";const c=JSON.parse('{"title":"ES分片","description":"","frontmatter":{},"headers":[],"relativePath":"middleware/es/ES分片.md","filePath":"middleware/es/ES分片.md","lastUpdated":1752827238000}'),n={name:"middleware/es/ES分片.md"};function t(r,a,h,p,d,o){return l(),i("div",null,a[0]||(a[0]=[e(`<h1 id="es分片" tabindex="-1">ES分片 <a class="header-anchor" href="#es分片" aria-label="Permalink to &quot;ES分片&quot;">​</a></h1><p>同一个索引会划分为多个分片。分片可以设置副本数量，分为主分片和副本分片。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 指定索引的主分片和副本分片数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PUT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">blogs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;settings&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;number_of_shards&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;number_of_replicas&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="主分片" tabindex="-1">主分片 <a class="header-anchor" href="#主分片" aria-label="Permalink to &quot;主分片&quot;">​</a></h2><ul><li>解决数据水平扩展的问题。同一个索引可以按照分片分配数据，将数据平均分配到所有节点之上。</li><li>主分片数创建好后就不能修改。</li><li>一个分片就是一个运行的 Lucene 实例。</li></ul><h3 id="主分片过少" tabindex="-1">主分片过少 <a class="header-anchor" href="#主分片过少" aria-label="Permalink to &quot;主分片过少&quot;">​</a></h3><ul><li>单个分片数据量过大。查询较慢，利用不了多节点的并发查询能力。</li><li>无法通过增加节点实现水平扩展。比如三个分片，有五个节点。</li></ul><h3 id="主分片过多" tabindex="-1">主分片过多 <a class="header-anchor" href="#主分片过多" aria-label="Permalink to &quot;主分片过多&quot;">​</a></h3><ul><li>节点上分配过多的分配，会影响性能，可能并发查询比较多。</li><li>影响结果的准确性。比如聚合取 top 是先在每个主分片查询聚合，然后到协调节点聚合的。并不是精确值。</li></ul><h2 id="副本分片" tabindex="-1">副本分片 <a class="header-anchor" href="#副本分片" aria-label="Permalink to &quot;副本分片&quot;">​</a></h2><ul><li>副本分片是主分片的拷贝。<strong>在主分片不可用时，通过副本分片继续提供服务</strong>。</li><li>用来解决高可用问题，提高容错性。</li><li>副本分片数可以动态调整。</li></ul><p><img src="https://s2.loli.net/2025/06/26/EvYKIdcrMAB2HmQ.png" alt="image.png" loading="lazy"></p><h2 id="如何确定分片数" tabindex="-1">如何确定分片数 <a class="header-anchor" href="#如何确定分片数" aria-label="Permalink to &quot;如何确定分片数&quot;">​</a></h2><h3 id="存储角度" tabindex="-1">存储角度 <a class="header-anchor" href="#存储角度" aria-label="Permalink to &quot;存储角度&quot;">​</a></h3><ul><li>搜索类应用，单个分片不要超过20GB</li><li>日志类应用，当分片不要超过50GB</li></ul><h3 id="为什么要控制分配存储大小" tabindex="-1">为什么要控制分配存储大小 <a class="header-anchor" href="#为什么要控制分配存储大小" aria-label="Permalink to &quot;为什么要控制分配存储大小&quot;">​</a></h3><ul><li>提高Update的性能。</li><li>进行Merge时，减少需要的资源。</li><li>丢失节点后，具备更快的恢复速度。</li><li>便于分片的Rebalance。</li></ul>`,17)]))}const u=s(n,[["render",t]]);export{c as __pageData,u as default};
