import{_ as s,c as i,o as p,aN as n}from"./chunks/framework.A-MC8nKA.js";const c=JSON.parse('{"title":"TCP/IP四层网络模型","description":"","frontmatter":{},"headers":[],"relativePath":"other/network/TCPIP四层网络模型.md","filePath":"other/network/TCPIP四层网络模型.md","lastUpdated":1752827268000}'),l={name:"other/network/TCPIP四层网络模型.md"};function e(t,a,r,h,o,d){return p(),i("div",null,a[0]||(a[0]=[n(`<h1 id="tcp-ip四层网络模型" tabindex="-1">TCP/IP四层网络模型 <a class="header-anchor" href="#tcp-ip四层网络模型" aria-label="Permalink to &quot;TCP/IP四层网络模型&quot;">​</a></h1><h3 id="为什么要有网络模型" tabindex="-1">为什么要有网络模型 <a class="header-anchor" href="#为什么要有网络模型" aria-label="Permalink to &quot;为什么要有网络模型&quot;">​</a></h3><p>进程通信的方式</p><ul><li>本机 <ul><li>消息队列</li><li>共享内存</li><li>管道（程序用来交换数据的地方）</li></ul></li><li>不同主机 <ul><li>网络通信</li></ul></li></ul><p>需要网络通信的设备是多种多样的，所以要兼容，就要设定网络通信之间的<strong>网络协议。</strong></p><h3 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h3><p><strong>应用层定义了应用进程之间通信和交互的规则，应用层交互数据单元为报文。</strong></p><p>不关心数据如何传输，将报文传给传输层做传输。</p><p>在这一层有很多熟悉的协议，比如 HTTP、HTTPS、DNS等。</p><p><a href="https://blog.csdn.net/Bitter_Li/article/details/120142457" target="_blank" rel="noreferrer">【计算机网络】TCP / IP 四层协议_tcp/ip协议包含哪几层_L Jiawen的博客-CSDN博客</a></p><p><strong>应用层工作在操作系统的用户态，传输层以及以下层工作在内核态。</strong></p><h3 id="什么是用户态和内核态" tabindex="-1">什么是用户态和内核态？ <a class="header-anchor" href="#什么是用户态和内核态" aria-label="Permalink to &quot;什么是用户态和内核态？&quot;">​</a></h3><ul><li><p>内核态</p><p>能访问硬件所有资源，进行系统调用。</p><p>一些应用在必须使用系统调用的场景，就要将用户态转为内核态，才能继续操作。比如唤醒线程。</p></li><li><p>用户态</p><p>应用只能使用用户态，使用自己应用的存储空间。</p></li></ul><p><strong>目的是为了保护内核空间的安全性。</strong></p><h3 id="传输层" tabindex="-1">传输层 <a class="header-anchor" href="#传输层" aria-label="Permalink to &quot;传输层&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/16/Wtfb8jPV1EBzQI6.png" alt="image.png" loading="lazy"></p><p>传输层接收应用层发来的数据包，传输层能在不同应用之间传输数据。</p><p>传输层主要能力就是 <strong>应用到应用之间的通信，实际传输数据的能力在下一层，网络层。</strong></p><p>传输层有两个非常常用的协议：TCP和UDP。</p><h3 id="tcp和udp的区别" tabindex="-1">TCP和UDP的区别 <a class="header-anchor" href="#tcp和udp的区别" aria-label="Permalink to &quot;TCP和UDP的区别&quot;">​</a></h3><ul><li><p>建立连接</p><p>TCP需要三次握手保证服务端的接收和发送的能力。</p><p>UDP不关心，直接发数据包。</p></li><li><p>可靠性</p><p>数据包太大时，直接传输不好控制。TCP会将数据包分为多个TCP 段。通过按顺序发TCP段，如果出现某个发送失败，会重新发送。</p><p>而UDP是只负责发送数据包，不负责数据包是否到达。</p></li></ul><p><img src="https://s2.loli.net/2025/07/16/VEehizyNBlr6tcU.png" alt="image.png" loading="lazy"></p><h3 id="端口" tabindex="-1">端口 <a class="header-anchor" href="#端口" aria-label="Permalink to &quot;端口&quot;">​</a></h3><p>客户端发包给服务端的时候，服务端可能有很多个应用。</p><p><img src="https://s2.loli.net/2025/07/16/ShDygpiZ1b6XxCn.png" alt="image.png" loading="lazy"></p><p>为了确认包是发给哪个应用的，服务端会使用端口将应用区分开。</p><p>而传输层报文中，会有端口信息，服务端能识别出该数据包对应的是哪个端口，进而找到接受数据包的应用。</p><h3 id="网络层" tabindex="-1">网络层 <a class="header-anchor" href="#网络层" aria-label="Permalink to &quot;网络层&quot;">​</a></h3><p>比如在两个应用A和B之间，想要通信，就要依赖于传输层的协议。比如TCP，A想和B通信，就要借助TCP协议实现，建联→发数据包→断开连接。传输层能提供应用之间通信的能力，但是发送数据包的能力不会实现，是在下层实现的。</p><p><strong>网络层就是负责将数据包从一个设备发到另一个设备。</strong></p><h3 id="ip协议" tabindex="-1">IP协议 <a class="header-anchor" href="#ip协议" aria-label="Permalink to &quot;IP协议&quot;">​</a></h3><p>IP协议是网络层常见的协议，将传输层的数据包进行进一步组装。</p><p>网络层也具有切分能力，超过一定长度会切分。</p><p><img src="https://s2.loli.net/2025/07/16/MKDBedCTpgNJ61q.png" alt="image.png" loading="lazy"></p><p>通过IP地址为设备编号，用来区分设备。</p><p>IP地址分为两种意义：</p><ul><li><p>网络号</p><p>标识该IP对应的设备在哪个子网下，也就是网段。</p><p>比如：10.10.103.179 网络号是 10.10.103.0</p></li><li><p>主机号</p><p>标识在同一个子网下的不同主机，也就是主机号。</p><p>比如：10.10.103.179 主机号是 179</p></li></ul><h3 id="通过ip地址找到对应设备" tabindex="-1">通过IP地址找到对应设备 <a class="header-anchor" href="#通过ip地址找到对应设备" aria-label="Permalink to &quot;通过IP地址找到对应设备&quot;">​</a></h3><p>比如IPv4协议的设备 10.10.103.179/24。先通过IP和子网掩码找到网络号，再去找对应的主机。</p><ul><li><p>子网掩码</p><p><strong>/24 → 255.255.255.0</strong></p><p>11111111-11111111-11111111-00000000</p></li><li><p>网络号（网段）</p><p>IP地址和子网掩码进行按位与</p><p>10.10.103.179 与 255.255.255.0 按位与得到的就是网络号，也就是网段。</p><p>结果是：<strong>10.10.103.0</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00001010-00001010-01100111-10110011</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11111111-11111111-11111111-00000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00001010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00001010</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 01100111</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00000000</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">103.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://s2.loli.net/2025/07/16/QIdc7gEj2A3NVke.png" alt="image.png" loading="lazy"></p></li><li><p>主机号</p><p>子网掩码取反与IP地址进行按位与，就可以得到主机号。</p><p>255.255.255.0取反与10.10.103.179 按位与。</p><p>最后得出主机号：<strong>179</strong></p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00001010-00001010-01100111-10110011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ip</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11111111-11111111-11111111-00000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 子网掩码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000000-00000000-00000000-11111111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 子网掩码取反</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000000-00000000-00000000-10110011</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0-0-0-179</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="路由能力" tabindex="-1">路由能力 <a class="header-anchor" href="#路由能力" aria-label="Permalink to &quot;路由能力&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/16/kKEOL4fgBMCFy1v.png" alt="image.png" loading="lazy"></p><p>在多设备复杂的网络情况下，IP地址访问路由器，通过路由去寻找目标地址的子网，然后将数据包发送到对应的网络内。</p><p>比如不同子网的机器，通过路由器去找，先找到对应子网，再找主机号，找到对应主机。</p><p><strong>网络层IP协议，通过子网掩码找到网段，再找到主机。然后发送网络数据包到该主机。还包括多设备情况的路由能力。</strong></p><h3 id="网络接口层" tabindex="-1">网络接口层 <a class="header-anchor" href="#网络接口层" aria-label="Permalink to &quot;网络接口层&quot;">​</a></h3><p>网络接口层为网络层提供<strong>链路传输</strong>的能力，是基于物理传输层面。</p><p><strong>将网络层封装好的数据，传输到目标计算机。</strong></p><p><img src="https://s2.loli.net/2025/07/16/6kAsXG1Kq4aWwb9.png" alt="image.png" loading="lazy"></p><p>在网络层报文基础上增加 <strong>MAC 头部</strong>，来标识以太网（局域网）的设备。</p><p><img src="https://s2.loli.net/2025/07/16/MKDBedCTpgNJ61q.png" alt="image.png" loading="lazy"></p><h3 id="什么是以太网" tabindex="-1">什么是以太网 <a class="header-anchor" href="#什么是以太网" aria-label="Permalink to &quot;什么是以太网&quot;">​</a></h3><p>以太网是一种局域网，通过交换机、路由器等组成以太网，使同一局域网的机器可以互相通信。</p><p>以太网下不能通过IP找到目的地，而是要通过MAC地址进行通信和判断网络包的目的地。</p><h3 id="mac地址的作用" tabindex="-1">mac地址的作用 <a class="header-anchor" href="#mac地址的作用" aria-label="Permalink to &quot;mac地址的作用&quot;">​</a></h3><ul><li>mac地址是物理属性，与机器绑定。</li><li>在局域网情况下，mac地址能帮助路由器识别设备。</li></ul><p><img src="https://s2.loli.net/2025/07/16/StmDqkAQRUZFYvX.png" alt="image.png" loading="lazy"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="四层网络模型链路" tabindex="-1">四层网络模型链路 <a class="header-anchor" href="#四层网络模型链路" aria-label="Permalink to &quot;四层网络模型链路&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/16/4P6ZsnlMThiQoSj.png" alt="image.png" loading="lazy"></p><h3 id="各层数据格式" tabindex="-1">各层数据格式 <a class="header-anchor" href="#各层数据格式" aria-label="Permalink to &quot;各层数据格式&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/16/lXWbyITg7z8qrGL.png" alt="image.png" loading="lazy"></p>`,62)]))}const k=s(l,[["render",e]]);export{c as __pageData,k as default};
