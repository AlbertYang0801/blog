import{_ as l,c as e,o as s,aM as t,k as a}from"./chunks/framework.Du1sph90.js";const k=JSON.parse('{"title":"事务隔离","description":"","frontmatter":{},"headers":[],"relativePath":"database/mysql/事务隔离.md","filePath":"database/mysql/事务隔离.md","lastUpdated":1752827238000}'),p={name:"database/mysql/事务隔离.md"};function n(r,i,o,h,d,c){return s(),e("div",null,i[0]||(i[0]=[t('<h1 id="事务隔离" tabindex="-1">事务隔离 <a class="header-anchor" href="#事务隔离" aria-label="Permalink to &quot;事务隔离&quot;">​</a></h1><p>简单来说，事务就是要保证一组数据库操作，要么全部成功，要么全部失败。</p><p>在 MySQL 中，事务支持是在<code>引擎层</code>实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并不是所有的引擎都支持事务。</p><p>比如 MySQL 原生的 <strong><code>MyISAM 引擎就不支持事务</code></strong>，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p><h2 id="事务问题" tabindex="-1">事务问题 <a class="header-anchor" href="#事务问题" aria-label="Permalink to &quot;事务问题&quot;">​</a></h2><h3 id="脏读" tabindex="-1">脏读 <a class="header-anchor" href="#脏读" aria-label="Permalink to &quot;脏读&quot;">​</a></h3><p>读到了别的事务 修改过 但未提交的数据</p><h3 id="不可重复读" tabindex="-1">不可重复读 <a class="header-anchor" href="#不可重复读" aria-label="Permalink to &quot;不可重复读&quot;">​</a></h3><p>指的是变没变化的问题。数据被修改了导致前后两次查询结果不一样。</p><p>原来是 A，现在是 B，就是不可重复读。</p><h3 id="幻读" tabindex="-1">幻读 <a class="header-anchor" href="#幻读" aria-label="Permalink to &quot;幻读&quot;">​</a></h3><p>指的是存不存在的问题，原来存在的，现在不存在了，就是幻读。</p><p><img src="https://s2.loli.net/2025/06/13/XUsu5ByQgoV1PcR.png" alt="" loading="lazy"></p><h3 id="为什么可重复读无法解决幻读" tabindex="-1">为什么可重复读无法解决幻读？ <a class="header-anchor" href="#为什么可重复读无法解决幻读" aria-label="Permalink to &quot;为什么可重复读无法解决幻读？&quot;">​</a></h3><ul><li><p><strong>范围查询问题</strong>：“可重复读”主要关注的是保护已存在的数据行不被修改或删除，但它没有机制来阻止其他事务在查询结果集所涵盖的范围内插入新行。这是因为范围查询的结果集是动态的，依赖于查询执行时的数据状态。</p></li><li><p><strong>当前读问题</strong>：在可重复读的隔离级别下，普通查询都是快照读，不会出现幻读的问题。</p><p>在当前读的情况下，才会出现幻读的问题。</p><p>比如事务中采用当前读的做法，for update。读最新数据是和快照数据不一样的。</p></li></ul><p>MySQL 为了解决可重复读下的幻读问题，引入了<strong>间隙锁</strong>。</p><h2 id="事务隔离级别" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-label="Permalink to &quot;事务隔离级别&quot;">​</a></h2><ul><li>读未提交（read uncommitted）</li><li>读已提交（read committed）</li><li>可重复读（repeatable read）</li><li>串行化（serializable ）</li></ul><hr><h3 id="详细解释" tabindex="-1"><strong>详细解释</strong> <a class="header-anchor" href="#详细解释" aria-label="Permalink to &quot;**详细解释**&quot;">​</a></h3><ul><li>读未提交是指：一个事务<strong>还没提交</strong>时，它做的变更就能被别的事务看到。</li><li>读已提交是指：一个事务<strong>提交</strong>之后，它做的变更才会被其他事务看到。</li><li>可重复读是指：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化：读的时候可以并发读，但是不能写。写的时候加排它锁，其它事务不能读也不能写。</li></ul><p>mysql默认事务隔离级别是：REPEATABLE-READ(可重复读)</p><hr><p>四种隔离级别在事务情况下的查询结果：</p><p><img src="https://s2.loli.net/2025/06/13/qJwL1uyQ7YvlkRf.png" alt="" loading="lazy"></p><ul><li><p>读未提交</p><p>事务A 读到了事务B 未提交的事务。</p><p>v1 = 2；v2 = 2；v3=2；</p></li><li><p>读已提交</p><p>事务 A 只能读到事务B提交的事务。</p><p>v1=1；v2=2; v3=2;</p></li><li><p>可重复读</p><p>事务提交前读到的数据保持一致。</p><p>v1=1; v2=1; v3=2</p></li><li><p>串行化</p><p>v1=1; v2=1; v3=2;</p></li></ul><h3 id="实现逻辑" tabindex="-1">实现逻辑 <a class="header-anchor" href="#实现逻辑" aria-label="Permalink to &quot;实现逻辑&quot;">​</a></h3><ul><li><p>读未提交</p><p>访问数据的时候，直接访问记录上的最新值。</p></li><li><p>读已提交</p><p>创建视图，在整个事务期间，每次 SQL 开始执行时创建视图。（保证读取到其它事务的提交结果）</p><p>SQL执行阶段的查询结果以视图结果为准。</p></li><li><p>可重复读</p><p>在事务开始时创建视图（保证整个事务阶段读取到的数据一致），整个事务执行阶段查询结果以视图结果为准。</p></li><li><p>串行化</p><p>在事务执行期间，对访问的记录直接加锁，避免其它事务并行访问。</p></li></ul><h3 id="查询隔离级别" tabindex="-1">查询隔离级别 <a class="header-anchor" href="#查询隔离级别" aria-label="Permalink to &quot;查询隔离级别&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transaction_isolation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;transaction_isolation&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2025/06/13/BD42OiX6KqmSoP1.png" alt="" loading="lazy"></p><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><h3 id="什么时候使用可重复读" tabindex="-1">什么时候使用可重复读？ <a class="header-anchor" href="#什么时候使用可重复读" aria-label="Permalink to &quot;什么时候使用可重复读？&quot;">​</a></h3><p>在数据校对的场景下，假如存在一张余额表，存在一张交易表。</p><p>此时需要根据交易表的本月交易量来判断余额。</p><p>如果在判断过程中，产生了新的交易，更新了这两张表，可能对判断结果产生影响。</p><hr><p>可重复读不会出现问题，将整个判断余额过程中设置为一个事务提交。两张表的数据在事务开始阶段，通过创建视图的方式保存，整个事务过程都是静态的，不会受到其它更新操作的影响。</p><h3 id="长事务问题" tabindex="-1">长事务问题 <a class="header-anchor" href="#长事务问题" aria-label="Permalink to &quot;长事务问题&quot;">​</a></h3><p>事务为了回滚，会保存数据到回滚日志（undo log）中，</p><p><img src="https://s2.loli.net/2025/06/13/u7eVJqFaPgkpT2R.png" alt="" loading="lazy"></p><p>当使用长事务的时候，它可能用到的回滚记录都会保存，导致占用磁盘空间过大。同时还会占用锁资源，影响整体使用。</p><p><strong>查找数据库中持续时间超过60s的事务：</strong></p><p>information_schema 库的 innodb_trx 表。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> information_schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">innodb_trx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIME_TO_SEC(timediff(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),trx_started))</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="避免长事务" tabindex="-1">避免长事务 <a class="header-anchor" href="#避免长事务" aria-label="Permalink to &quot;避免长事务&quot;">​</a></h3><p>业务方面：</p><ol><li>减少事务中非必要事务，比如只读事务。</li><li>控制SQL执行时间，避免长时间执行。</li></ol><p>数据库方面：</p><ol><li>监控 information_schema 库的 innodb_trx 表。超出阈值报警。</li><li>借助第三方工具自动 kill 长事务。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/117476959" target="_blank" rel="noreferrer">MySQL事务隔离级别和实现原理（看这一篇文章就够了！）</a></p><h2 id="一致性视图" tabindex="-1">一致性视图 <a class="header-anchor" href="#一致性视图" aria-label="Permalink to &quot;一致性视图&quot;">​</a></h2><p>可重复读的情况，在事务开始时，便会创建视图。这个视图有区分 MySQL 的视图，是<code>一致性视图</code>。</p><p>并不会对当前数据库涉及到的数据打快照，而是通过逻辑上的判断，获取开始事务之前的数据。</p><hr><p>通过区分数据的版本（transcation-id)，保证自己获取的数据。</p><p>因此，可重复读情况下，一个事务只需要在启动的时候声明说，“以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本”。</p><p><img src="https://s2.loli.net/2025/06/13/UvhQMj1EdItwrHG.png" alt="" loading="lazy"></p><p>事务在启动的时候，会根据事务的情况将所有事务分为3组。</p><ul><li>当前活跃事务位于<code>未提交事务集合</code>。</li><li>当前活跃事务的最小值，作为低水位。小于低水位的都是已提交事务，可见。</li><li>当前活跃事务的最大值+1，作为高水位。高于高水位的都是未开始事务，不可见。</li></ul><hr><p>一个数据的 row_txd_id 可能出现以下几种情况：</p><ol><li><p>row_txd_id &lt; 低水位。</p><p>可见。</p></li><li><p>row_txd_id ≥ 高水位。</p><p>不可见。</p></li><li><p>row_txd_id 在黄色区域。</p><ul><li>如果 row_txd_id 在活跃事务集合里面，不可见（事务未提交）。</li><li>如果 row_txd_id 不在活跃事务集合里面，代表虽然处于这个范围，但是事务不活跃（事务已经提交），可见。</li></ul></li></ol><h3 id="当前读和快照读" tabindex="-1">当前读和快照读 <a class="header-anchor" href="#当前读和快照读" aria-label="Permalink to &quot;当前读和快照读&quot;">​</a></h3><p>在MySQL中，有两种读取数据的方式，分别是“当前读”和“快照读”。</p><p>“当前读”是指在查询过程中，读取最新的数据，这种读取方式可以确保读取到最新的数据，但可能会导致数据不一致或者读取的数据被其他事务修改而造成读取失败。</p><p>MySQL中的当前读包括以下两种方式：</p><ol><li>读取共享锁（Shared Locks）：通过SELECT … FOR SHARE 或 SELECT … LOCK IN SHARE MODE语句，获取共享锁来读取数据。这种方式会锁定所读取的数据，防止其他事务对该数据进行修改，但允许其他事务读取该数据。</li><li>读取排他锁（Exclusive Locks）：通过SELECT … FOR UPDATE语句，获取排他锁来读取数据。这种方式会锁定所读取的数据，防止其他事务对该数据进行读取和修改，直到当前事务完成操作并释放锁为止。</li></ol><p>需要注意的是，当前读虽然可以确保读取到最新的数据，但如果多个事务同时进行当前读取，可能会导致锁竞争和死锁等问题，因此需要谨慎使用。</p><p>另一种读取方式是“快照读”（Snapshot Read），它读取的是查询开始时的数据快照，可以避免锁竞争和死锁等问题，但可能会导致读取到的数据不是最新的。在MySQL中，通过设置事务隔离级别来控制当前读和快照读的行为。</p><h3 id="update语句为什么使用当前读" tabindex="-1">update语句为什么使用当前读？ <a class="header-anchor" href="#update语句为什么使用当前读" aria-label="Permalink to &quot;update语句为什么使用当前读？&quot;">​</a></h3><p>UPDATE 语句 默认使用 <code>当前读</code> 方式更新数据，在最新事务版本上进行更新。</p><p>由于 MVVC 机制，导致同一条数据具有多个版本，跟 row_txd_id 绑定。假如使用<code>快照读</code>去更新数据，会导致快照版本之后的记录消失，出现数据不准确和事务版本不一致的问题。</p><hr><h3 id="当前读加锁问题" tabindex="-1">当前读加锁问题 <a class="header-anchor" href="#当前读加锁问题" aria-label="Permalink to &quot;当前读加锁问题&quot;">​</a></h3><p>更新时会对读取的记录加<code>排他锁</code>，防止其他数据更新和查询。</p><p>如果读取的表涉及到索引，会加索引锁，禁止更新和查询索引。</p><hr><p>使用当前读更新数据时，可能导致锁竞争和死锁问题。如果多个事务同时处理相同数据，很有可能造成死锁。</p><p>比如相互之间持有对方事务需要的锁，就可能导致死锁的出现。</p><hr><h3 id="mvcc-总结" tabindex="-1">MVCC 总结 <a class="header-anchor" href="#mvcc-总结" aria-label="Permalink to &quot;MVCC 总结&quot;">​</a></h3><p>MySQL的MVCC（Multi-Version Concurrency Control）是一种并发控制技术，用于在并发环境下保证事务的一致性和隔离性。</p><p>InnoDB 的行数据有多个版本，每个数据版本有自己的 row trx_id，每个事务或者语句有自己的一致性视图。普通查询语句是一致性读，一致性读会根据 row trx_id 和一致性视图确定数据版本的可见性。</p><ul><li>对于可重复读，查询只承认在事务启动前就已经提交完成的数据；</li><li>对于读提交，查询只承认在语句执行前就已经提交完成的数据；</li></ul><p>而更新都是当前读，总是读取已经提交完成的最新版本，并将修改操作应用到该版本上。</p><p>MVCC主要包括以下几个组件：</p><ol><li>事务标识符：每个事务都有一个唯一的事务标识符 row_txd_id，用于标识该事务的快照版本。</li><li>版本链：每个数据行都有一个版本链，用于保存该行的所有版本。版本链通常是一个双向链表，每个版本都包含前一个版本和后一个版本的引用。</li><li>回滚段：用于保存已提交的事务的快照版本，以便在事务回滚时使用。</li></ol><p>在MySQL中，MVCC主要应用于InnoDB存储引擎中。通过MVCC技术，InnoDB可以实现读取已提交（Read Committed）和可重复读（Repeatable Read）两种事务隔离级别，并支持多版本并发控制，提供了较好的性能和稳定性。</p><h3 id="undo日志版本链" tabindex="-1">undo日志版本链 <a class="header-anchor" href="#undo日志版本链" aria-label="Permalink to &quot;undo日志版本链&quot;">​</a></h3><p>undo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，Mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段 <strong>trx_id</strong> 和 roll_pointer 把这些undo日志串联起来形成一个历史记录版本链。</p><p><img src="https://s2.loli.net/2025/06/13/W2MSFNQ4v93jZgo.png" alt="" loading="lazy"></p><p>活跃事务 Id 集合</p>',94),a("p",{"5,":"",10:"",",16":""},null,-1),a("p",null,"最小的活跃事务 Id",-1),a("p",null,"< 最小的活跃事务 Id 5",-1),a("p",null,"已提交事务 可见 1,2,3,4 未提交的 不可见 17,18 不在活跃事务id集合里面的事务 可见的 6,7,8,9 活跃事务集合 不可见 自己 可见",-1)]))}const g=l(p,[["render",n]]);export{k as __pageData,g as default};
