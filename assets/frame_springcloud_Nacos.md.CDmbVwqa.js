import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.D7pKEi_Q.js";const d=JSON.parse('{"title":"Nacos","description":"","frontmatter":{},"headers":[],"relativePath":"frame/springcloud/Nacos.md","filePath":"frame/springcloud/Nacos.md"}'),l={name:"frame/springcloud/Nacos.md"};function n(h,a,r,p,o,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="nacos" tabindex="-1">Nacos <a class="header-anchor" href="#nacos" aria-label="Permalink to &quot;Nacos&quot;">​</a></h1><h2 id="地址" tabindex="-1">地址 <a class="header-anchor" href="#地址" aria-label="Permalink to &quot;地址&quot;">​</a></h2><h3 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-label="Permalink to &quot;GitHub&quot;">​</a></h3><p><a href="https://github.com/alibaba/nacos" target="_blank" rel="noreferrer">https://github.com/alibaba/nacos</a></p><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><p><a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noreferrer">Nacos 快速开始</a></p><h3 id="启动命令" tabindex="-1">启动命令 <a class="header-anchor" href="#启动命令" aria-label="Permalink to &quot;启动命令&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sh </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m standalone</span></span></code></pre></div><h3 id="可视化页面" tabindex="-1">可视化页面 <a class="header-anchor" href="#可视化页面" aria-label="Permalink to &quot;可视化页面&quot;">​</a></h3><p><code>http://localhost:8848/nacos</code></p><h2 id="注册中心原理" tabindex="-1">注册中心原理 <a class="header-anchor" href="#注册中心原理" aria-label="Permalink to &quot;注册中心原理&quot;">​</a></h2><h3 id="服务注册" tabindex="-1">服务注册 <a class="header-anchor" href="#服务注册" aria-label="Permalink to &quot;服务注册&quot;">​</a></h3><p>Nocas Client 在启动的时候会通过 Rest 的方式将自己的元数据（Ip、端口）等信息发给 Nocas Server。</p><p>Nacos Server 收到 Client 的注册请求后，将元数据信息存到内存 Map 中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">namespace, Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serviceName, Service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">是namespace_id，起到环境隔离的作用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">又是一个Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, Service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，代表分组及组内的服务。一个组内可以有多个服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">代表group分组，不过作为key时格式是group_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">服务信息</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/06/10/ogPbjMGSs4HUnOL.png" alt=""></p><h3 id="服务发现" tabindex="-1">服务发现 <a class="header-anchor" href="#服务发现" aria-label="Permalink to &quot;服务发现&quot;">​</a></h3><ul><li>服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，并且缓存在Nacos Client本地。</li><li>同时会在 Nacos Client 本地开启一个定时任务定时拉取服务端最新的注册表信息更新到本地缓存。</li></ul><h3 id="心跳同步" tabindex="-1">心跳同步 <a class="header-anchor" href="#心跳同步" aria-label="Permalink to &quot;心跳同步&quot;">​</a></h3><ul><li><p>在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。</p><p><strong>默认5s发送一次心跳。</strong></p></li></ul><h3 id="健康检查" tabindex="-1">健康检查 <a class="header-anchor" href="#健康检查" aria-label="Permalink to &quot;健康检查&quot;">​</a></h3><ul><li>Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将它的 healthy 属性置为false(客户端服务发现时不会发现)。</li><li>如果某个实例超过30秒没有收到心跳，直接剔除该实例(被剔除的实例如果恢复发送心跳则会重新注册)</li></ul><h3 id="自动配置" tabindex="-1">自动配置 <a class="header-anchor" href="#自动配置" aria-label="Permalink to &quot;自动配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ ElementType.TYPE, ElementType.METHOD })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConditionalOnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;spring.cloud.nacos.discovery.enabled&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">matchIfMissing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ConditionalOnNacosDiscoveryEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="配置中心原理" tabindex="-1">配置中心原理 <a class="header-anchor" href="#配置中心原理" aria-label="Permalink to &quot;配置中心原理&quot;">​</a></h2><h3 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/06/10/HgW34DyQGZNlds5.png" alt=""></p><p>Nacos的模式同时支持CP和AP</p><p>配置中心要求高：CP （保证数据一致性）</p><p>注册中心要求高：AP （保证服务可用性）</p><h3 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><ol><li><strong>配置信息存储</strong>：Nacos 默认使用内嵌数据库 Derby 来存储配置信息，还可以采用 MySQL 等关系型数据库。</li><li><strong>注册配置信息</strong>：服务启动时，Nacos Client 会向 Nacos Server 注册自己的配置信息，这个注册过程就是把配置信息写入存储，并生成版本号。</li><li><strong>获取配置信息</strong>：服务运行期间，Nacos Client 通过 API 从 Nacos Server 获取配置信息。Server 根据键查找对应的配置信息，并返回给 Client。</li><li><strong>监听配置变化</strong>：<strong>Nacos Client 可以通过注册监听器的方式，实现对配置信息的监听</strong>。当配置信息发生变化时，Nacos Server 会通知已注册的监听器，并触发相应的回调方法。</li></ol><h3 id="nacos长轮询" tabindex="-1">Nacos长轮询 <a class="header-anchor" href="#nacos长轮询" aria-label="Permalink to &quot;Nacos长轮询&quot;">​</a></h3><p>一般来说客户端和服务端的交互分为两种：<code>推（Push）</code>和<code>拉（Pull）</code>，Nacos 在<code>Pull</code>的基础上，采用了<strong>长轮询来进行配置的动态刷新</strong>。</p><p><img src="https://s2.loli.net/2025/06/10/gPq47OAhJsNvBka.png" alt=""></p><p>在长轮询模式下，客户端定时向服务端发起请求，检查配置信息是否发生变更。如果没有变更，服务端会”hold”住这个请求，即暂时不返回结果，直到配置发生变化或达到一定的超时时间。</p><p>通过长轮询的方式，Nacos 客户端能够实时感知配置的变化，并及时获取最新的配置信息。同时，这种方式也降低了服务端的压力，避免了大量的长连接占用内存资源。</p><h2 id="nacos-rabbion" tabindex="-1">Nacos-Rabbion <a class="header-anchor" href="#nacos-rabbion" aria-label="Permalink to &quot;Nacos-Rabbion&quot;">​</a></h2><p>Nacos 里面集成了 Rabbion</p><h3 id="实现原理-1" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理-1" aria-label="Permalink to &quot;实现原理&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/06/10/a1Mmg3sAnwz9I25.png" alt="image-20250610183342200"></p><ol><li>Nacos Client 从 Nacos Server 获取服务列表，并且维护到了本地。</li><li>远程调用时候，以 serverName 发起调用。</li><li><code>LoadBalancerInterceptor</code>会对请求进行拦截，替换 serverName 为真实的地址。</li></ol><h3 id="loadbalancer-配置" tabindex="-1">LoadBalancer 配置 <a class="header-anchor" href="#loadbalancer-配置" aria-label="Permalink to &quot;LoadBalancer 配置&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/06/10/cNgJbnjzxBaVws6.png" alt="image-20250610183318593"></p>`,44)]))}const E=s(l,[["render",n]]);export{d as __pageData,E as default};
