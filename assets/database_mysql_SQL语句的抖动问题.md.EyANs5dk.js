import{_ as e,c as a,o as l,ag as p}from"./chunks/framework.D7pKEi_Q.js";const c=JSON.parse('{"title":"SQL语句的抖动问题","description":"","frontmatter":{},"headers":[],"relativePath":"database/mysql/SQL语句的抖动问题.md","filePath":"database/mysql/SQL语句的抖动问题.md"}'),i={name:"database/mysql/SQL语句的抖动问题.md"};function n(s,o,t,r,d,h){return l(),a("div",null,o[0]||(o[0]=[p('<h1 id="sql语句的抖动问题" tabindex="-1">SQL语句的抖动问题 <a class="header-anchor" href="#sql语句的抖动问题" aria-label="Permalink to &quot;SQL语句的抖动问题&quot;">​</a></h1><p>有时候在执行 SQL 的时候，突然会变得很慢。这种慢比较随机，看起来像是抖动一样。</p><p>更新数据流程可以简化一下。</p><ol><li>内存（buffer pool）中的数据 flush 到磁盘。</li><li>数据写入到 redo log 中。</li></ol><p><strong>其中 buffer pool 中的数据页有三种状态</strong>：</p><ol><li><p>数据页无数据。</p></li><li><p>数据页是干净页。</p><blockquote><p>干净页指的是内存中数据和磁盘数据一致。</p></blockquote></li><li><p>数据页是脏页。</p><blockquote><p>脏页指的是内存中的数据被更新，但是没有flush到磁盘。出现内存和磁盘数据不一致的情况，此时该数据页称为脏页面。</p></blockquote></li></ol><h3 id="性能问题" tabindex="-1">性能问题 <a class="header-anchor" href="#性能问题" aria-label="Permalink to &quot;性能问题&quot;">​</a></h3><p><strong>导致执行变慢的原因可能有以下几种：</strong></p><ol><li><p>redo log 写满了。</p><blockquote><p>redo log 满了之后，会进行删除操作，删除最旧的数据，check point 向前推。以便 redo log 有足够空间支持写入。</p></blockquote><p>在redo log 满的时候，删除最旧数据的同时，要进行 flush 操作，将删除这部分数据中的脏页 flush 到磁盘中。</p><p>出现 redo log 写满的情况时，整个系统所有的更新都要阻塞，等待 redo log 空出空间。</p></li><li><p>buffer pool 满了。</p><p>当要读入的数据没有在 buffer pool 中时，要将数据写入到 buffer pool 的数据页上。</p><p>此时如果没有空闲的数据页，就要将最旧不使用的页面淘汰掉。淘汰时，<strong>如果该页面是脏页，需要先将数据页 flush 到磁盘</strong>。如果是干净页，直接删除数据页即可。</p><p>如果一个SQL涉及到的淘汰脏页个数太多，会导致查询时间明显变长。</p></li></ol><h3 id="innodb-刷脏页的控制策略" tabindex="-1">InnoDB 刷脏页的控制策略 <a class="header-anchor" href="#innodb-刷脏页的控制策略" aria-label="Permalink to &quot;InnoDB 刷脏页的控制策略&quot;">​</a></h3><h3 id="磁盘能力大小-innodb-io-capacity" tabindex="-1">磁盘能力大小 - innodb_io_capacity <a class="header-anchor" href="#磁盘能力大小-innodb-io-capacity" aria-label="Permalink to &quot;磁盘能力大小 - innodb_io_capacity&quot;">​</a></h3><blockquote><p>从内存 flush 到磁盘，受到磁盘 IO 能力的影响。机械硬盘和SSD的IO能力明显不同</p></blockquote><p>通过配置该参数可以设置磁盘能力大小，让 InnoDB 根据配置的大小进行<em><strong>全力刷磁盘</strong></em>。</p><p>磁盘的 IOPS 可以通过 fio 工具进行测试。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> fio -filename=$filename -direct=1 -iodepth 1 -thread -rw=randrw -ioengine=psync -bs=16k -size=500M -numjobs=10 -runtime=10 -group_reporting -name=mytest</span></span></code></pre></div><p>假如该值配置过小的话，刷脏页速度赶不上生成写入 buffer pool 数据的速度。会造成脏页累计，影响查询和更新的性能。</p><h3 id="刷脏页连坐机制-innodb-flush-neighbors" tabindex="-1">刷脏页连坐机制 - innodb_flush_neighbors <a class="header-anchor" href="#刷脏页连坐机制-innodb-flush-neighbors" aria-label="Permalink to &quot;刷脏页连坐机制 - innodb_flush_neighbors&quot;">​</a></h3><p>在刷一个脏页的时候，如果紧邻的数据页也是脏页，会一起刷掉。以此类推下去。</p><p>出现这种情况时会导致查询速度变慢，因为要等待脏页 flush。</p><p>在机械磁盘的情况下，这个连坐机制是很有必要的，因为可以减少随机IO。一次刷脏页的时候，顺便刷掉其余脏页。防止下次查询磁盘。</p><p>但是SSD这种访问磁盘快的情况下，就不需要连坐机制。</p><p>可以通过<code>innodb_flush_neighbors</code> 参数来配置。</p><ul><li>innodb_flush_neighbors = 0；意味着只刷自己，不连坐。</li><li>innodb_flush_neighbors = 1；意味连坐。</li></ul><p>在 MySQL 8.0 中，innodb_flush_neighbors 参数的默认值已经是 0 了。</p><h3 id="刷脏页速度" tabindex="-1">刷脏页速度 <a class="header-anchor" href="#刷脏页速度" aria-label="Permalink to &quot;刷脏页速度&quot;">​</a></h3><p>InnoDB会在后台刷脏页，而刷脏页时主要根据 buffer pool 中的脏页比例和 redo log 写盘速度来控制，刷脏页的速度。</p><p>计算出比例后，根据配置的磁盘能力大小，控制实际刷新脏页的速度。这样可以保证减少刷脏页占用 IO 资源影响到查询和更新。</p><ul><li><p>脏页比例</p><p>默认脏页比例上限是75%，控制不要让比例超过75%。</p><p>可以通过计算得来：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total</span></span></code></pre></div></li><li><p>redo log 写盘速度</p><p>(当前日志序号 - checkpoint) N</p></li></ul><p><img src="https://s2.loli.net/2025/06/13/seS9y7dD3A15FKH.png" alt=""></p>',29)]))}const u=e(i,[["render",n]]);export{c as __pageData,u as default};
