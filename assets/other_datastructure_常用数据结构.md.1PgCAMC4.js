import{_ as i,c as l,o as t,aM as s}from"./chunks/framework.Du1sph90.js";const c=JSON.parse('{"title":"常用数据结构","description":"","frontmatter":{},"headers":[],"relativePath":"other/datastructure/常用数据结构.md","filePath":"other/datastructure/常用数据结构.md","lastUpdated":1752827268000}'),e={name:"other/datastructure/常用数据结构.md"};function p(n,a,r,h,o,g){return t(),l("div",null,a[0]||(a[0]=[s(`<h1 id="常用数据结构" tabindex="-1">常用数据结构 <a class="header-anchor" href="#常用数据结构" aria-label="Permalink to &quot;常用数据结构&quot;">​</a></h1><h2 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/dYTAvLEHXhUDlgi.png" alt="image.png" loading="lazy"></p><h2 id="复杂度" tabindex="-1">复杂度 <a class="header-anchor" href="#复杂度" aria-label="Permalink to &quot;复杂度&quot;">​</a></h2><p>时间复杂度</p><p>空间复杂度</p><h2 id="线性表" tabindex="-1">线性表 <a class="header-anchor" href="#线性表" aria-label="Permalink to &quot;线性表&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/MAxfsqRJK1a5ton.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/OGcT2S7U9IDJtX5.png" alt="image.png" loading="lazy"></p><h2 id="串" tabindex="-1">串 <a class="header-anchor" href="#串" aria-label="Permalink to &quot;串&quot;">​</a></h2><p>比如字符串。</p><p><img src="https://s2.loli.net/2025/07/18/nMk3KqNuyIzfl6W.png" alt="image.png" loading="lazy"></p><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/PlwZHhX26pB4VxW.png" alt="image.png" loading="lazy"></p><h2 id="矩阵" tabindex="-1">矩阵 <a class="header-anchor" href="#矩阵" aria-label="Permalink to &quot;矩阵&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/eOi1WcnkPYyw3rs.png" alt="image.png" loading="lazy"></p><p>求矩阵元素下标，直接代入即可。</p><p><img src="https://s2.loli.net/2025/07/18/8zwmRDfEHeLUCbN.png" alt="image.png" loading="lazy"></p><p>代入 A(0,0) 和 A(0,1)，分别对应 M(1) 和 M(2)。</p><blockquote><p>因为 M[1..m] 是从 1 开始的。</p></blockquote><h2 id="广义表" tabindex="-1">广义表 <a class="header-anchor" href="#广义表" aria-label="Permalink to &quot;广义表&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/bwMgcQA4KIf8vDU.png" alt="image.png" loading="lazy"></p><p>例1：长度为3，深度为2</p><p>例2: 先取表尾，再取表头，再取表头。</p><p>head (head ( tail(LS1) ) )</p><h3 id="广义表的基本运算" tabindex="-1">广义表的基本运算 <a class="header-anchor" href="#广义表的基本运算" aria-label="Permalink to &quot;广义表的基本运算&quot;">​</a></h3><ol><li>取表头</li><li>取表尾</li></ol><h2 id="二叉树" tabindex="-1">二叉树 <a class="header-anchor" href="#二叉树" aria-label="Permalink to &quot;二叉树&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/07/18/vbCKzf6URgmYjhn.png" alt="image.png" loading="lazy"></p><ul><li><p>满二叉树</p><p>节点度都为2。</p></li><li><p>完全二叉树</p><p>节点保持有序。</p></li></ul><h3 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h3><ol><li>任何一颗二叉树，<strong>如果叶子结点为n0，度为 2 的节点为 n，则 n0=n2+1。</strong></li></ol><p><a href="https://flowus.cn/24b852d9-0a5a-4e0f-bc11-93d6cbca9ea7" target="_blank" rel="noreferrer">二叉树</a></p><h3 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h3><ul><li>前序遍历：根左右（^ ← →）</li><li>中序遍历：左根右 （← ^ →）</li><li>后序遍历：左右根 （← → ^）</li></ul><blockquote><p>左右顺序是不变的，根的位置依次在1、2、3的位置上。</p></blockquote><h3 id="反向构造二叉树" tabindex="-1">反向构造二叉树 <a class="header-anchor" href="#反向构造二叉树" aria-label="Permalink to &quot;反向构造二叉树&quot;">​</a></h3><p>根据前序遍历规则，第一个元素为根元素，找到根元素。</p><p>一步一步拆解，左子树右子树。</p><p><img src="https://s2.loli.net/2025/07/18/N6R9Ybjq8B35E4P.png" alt="image.png" loading="lazy"></p><h3 id="树转二叉树" tabindex="-1">树转二叉树 <a class="header-anchor" href="#树转二叉树" aria-label="Permalink to &quot;树转二叉树&quot;">​</a></h3><p>满足两个规则，即刻画出二叉树。</p><ol><li>孩子节点 - 放到左子树</li><li>兄弟节点 - 放到右子树</li></ol><p><img src="https://s2.loli.net/2025/07/18/irE1SYpNBxyeXcs.png" alt="image.png" loading="lazy"></p><h3 id="二叉排序树" tabindex="-1">二叉排序树 <a class="header-anchor" href="#二叉排序树" aria-label="Permalink to &quot;二叉排序树&quot;">​</a></h3><p>满足两个规则即可：</p><ol><li>左孩子小于根</li><li>右孩子大于根</li></ol><p><img src="https://s2.loli.net/2025/07/18/XspQWex9klz47R1.png" alt="image.png" loading="lazy"></p><h3 id="哈夫曼树-最优二叉树" tabindex="-1">哈夫曼树-最优二叉树 <a class="header-anchor" href="#哈夫曼树-最优二叉树" aria-label="Permalink to &quot;哈夫曼树-最优二叉树&quot;">​</a></h3><p>哈夫曼树 是一种最优树, 是一类<strong>带权路径长度最短的二叉树。</strong></p><p>构建哈夫曼树的核心就是选出来最小的两个节点去构造。</p><blockquote><p>两个节点相加的值作为新元素进行比较。</p></blockquote><p><img src="https://s2.loli.net/2025/07/18/3JsprKkxRZ5onIh.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/7VCDs32lM5Hjw1h.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/uXmgqMb5w8Kxls4.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/UqyXHSdDwbimEMn.png" alt="image.png" loading="lazy"></p><h3 id="线索二叉树" tabindex="-1">线索二叉树 <a class="header-anchor" href="#线索二叉树" aria-label="Permalink to &quot;线索二叉树&quot;">​</a></h3><p>线索二叉树优化了二叉树遍历和查找效率的数据结构。在叶子或者度为1 的节点增加指针。</p><ul><li>某个节点只有一个子节点。</li><li>叶子结点没有子节点。</li></ul><p>这些节点的左右子树空间未利用起来。加速后续查找的速度。</p><p><img src="https://s2.loli.net/2025/07/18/Ln8fWtxlTQ7Az1r.png" alt="image.png" loading="lazy"></p><p>无论是前序遍历，中序遍历还是后序遍历。</p><ul><li>如果一个节点没有左子节点就让他的左指针指向他的前驱节点。</li><li>如果一个节点没有后继节点，就让他的右指针指向他的后继节点。</li></ul><h3 id="中序遍历线索化" tabindex="-1">中序遍历线索化 <a class="header-anchor" href="#中序遍历线索化" aria-label="Permalink to &quot;中序遍历线索化&quot;">​</a></h3><p>比如下面这棵树</p><p><img src="https://s2.loli.net/2025/07/18/4KCIYEH2Xvyt1Ml.png" alt="image.png" loading="lazy"></p><p>首先采用左根右的方式遍历，得到 CBEGDFA。</p><p>然后按照中序遍历，设置线索。</p><ul><li>比如C左指针为空，右指针指向B。</li><li>比如G左指针指向E，右指针指向D。</li></ul><p><img src="https://s2.loli.net/2025/07/18/UOr5ewkLBuGQhPm.png" alt="image.png" loading="lazy"></p><h3 id="线索化步骤" tabindex="-1">线索化步骤 <a class="header-anchor" href="#线索化步骤" aria-label="Permalink to &quot;线索化步骤&quot;">​</a></h3><ol><li>先写出遍历顺序。</li><li>按照遍历顺序为节点添加左右指针。</li></ol><h3 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h3><p>定义：保持有序的情况下，<strong>任意节点的左右子树深度相差不超过 1</strong>。</p><p><img src="https://s2.loli.net/2025/07/18/p9t4rLeyO8a3bjf.png" alt="image.png" loading="lazy"></p><h2 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h2><ul><li>有向图：节点之间有方向指的是有向图。</li><li>无向图：节点之间没有方向表示指的是无向图。</li><li>完全图 <ul><li>在无向图中，每对顶点都有一条边，称为完全图。</li><li>在有向图中，没对顶点之间都有两条边，称为完全图。</li></ul></li></ul><p><img src="https://s2.loli.net/2025/07/18/xNgX8ucUGCYAP7p.png" alt="image.png" loading="lazy"></p><ul><li>入度：指向某节点的边数量。</li><li>出度：某节点指向别的节点的数量。</li></ul><h3 id="邻接矩阵" tabindex="-1">邻接矩阵 <a class="header-anchor" href="#邻接矩阵" aria-label="Permalink to &quot;邻接矩阵&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/18/zsx6cekb19PUQY3.png" alt="image.png" loading="lazy"></p><p>比如 5个元素，对应一个 5x5 的矩阵。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="邻接表" tabindex="-1">邻接表 <a class="header-anchor" href="#邻接表" aria-label="Permalink to &quot;邻接表&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/18/uhaIckexC7BAYn9.png" alt="image.png" loading="lazy"></p><p>节点的出指向以链表的形式展示。</p><p>比如 v1 分别指向 v2、v4、v6 展示为 v1→v2→v4→v6。</p><h3 id="图的遍历" tabindex="-1">图的遍历 <a class="header-anchor" href="#图的遍历" aria-label="Permalink to &quot;图的遍历&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/18/6RJ3VLPIQUWv2Xe.png" alt="image.png" loading="lazy"></p><ul><li><p>深度优先</p><p>优先向下遍历</p></li><li><p>广度优先</p><p>优先遍历左右子树</p></li></ul><h3 id="拓扑排序" tabindex="-1">拓扑排序 <a class="header-anchor" href="#拓扑排序" aria-label="Permalink to &quot;拓扑排序&quot;">​</a></h3><p>AOV网，表示图的活动顺序。</p><p>有的节点需要等待前序活动结束。排序时需要注意前序结束。</p><p><img src="https://s2.loli.net/2025/07/18/Mxe2kLUinZu4DJ9.png" alt="image.png" loading="lazy"></p><p>比如 C1、C2、C3、C4、C5 这个图。</p><p>AOV图的话，C3需要等待C1和C2完成。</p><p>所以排序可以是1、2、3、4、5 或 2、1、3、4、5。</p><blockquote><p>拓扑排序不止是一种方式。</p></blockquote><p><img src="https://s2.loli.net/2025/07/18/rXdkVKRQTOtwLBo.png" alt="image.png" loading="lazy"></p><p>在工程的实施过程中，有些活动的开始是以它所有前序活动的结束为先决条件的，必须在其他有关活动完成之后才能开始；有些活动没有先决条件，可以安排在任意时间开始。<strong>AOV网就是一种可以形象地反映出整个工程中各个活动之间的先后关系的有向图</strong>。</p><p><strong>AOV，Activity On Vertex Network，即顶点活动网</strong>。一个工程常常会被分为多个小的子工程，这些子工程被称为活动，<strong>在有向图中，若以顶点表示活动，有向边（也可以称为弧）表示活动之间的先后关系，这样的图简称为AOV网</strong>。</p><h3 id="最小生成树" tabindex="-1">最小生成树 <a class="header-anchor" href="#最小生成树" aria-label="Permalink to &quot;最小生成树&quot;">​</a></h3><p><strong>生成树</strong>：<em>无向图中，一个连通图的最小连通子图称作该图的生成树（不能带环，保持连通，但边要尽可能的少）。</em></p><p><img src="https://s2.loli.net/2025/07/18/iWVL9GDxzvH74me.png" alt="image.png" loading="lazy"></p><p>这里的最小生成树，指的是路径带权最小。</p><h3 id="kruskal算法-克鲁斯卡尔算法" tabindex="-1">Kruskal算法-克鲁斯卡尔算法 <a class="header-anchor" href="#kruskal算法-克鲁斯卡尔算法" aria-label="Permalink to &quot;Kruskal算法-克鲁斯卡尔算法&quot;">​</a></h3><p>每次**从图中还未被选到的所有的边里面选出权值最小且不会构成环的边，**构成的生成树就是该图对应的最小生成树。</p><p>核心是<strong><em>按照权重选最小边</em>。</strong></p><p><img src="https://s2.loli.net/2025/07/18/83dBox5b47Ar2OX.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/IVMD53WfZBLjuC1.png" alt="image.png" loading="lazy"></p><h3 id="prim算法-普鲁姆算法" tabindex="-1">Prim算法-普鲁姆算法 <a class="header-anchor" href="#prim算法-普鲁姆算法" aria-label="Permalink to &quot;Prim算法-普鲁姆算法&quot;">​</a></h3><p>任选一个节点，然后将节点分为两部分。一部分是已选择的节点，另一部分是未选择的节点。</p><p>然后<strong>以选择节点为根，从未选择节点中挑选出权重最小的边。</strong></p><p>核心是按照<em><strong>权重选择最小节点</strong></em>。</p><p><img src="https://s2.loli.net/2025/07/18/v2IksB9e3A6FG1b.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/07/18/9dRL5oBYMiSvn2P.png" alt="image.png" loading="lazy"></p>`,116)]))}const k=i(e,[["render",p]]);export{c as __pageData,k as default};
