import{_ as s,c as t,o as i,ae as e}from"./chunks/framework.Dgg8-8ov.js";const k=JSON.parse('{"title":"CPU负载过高排查记录","description":"","frontmatter":{},"headers":[],"relativePath":"java/jvm/CPU负载过高排查记录.md","filePath":"java/jvm/CPU负载过高排查记录.md"}'),p={name:"java/jvm/CPU负载过高排查记录.md"};function l(n,a,h,o,r,d){return i(),t("div",null,a[0]||(a[0]=[e('<h1 id="cpu负载过高排查记录" tabindex="-1">CPU负载过高排查记录 <a class="header-anchor" href="#cpu负载过高排查记录" aria-label="Permalink to &quot;CPU负载过高排查记录&quot;">​</a></h1><p><a href="https://blog.csdn.net/lijie1051/article/details/128464838" target="_blank" rel="noreferrer">解决线上微服务容器cpu占用100%问题（java进程占用100%问题）_容器cpu占用高_上树的蜗牛儿的博客-CSDN博客</a></p><h2 id="平台发现问题" tabindex="-1">平台发现问题 <a class="header-anchor" href="#平台发现问题" aria-label="Permalink to &quot;平台发现问题&quot;">​</a></h2><p>平台发现集群节点 node219 CPU利用率过高。</p><p><img src="https://s2.loli.net/2025/05/29/Ub4zn7Pw3YM6Evl.png" alt="image.png"></p><p>通过查看该节点下的 pod 发现，bookdemo 使用 CPU 过高。</p><p><img src="https://s2.loli.net/2025/05/29/pT5ohk7ftYPECGU.png" alt="image.png"></p><h2 id="主机排查" tabindex="-1">主机排查 <a class="header-anchor" href="#主机排查" aria-label="Permalink to &quot;主机排查&quot;">​</a></h2><h3 id="top-查看进程情况" tabindex="-1">top 查看进程情况 <a class="header-anchor" href="#top-查看进程情况" aria-label="Permalink to &quot;top 查看进程情况&quot;">​</a></h3><p>使用 top 确认占用cpu过高的进程。</p><p>PID=17177 占用 CPU 最高。</p><p><img src="https://s2.loli.net/2025/05/29/KoI7m1SMUPerxW4.png" alt=""></p><h3 id="查看进程-pid-对应的容器" tabindex="-1">查看进程 PID 对应的容器 <a class="header-anchor" href="#查看进程-pid-对应的容器" aria-label="Permalink to &quot;查看进程 PID 对应的容器&quot;">​</a></h3><p>由于该进程是个POD，需要找到对应容器，进入容器内部排查线程情况。</p><p><img src="https://s2.loli.net/2025/05/29/KocELWP9Chysi2f.png" alt=""></p><p><img src="https://s2.loli.net/2025/05/29/fWkvhgDpCyUju9w.png" alt=""></p><h2 id="容器内部排查" tabindex="-1">容器内部排查 <a class="header-anchor" href="#容器内部排查" aria-label="Permalink to &quot;容器内部排查&quot;">​</a></h2><h3 id="top查看进程情况" tabindex="-1">top查看进程情况 <a class="header-anchor" href="#top查看进程情况" aria-label="Permalink to &quot;top查看进程情况&quot;">​</a></h3><p>可以看到 PID=1 进程使用CPU过高。</p><p><img src="https://s2.loli.net/2025/05/29/TRfVYGOBQAHukyC.png" alt=""></p><h3 id="查看进程的线程资源情况" tabindex="-1">查看进程的线程资源情况 <a class="header-anchor" href="#查看进程的线程资源情况" aria-label="Permalink to &quot;查看进程的线程资源情况&quot;">​</a></h3><p>根据 PID = 1 查看该进程下的线程情况。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top -H -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/05/29/rzfWVbpwZsy1R8g.png" alt=""></p><p>可以看到有8个线程 CPU 使用率非常高。</p><h3 id="jstack查看进程堆栈信息" tabindex="-1">jstack查看进程堆栈信息 <a class="header-anchor" href="#jstack查看进程堆栈信息" aria-label="Permalink to &quot;jstack查看进程堆栈信息&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jstack </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17177</span></span></code></pre></div><p>输出结果到文件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jstack </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17177</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt; java.log</span></span></code></pre></div><h3 id="查看某个线程堆栈" tabindex="-1">查看某个线程堆栈 <a class="header-anchor" href="#查看某个线程堆栈" aria-label="Permalink to &quot;查看某个线程堆栈&quot;">​</a></h3><p>比如查看线程 PID=1911 的堆栈。</p><blockquote><p>堆栈里面的 id 是16进制，需要将拿到的 线程PID转换为16进制。比如 1911的16进制是 777。</p></blockquote><p><a href="https://jisuan5.com/decimal/?hex=1911" target="_blank" rel="noreferrer">十进制转换 - 在线进制转换器</a></p><p>可以看到堆栈信息中该线程的标识是 <code>nid=0x777</code>，可以根据该标识过滤。</p><p><img src="https://s2.loli.net/2025/05/29/G65zLyHxJDkUphr.png" alt=""></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat java.log | grep &#39;nid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">777</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39; -C </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/05/29/WzcMReCoy5qpE8j.png" alt=""></p><p>可以看到代码关键位置，通过排查代码作进一步排查。</p><h3 id="通过堆栈信息排查死锁" tabindex="-1">通过堆栈信息排查死锁 <a class="header-anchor" href="#通过堆栈信息排查死锁" aria-label="Permalink to &quot;通过堆栈信息排查死锁&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat java.log |grep &#39;deadlock&#39; -C </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/05/29/AidVDvC42GIkTtQ.png" alt=""></p><p>可以看到线程1 和 线程2 互相持有对方需要的锁，可以看到对应代码位置。</p><p>通过 lockId 可以快速查找该锁被谁持有。</p>',43)]))}const g=s(p,[["render",l]]);export{k as __pageData,g as default};
