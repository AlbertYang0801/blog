import{_ as T,c as l,o as r,aN as i}from"./chunks/framework.A-MC8nKA.js";const p=JSON.parse('{"title":"HTTP和HTTPS","description":"","frontmatter":{},"headers":[],"relativePath":"other/network/HTTP和HTTPS.md","filePath":"other/network/HTTP和HTTPS.md","lastUpdated":1752827268000}'),a={name:"other/network/HTTP和HTTPS.md"};function o(e,t,s,n,P,h){return r(),l("div",null,t[0]||(t[0]=[i('<h1 id="http和https" tabindex="-1">HTTP和HTTPS <a class="header-anchor" href="#http和https" aria-label="Permalink to &quot;HTTP和HTTPS&quot;">​</a></h1><h2 id="http-和-https-的区别" tabindex="-1">HTTP 和 HTTPS 的区别 <a class="header-anchor" href="#http-和-https-的区别" aria-label="Permalink to &quot;HTTP 和 HTTPS 的区别&quot;">​</a></h2><ul><li>传输问题。 <ul><li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。</li><li>HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</li></ul></li><li>建立连接过程。 <ul><li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。</li><li>HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li></ul></li><li>两者的默认端口不一样。 <ul><li>HTTP 默认端口号是 80。</li><li>HTTPS 默认端口号是 443。</li></ul></li><li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</li></ul><h2 id="https解决了-http的哪些问题" tabindex="-1">HTTPS解决了 HTTP的哪些问题？ <a class="header-anchor" href="#https解决了-http的哪些问题" aria-label="Permalink to &quot;HTTPS解决了 HTTP的哪些问题？&quot;">​</a></h2><p>HTTP 由于是明文传输，所以安全上存在问题。而 HTTPS 主要就是解决了 HTTP 的安全问题。</p><ul><li><strong>窃听风险</strong>：明文传输，容易窃取通信内容。</li><li><strong>篡改风险</strong>：强制植入垃圾广告。</li><li><strong>冒充风险</strong>：冒充网站。</li></ul><p><img src="https://s2.loli.net/2025/07/17/yN9CdKD7t1EIuUA.png" alt="image.png" loading="lazy"></p><p>HTTPS 在 HTTP 和 TCP 层之间加入 <code>SSL/TLS</code>协议。</p><ul><li><strong>信息加密</strong>：不再明文传输，交互内容加密。</li><li><strong>校验机制</strong>：对通信内容进行校验，保证内容不会被篡改。</li><li><strong>身份证书</strong>：证明访问地址安全性。</li></ul><h3 id="https是如何实现的" tabindex="-1"><strong>HTTPS是如何实现的</strong> <a class="header-anchor" href="#https是如何实现的" aria-label="Permalink to &quot;**HTTPS是如何实现的**&quot;">​</a></h3><ul><li><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险。</li><li><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。</li><li>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险。</li></ul>',11)]))}const S=T(a,[["render",o]]);export{p as __pageData,S as default};
