import{_ as e,c as s,o as n,aN as t}from"./chunks/framework.A-MC8nKA.js";const u=JSON.parse('{"title":"TSDB","description":"","frontmatter":{},"headers":[],"relativePath":"cloudnative/prometheus/TSDB.md","filePath":"cloudnative/prometheus/TSDB.md","lastUpdated":1752827268000}'),l={name:"cloudnative/prometheus/TSDB.md"};function p(r,a,o,i,d,c){return n(),s("div",null,a[0]||(a[0]=[t(`<h1 id="tsdb" tabindex="-1">TSDB <a class="header-anchor" href="#tsdb" aria-label="Permalink to &quot;TSDB&quot;">​</a></h1><p>Prometheus的 TSDB（Time Series Database）作为内置的时序数据库。</p><h3 id="存储原理" tabindex="-1">存储原理 <a class="header-anchor" href="#存储原理" aria-label="Permalink to &quot;存储原理&quot;">​</a></h3><p>TSDB 既使用内存也使用磁盘进行数据存储。</p><p><img src="https://s2.loli.net/2025/07/16/u2m1DCkNHFydQKZ.png" alt="image.png" loading="lazy"></p><h3 id="head" tabindex="-1">Head <a class="header-anchor" href="#head" aria-label="Permalink to &quot;Head&quot;">​</a></h3><p>在Prometheus中，Head 是数据库的内存部分，用于存储最近写入的数据。</p><p>当数据在Head中存储2小时后，会被转移到磁盘上的持久块（block）中。这些持久块是不变的，每个块代表一段时间的数据，并且按照时间顺序进行组织和存储。</p><p><img src="https://s2.loli.net/2025/07/16/dR48vI5AhuGS2WF.png" alt="image.png" loading="lazy"></p><h3 id="block块" tabindex="-1">Block块 <a class="header-anchor" href="#block块" aria-label="Permalink to &quot;Block块&quot;">​</a></h3><p>Prometheus中以每2个小时为一个时间窗口，即将2小时内产生的数据存储在一个block中，监控数据会以时间段的形式被拆分成不同的block，因此这样的block会有很多。</p><p>块的格式如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>│   └── 01HB97EB5NDVB1VFB04W5D1XGE  #  block块</span></span>
<span class="line"><span>│       │   ├── chunks  # 样本数据</span></span>
<span class="line"><span>│       │   │   └── 000001</span></span>
<span class="line"><span>│       │   ├── index  # 索引文件</span></span>
<span class="line"><span>│       │   ├── meta.json  # block元数据信息</span></span>
<span class="line"><span>│       │   └── tombstones  # 逻辑数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="wal" tabindex="-1">WAL <a class="header-anchor" href="#wal" aria-label="Permalink to &quot;WAL&quot;">​</a></h3><p>Prometheus 还使用 WAL（Write-Ahead Logging）进行数据持久化。每当有新的数据写入时，WAL会先将数据写入到预写日志中，然后再将数据写入到 Head 和磁盘上的块中。这样，即使在系统崩溃的情况下，也可以通过 WAL 恢复数据。</p><p>因此，<strong>Prometheus 的 TSDB 既使用内存也使用磁盘进行数据存储，并通过 Head 和持久块以及 WAL进行数据的读写和持久化</strong>。</p>`,16)]))}const b=e(l,[["render",p]]);export{u as __pageData,b as default};
