import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.D7pKEi_Q.js";const g=JSON.parse('{"title":"布隆过滤器","description":"","frontmatter":{},"headers":[],"relativePath":"database/redis/布隆过滤器.md","filePath":"database/redis/布隆过滤器.md"}'),t={name:"database/redis/布隆过滤器.md"};function h(p,s,e,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="布隆过滤器" tabindex="-1">布隆过滤器 <a class="header-anchor" href="#布隆过滤器" aria-label="Permalink to &quot;布隆过滤器&quot;">​</a></h1><h2 id="_1-什么是布隆过滤器" tabindex="-1">1. 什么是布隆过滤器？ <a class="header-anchor" href="#_1-什么是布隆过滤器" aria-label="Permalink to &quot;1. 什么是布隆过滤器？&quot;">​</a></h2><p>布隆过滤器（Bloom Filter）是一种数据结构，用来<strong>判断一个元素是否在一个集合中</strong>。布隆过滤器的本质上使用的是二进制向量和 k 个哈希函数组成。</p><p><strong>布隆过滤器具有如下优点：</strong></p><ul><li><p>空间利用率高。</p><p>布隆过滤器底层使用二进制向量保存数据，不需要保存元素本身，只需要在指定 bit 存放标识即可，故空间利用率非常高。</p><blockquote><p>int 类型占用四个字节，对应 4*8 个 bit，对比能存放 32 个数据。（注意存放的不是元素本身）</p></blockquote></li><li><p>时间效率也较高，插入和查询效率高。</p><p>布隆过滤器的时间复杂度只跟哈希函数的个数 k 有关，插入和查询的时间复杂度均为 O(k)；</p><p><em>结合布隆过滤器原理的数据结构理解效率高的原因。</em></p></li></ul><p><strong>同样的，布隆过滤器也存在一些缺点。</strong></p><ul><li><p>存在一定程度的误判。</p><p>布隆过滤器主要作用是用来判断一个元素是否在一个集合中，但是存在一定的误判率。</p><p><strong>若布隆过滤器判断数据不存在，则一定不存在。</strong></p><p><strong>若布隆过滤器判断数据存在，则不一定存在。</strong></p></li><li><p>不支持删除集合中的元素。</p><p>布隆过滤器不支持删除元素。</p><p><em>针对删除元素的优化可见：<a href="https://cloud.tencent.com/developer/article/1136056" target="_blank" rel="noreferrer">Counting Bloom Filter 的原理和实现</a></em></p></li></ul><h2 id="_2-为什么使用布隆过滤器" tabindex="-1">2. 为什么使用布隆过滤器？ <a class="header-anchor" href="#_2-为什么使用布隆过滤器" aria-label="Permalink to &quot;2. 为什么使用布隆过滤器？&quot;">​</a></h2><h3 id="解决缓存穿透" tabindex="-1">解决缓存穿透 <a class="header-anchor" href="#解决缓存穿透" aria-label="Permalink to &quot;解决缓存穿透&quot;">​</a></h3><p>布隆过滤器一个经典的应用场景就是用来解决缓存穿透。</p><blockquote><p>缓存穿透：当用户请求查询某个数据时，先从缓存查询，缓存中没有这个数据。然后向数据库查询数据，数据库中也没有这个数据，导致查询失败。</p></blockquote><p><strong>布隆过滤器在 redis 中解决缓存穿透的应用流程：</strong></p><ul><li>在向缓存中添加数据时，同时向布隆过滤器插入数据。</li><li>在向缓存查询数据时，先查询布隆过滤器，判断是否存在数据。 <ul><li>若布隆过滤器中存在，再查询缓存。</li><li>若布隆过滤器不存在数据，则不再继续向下查询。</li></ul></li></ul><p><img src="https://s2.loli.net/2025/06/19/axy1IF7j8vLVZs9.png" alt=""></p><p><strong>结合布隆过滤器的特点，当判断出数据不存在于布隆过滤器时，缓存中一定不存在该数据。就能解决缓存穿透的问题，减少无效请求访问缓存和数据库。</strong></p><h3 id="其他应用场景" tabindex="-1">其他应用场景 <a class="header-anchor" href="#其他应用场景" aria-label="Permalink to &quot;其他应用场景&quot;">​</a></h3><p>布隆过滤器除了能够解决缓存穿透的问题之外，还有很多的应用场景。但是前提是这些应用场景能够接受布隆过滤器带来的一定误判率的影响。</p><ul><li><p>判断用户名是否重复。</p><p>只有当布隆过滤器判断用户名不存在时，才可以使用当前用户名。</p></li><li><p>垃圾邮件问题。</p><p>当判断邮件为垃圾邮件时（经过哈希函数指定位设置为 1）。</p><p>布隆过滤器判断出邮件不是垃圾邮件时，那该邮件一定是正常邮件。</p><p>布隆过滤器判断出邮件是垃圾邮件时，该邮件有可能是正常邮件。存在正常邮件被识别为垃圾邮件的情况，这个时候可以选择为误判邮件增加白名单来解决。</p></li></ul><h2 id="_3-布隆过滤器的原理" tabindex="-1">3. 布隆过滤器的原理 <a class="header-anchor" href="#_3-布隆过滤器的原理" aria-label="Permalink to &quot;3. 布隆过滤器的原理&quot;">​</a></h2><h3 id="数据结构和存储原理" tabindex="-1">数据结构和存储原理 <a class="header-anchor" href="#数据结构和存储原理" aria-label="Permalink to &quot;数据结构和存储原理&quot;">​</a></h3><p>布隆过滤器底层由 <strong>bit 数组和 k 个哈希函数组成</strong>，bit 数组每个位上均初始化位 0，所有哈希函数尽量保证均匀分布。</p><ul><li>哈希函数用来计算，计算存入的数据映射到 bit 数组的位置。</li><li>bit 数组用来存放数据经过哈希函数映射的结果，指定位数值为 1。</li></ul><p><img src="https://s2.loli.net/2025/06/19/xI1WZqArd43vEQF.png" alt=""></p><h3 id="存储原理" tabindex="-1">存储原理 <a class="header-anchor" href="#存储原理" aria-label="Permalink to &quot;存储原理&quot;">​</a></h3><ol><li>插入元素时，分别使用多个哈希函数计算元素，得到哈希函数计算结果，对应 bit 数组中的位次。</li><li>根据得到的位次，将 bit 数组中指定位次设置为 1。</li></ol><h3 id="查询原理" tabindex="-1">查询原理 <a class="header-anchor" href="#查询原理" aria-label="Permalink to &quot;查询原理&quot;">​</a></h3><ol><li>根据查询元素，分别使用多个哈希函数计算，得到计算结果。</li><li>根据计算结果查询 bit 数组指定位次，若结果都为 1，则认为元素存在，若有一个位次值为 0 ，则认为元素不存在。</li></ol><h3 id="为什么会存在误判" tabindex="-1">为什么会存在误判？ <a class="header-anchor" href="#为什么会存在误判" aria-label="Permalink to &quot;为什么会存在误判？&quot;">​</a></h3><p>因为布隆过滤器的存储机制，简单概括为：<strong>插入元素经过不同的哈希函数计算，得到不同的位置，并将位数组指定位次设置为 1</strong>。</p><p>假设存在 A 和 B 两个元素，布隆过滤器中有三个哈希函数，A 和 B 经过哈希函数的结果相同。A 插入到布隆过滤器中，B 不存在布隆过滤器中。</p><p>当判断 B 是否存在于布隆过滤器时，经过三个哈希函数的结果，得到位数组指定位上值为 1，由此判断 B 存在于布隆过滤器中。但实际上 B 并没有插入到布隆过滤器中，这时就发生了误判。</p><p>误判的原因可以归结为：<strong>当插入的元素很多的情况下，某个元素即使之前不存在，但是它所映射的 k 位已经被之前其他的元素置为 1 了，这样就会出现误判，BloomFilter 会认为它已经存在了</strong>。</p><h3 id="误判率" tabindex="-1">误判率 <a class="header-anchor" href="#误判率" aria-label="Permalink to &quot;误判率&quot;">​</a></h3><p>简单来说，误判率受到<strong>哈希函数个数和位数组长度</strong>的影响。要求误判率越低意味着需要的哈希函数和位数组长度越多。当误判率低的时候，新增查询元素的时候效率相应会降低。当误判率高的时候，效率相对会高一些。</p><h3 id="为什么不支持删除" tabindex="-1">为什么不支持删除？ <a class="header-anchor" href="#为什么不支持删除" aria-label="Permalink to &quot;为什么不支持删除？&quot;">​</a></h3><p>如果删除布隆过滤器中的元素，会对后续结果产生误判的影响。</p><p>若要删除元素，首先将元素经过多个哈希函数计算，得到指定位次，并将位数组指定位设置为 0。但是由于位数组的每个位可能被多个元素指定，若某个位被修改为 0，其它存在于布隆过滤器中并指向该位的元素会被判断不存在，产生了误判。</p><p><em>比如 C 和 D 元素，C经过三个哈希函数的结果为 1、4、7，D 的结果为 1、5、8，当删除 C 时，1、4、7位对应值为 0 。此时查询 D ，对应 1、5、8 位置为 0、1、1，得到 D 元素不存在的结果，发生了误判。</em></p><hr><p>Counting Bloom Filter 是一种优化数据结构，支持删除。</p><p><a href="https://cloud.tencent.com/developer/article/1136056" target="_blank" rel="noreferrer">Counting Bloom Filter 的原理和实现</a></p><h2 id="_4-怎样使用布隆过滤器" tabindex="-1">4. 怎样使用布隆过滤器 <a class="header-anchor" href="#_4-怎样使用布隆过滤器" aria-label="Permalink to &quot;4. 怎样使用布隆过滤器&quot;">​</a></h2><h3 id="guava" tabindex="-1">Guava <a class="header-anchor" href="#guava" aria-label="Permalink to &quot;Guava&quot;">​</a></h3><p><a href="https://zhuanlan.zhihu.com/p/85042394" target="_blank" rel="noreferrer">结合Guava源码解读布隆过滤器</a></p><hr><ul><li><p>引入依赖</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">com.google.guava</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">groupId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">guava</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">artifactId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jre</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependency</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p>创建布隆过滤器</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//布隆过滤器存放数据类型，预期插入数据长度，误判率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BloomFilter&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; bloomFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BloomFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Funnels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integerFunnel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), size, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p>测试代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserLoginService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //布隆过滤器存放数据类型，预期插入数据长度，误判率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        BloomFilter&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; bloomFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BloomFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Funnels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">integerFunnel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), size,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //插入0～10000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bloomFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bloomFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mightContain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用户登陆过但是布隆过滤器没有判断出来&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //10001～13000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bloomFilter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mightContain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3000个元素发生误判的个数:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//output</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3000个元素发生误判的个数</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">301</span></span></code></pre></div></li></ul><h3 id="redis实现布隆过滤器" tabindex="-1">Redis实现布隆过滤器 <a class="header-anchor" href="#redis实现布隆过滤器" aria-label="Permalink to &quot;Redis实现布隆过滤器&quot;">​</a></h3><p>redis 默认不支持布隆过滤器，需要安装插件。</p><p><a href="https://blog.csdn.net/oyc619491800/article/details/106987590?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.base&amp;spm=1001.2101.3001.4242" target="_blank" rel="noreferrer">Centos7 Redis5 BloomFilter 安装及使用</a></p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/bef2ec1c361f#%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3" target="_blank" rel="noreferrer">布隆过滤器（Bloom Filter）原理及Guava中的具体实现</a></p><p><a href="https://blog.csdn.net/weixin_42002367/article/details/107061997" target="_blank" rel="noreferrer">布隆过滤器从底层原理到redis实战一篇讲清</a></p><p><a href="https://blog.csdn.net/weixin_49383182/article/details/117969587?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-5.base" target="_blank" rel="noreferrer">Linux安装布隆过滤器过程中make编译报错“fatal error:tdigest.h:没有那个文件或目录”处理指南</a></p>`,53)]))}const o=i(t,[["render",h]]);export{g as __pageData,o as default};
