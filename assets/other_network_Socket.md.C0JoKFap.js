import{_ as t,c as a,o,aM as c}from"./chunks/framework.Du1sph90.js";const h=JSON.parse('{"title":"Socket","description":"","frontmatter":{},"headers":[],"relativePath":"other/network/Socket.md","filePath":"other/network/Socket.md","lastUpdated":1752827268000}'),l={name:"other/network/Socket.md"};function p(r,e,i,n,s,d){return o(),a("div",null,e[0]||(e[0]=[c('<h1 id="socket" tabindex="-1">Socket <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;Socket&quot;">​</a></h1><p><img src="https://s2.loli.net/2025/07/17/wKtIZq7eS5Bm9Ox.png" alt="image.png" loading="lazy"></p><p>Socket 位于应用层和传输层之前的抽象层，是一组调用接口，TCP/IP网络的API函数。</p><p>实际上是对 TCP/IP协议的封装，只是为了更方便使用 TCP/IP 协议。</p><blockquote><p>TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。 这个就像操作系统会提供标准的编程接口，比如win32编程接口一样。 TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。</p></blockquote><h3 id="socket-通信流程" tabindex="-1">Socket 通信流程 <a class="header-anchor" href="#socket-通信流程" aria-label="Permalink to &quot;Socket 通信流程&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/17/LdT6kzABVK5b7Gg.png" alt="image.png" loading="lazy"></p><p>Socket按照四元组来标识不同客户端与服务端之间的连接。</p><p>四元组「源 IP、源端口、目的 IP、目的端口」</p><ul><li><p><code>accept()</code></p><p>服务端绑定端口之后，进入 <code>accept()</code>, <code>accept()</code>作用就是接受客户端请求，阻塞，直到有客户端请求进来。</p></li></ul><blockquote><p>对于客户端来说，出口就是 Socket。对于服务端来说，入口就是 Socket。Socket 并不负责具体的网络读写，只负责接受客户端请求，然后将客户端请求转发给实际处理的应用程序。</p></blockquote><h3 id="短连接" tabindex="-1">短连接 <a class="header-anchor" href="#短连接" aria-label="Permalink to &quot;短连接&quot;">​</a></h3><p>连接 → 传输数据 → 断开连接</p><p>传统 HTTP 是无状态的，建立连接后发送完数据就断开连接。</p><p>比如：请求不频繁间隔较久的场景可以使用短链接。因为维持长链接也是需要消耗资源的。</p><h3 id="长连接" tabindex="-1">长连接 <a class="header-anchor" href="#长连接" aria-label="Permalink to &quot;长连接&quot;">​</a></h3><p>连接 → 传输数据 → 保持连接 → 传输数据 …… → 断开连接</p><p>长连接就是建立 Socket 之后，即使传输数据完成后也保持连接。</p><p>比如：数据库的连接一般用长连接。</p><h2 id="网络编程的核心" tabindex="-1">网络编程的核心 <a class="header-anchor" href="#网络编程的核心" aria-label="Permalink to &quot;网络编程的核心&quot;">​</a></h2><ol><li>建立连接</li><li>读取网络数据</li><li>写网络数据</li></ol>',21)]))}const P=t(l,[["render",p]]);export{h as __pageData,P as default};
