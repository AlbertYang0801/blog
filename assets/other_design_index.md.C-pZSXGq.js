import{_ as l,c as e,o as a,aN as r}from"./chunks/framework.A-MC8nKA.js";const c=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"other/design/index.md","filePath":"other/design/index.md","lastUpdated":1755251095000}'),t={name:"other/design/index.md"};function p(n,i,s,o,d,h){return a(),e("div",null,i[0]||(i[0]=[r('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><h2 id="设计模式的目的" tabindex="-1">设计模式的目的 <a class="header-anchor" href="#设计模式的目的" aria-label="Permalink to &quot;设计模式的目的&quot;">​</a></h2><ul><li>代码重用性（提取重复代码）</li><li>可读性（代码规范，便于阅读）</li><li>可扩展性（方便增加新功能）</li><li>可靠性（增加新功能，对以前的功能没有影响）</li><li>使程序呈现高内聚、低耦合的特性</li></ul><h2 id="设计模式的七大基本原则" tabindex="-1">设计模式的七大基本原则 <a class="header-anchor" href="#设计模式的七大基本原则" aria-label="Permalink to &quot;设计模式的七大基本原则&quot;">​</a></h2><p><a href="https://gitee.com/zztiyjw/design-patterns-practice/tree/master/design-principle" target="_blank" rel="noreferrer">design-principle</a></p><ul><li><p>单一职责原则</p></li><li><p>接口隔离原则</p></li><li><p>依赖倒置原则</p></li><li><p>里氏替换原则</p></li><li><p>开闭原则</p></li><li><p>迪米特法则</p></li><li><p>合成复用法则</p></li></ul><h2 id="设计模式三大类型" tabindex="-1">设计模式三大类型 <a class="header-anchor" href="#设计模式三大类型" aria-label="Permalink to &quot;设计模式三大类型&quot;">​</a></h2><h3 id="_1-创建型模式" tabindex="-1">1. 创建型模式 <a class="header-anchor" href="#_1-创建型模式" aria-label="Permalink to &quot;1. 创建型模式&quot;">​</a></h3><p><a href="https://gitee.com/zztiyjw/design-patterns-practice/tree/master/design-create" target="_blank" rel="noreferrer">design-create</a></p><ul><li><p>单例模式</p><ul><li>序列化和反序列化</li></ul></li><li><p>工厂模式</p><ul><li>简单工厂模式</li><li>抽象工厂模式</li></ul></li><li><p>原型模式</p><ul><li>浅拷贝和深拷贝</li></ul></li><li><p>建造者模式</p><ul><li>手写lombok表达式的@builder注解源码</li></ul></li></ul><h3 id="_2-结构型模式" tabindex="-1">2.结构型模式 <a class="header-anchor" href="#_2-结构型模式" aria-label="Permalink to &quot;2.结构型模式&quot;">​</a></h3><p><a href="https://gitee.com/zztiyjw/design-patterns-practice/tree/master/design-structural" target="_blank" rel="noreferrer">design-structural</a></p><ul><li>代理模式</li><li>桥接模式</li><li>过滤器模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li></ul><h3 id="_3-行为型模式" tabindex="-1">3.行为型模式 <a class="header-anchor" href="#_3-行为型模式" aria-label="Permalink to &quot;3.行为型模式&quot;">​</a></h3><p><a href="https://gitee.com/zztiyjw/design-patterns-practice/tree/master/design-behavioral" target="_blank" rel="noreferrer">design-behavioral</a></p><ul><li>责任链模式</li><li>观察者模式</li></ul><ul><li><p>策略模式</p><ul><li>使用工厂模式和策略模式消灭if-else</li></ul></li><li><p>状态模式</p></li><li><p>模板模式</p></li><li><p>命令模式</p></li><li><p>解释器模式</p></li><li><p>迭代器模式</p></li><li><p>中介者模式</p></li><li><p>备忘录模式</p></li><li><p>访问者模式</p></li></ul>',17)]))}const _=l(t,[["render",p]]);export{c as __pageData,_ as default};
