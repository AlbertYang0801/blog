import{_ as a,c as i,o as n,aM as l}from"./chunks/framework.Du1sph90.js";const d=JSON.parse('{"title":"Kafka消费策略","description":"","frontmatter":{},"headers":[],"relativePath":"middleware/kafka/Kafka消费策略.md","filePath":"middleware/kafka/Kafka消费策略.md","lastUpdated":1752827238000}'),p={name:"middleware/kafka/Kafka消费策略.md"};function e(t,s,k,r,h,E){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="kafka消费策略" tabindex="-1">Kafka消费策略 <a class="header-anchor" href="#kafka消费策略" aria-label="Permalink to &quot;Kafka消费策略&quot;">​</a></h1><p>Kafka消费者-主动批量拉取</p><blockquote><p>Apache Kafka的消费者模型并不是基于传统的推（push）模型，而是采用了拉（pull）模型。</p></blockquote><ol><li>kafka配置类</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KafkaConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KafkaListenerContainerFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">batchFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConsumerFactory </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">consumerFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ConcurrentKafkaListenerContainerFactory&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConsumerFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(consumerFactory);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setConcurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContainerProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPollTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //设置为批量消费，每个批次数量在Kafka配置参数中设置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        factory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBatchListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol><li>消费者配置文件内容</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 最早未被消费的offset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring.kafka.consumer.auto-offset-reset=earliest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 批量一次最大拉取数据量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring.kafka.consumer.max-poll-records=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 批量拉取数据总大小最大数量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring.kafka.consumer.properties.max.partition.fetch.bytes=20485760</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 等待拉取的最大时间，防止超时</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spring.kafka.consumer.fetch-max-wait=10000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>spring.kafka.consumer.max-poll-records</p><p>批量一次最大拉取数据数量。默认是500，该数量受到max.partition.fetch.bytes配置的影响。</p></li><li><p>spring.kafka.consumer.properties.max.partition.fetch.bytes</p><p>批量拉取数据总大小最大数量。该值默认为1MB。若单条数据大小过大，可以适当将该值调大一点。比如有100条数据，总大小为1MB，则消费者单次消费数据总条数最大为100条，达不到500甚至是1000条。</p><p>注意：这时就可以将该值调大一点。这个参数是如果一个分区的数据可以达到配置的这个值 就是1个分区的数据，如果超过单个分区的值，则会从另一个分区拿数据。</p></li><li><p>spring.kafka.consumer.fetch-max-wait</p><p>等待拉取的最大时间，和前两个配置搭配使用。若单次数据量过大，拉取数据时间超过该配置时间，则会报异常。所以，在调大**<code>spring.kafka.consumer.max-poll-records</code>**参数的同时，应该将该值适当调大。</p></li></ul>`,8)]))}const o=a(p,[["render",e]]);export{d as __pageData,o as default};
