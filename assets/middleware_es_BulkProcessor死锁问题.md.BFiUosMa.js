import{_ as s,c as e,o as n,aM as l}from"./chunks/framework.Du1sph90.js";const k=JSON.parse('{"title":"BulkProcessor死锁问题","description":"","frontmatter":{},"headers":[],"relativePath":"middleware/es/BulkProcessor死锁问题.md","filePath":"middleware/es/BulkProcessor死锁问题.md","lastUpdated":1752827238000}'),i={name:"middleware/es/BulkProcessor死锁问题.md"};function r(t,a,p,c,o,h){return n(),e("div",null,a[0]||(a[0]=[l(`<h1 id="bulkprocessor死锁问题" tabindex="-1">BulkProcessor死锁问题 <a class="header-anchor" href="#bulkprocessor死锁问题" aria-label="Permalink to &quot;BulkProcessor死锁问题&quot;">​</a></h1><h2 id="问题原因" tabindex="-1">问题原因 <a class="header-anchor" href="#问题原因" aria-label="Permalink to &quot;问题原因&quot;">​</a></h2><ul><li>定时flush</li><li>bulk操作</li><li>retryHandler：失败重试</li></ul><ol><li><p>定时 flush 和 retryHandler 用的是一个定时线程池，而该线程池只有一个线程。</p></li><li><p>定时 flush 的方法用的锁和 bulk 操作时的锁是同一把锁。都是类对象级别的锁。</p><p><img src="https://s2.loli.net/2025/06/26/DWVgLbxTH2i3wz7.png" alt="image.png" loading="lazy"></p><p><img src="https://s2.loli.net/2025/06/26/K4RkUbMVdv1luGn.png" alt="image.png" loading="lazy"></p></li><li><p>当bluk失败后，会触发默认的重试逻辑。</p></li><li><p>如果重试时候 flush 刚好运行，就会出现这种死锁情况。</p><ol><li>bulk持有对象锁<code>BulkProcessor.class</code>，进行重试逻辑。</li><li>flush占有线程池的线程，等待对象锁<code>BulkProcessor.class</code>。</li><li>而 retryHandler 提交到线程池，等待线程释放。</li></ol><p><img src="https://s2.loli.net/2025/06/26/RwbMuo3FvhWqPLy.png" alt="image.png" loading="lazy"></p></li></ol><h2 id="解决方案" tabindex="-1"><strong>解决方案</strong> <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;**解决方案**&quot;">​</a></h2><p>取消失败重试</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xxx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBackoffPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BackoffPolicy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">noBackoff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="issue" tabindex="-1">issue <a class="header-anchor" href="#issue" aria-label="Permalink to &quot;issue&quot;">​</a></h3><p><a href="https://github.com/elastic/elasticsearch/issues/47599" target="_blank" rel="noreferrer">BulkProcessor can deadlock when bulk requests fail · Issue #47599 · elastic/elasticsearch</a></p><h3 id="博客" tabindex="-1">博客 <a class="header-anchor" href="#博客" aria-label="Permalink to &quot;博客&quot;">​</a></h3><p><a href="https://blog.csdn.net/baichoufei90/article/details/108468223" target="_blank" rel="noreferrer">Elasticsearch-BulkProcessor-死锁分析_elasticsearch bulk failed-CSDN博客</a></p><p><a href="https://cloud.tencent.com/developer/news/1129702" target="_blank" rel="noreferrer">ElasticSearch - 批量更新bulk死锁问题排查 - 腾讯云开发者社区-腾讯云</a></p><h2 id="排查过程" tabindex="-1">排查过程 <a class="header-anchor" href="#排查过程" aria-label="Permalink to &quot;排查过程&quot;">​</a></h2><ul><li>jstack 查看堆栈</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elasticsearch[scheduler][T#</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; #56 daemon prio=5 os_prio=0 tid=0x00007fa04001e000 nid=0x7425 waiting on condition [0x00007fa00bcfd000]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   java.lang.Thread.State: WAITING (parking)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at sun.misc.Unsafe.park(Native Method)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - parking to wait for  &lt;0x0000000090b4e670&gt; (a java.util.concurrent.Semaphore$NonfairSync)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.Semaphore.acquire(Semaphore.java:312)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.action.bulk.BulkRequestHandler.execute(BulkRequestHandler.java:59)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.action.bulk.BulkProcessor.execute(BulkProcessor.java:339)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.action.bulk.BulkProcessor.access$300(BulkProcessor.java:51)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.action.bulk.BulkProcessor$Flush.run(BulkProcessor.java:373)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        - locked &lt;0x0000000090aeacd0&gt; (a org.elasticsearch.action.bulk.BulkProcessor)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.threadpool.Scheduler$ReschedulingRunnable.doRun(Scheduler.java:182)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at org.elasticsearch.common.util.concurrent.AbstractRunnable.run(AbstractRunnable.java:37)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        at java.lang.Thread.run(Thread.java:748)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li><p>对应源码位置</p><p><img src="https://s2.loli.net/2025/06/26/19hrEbVZdLoXWjB.png" alt="image.png" loading="lazy"></p></li></ul>`,16)]))}const d=s(i,[["render",r]]);export{k as __pageData,d as default};
