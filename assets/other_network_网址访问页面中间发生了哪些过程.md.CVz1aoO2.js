import{_ as l,c as i,o as e,aN as t}from"./chunks/framework.A-MC8nKA.js";const u=JSON.parse('{"title":"网址访问页面中间发生了哪些过程","description":"","frontmatter":{},"headers":[],"relativePath":"other/network/网址访问页面中间发生了哪些过程.md","filePath":"other/network/网址访问页面中间发生了哪些过程.md","lastUpdated":1752827268000}'),p={name:"other/network/网址访问页面中间发生了哪些过程.md"};function o(r,a,n,h,s,d){return e(),i("div",null,a[0]||(a[0]=[t('<h1 id="网址访问页面中间发生了哪些过程" tabindex="-1">网址访问页面中间发生了哪些过程 <a class="header-anchor" href="#网址访问页面中间发生了哪些过程" aria-label="Permalink to &quot;网址访问页面中间发生了哪些过程&quot;">​</a></h1><p><a href="https://www.xiaolincoding.com/network/1_base/what_happen_url.html#%E5%AD%A4%E5%8D%95%E5%B0%8F%E5%BC%9F-http" target="_blank" rel="noreferrer">2.2 键入网址到网页显示，期间发生了什么？</a></p><h2 id="url解析" tabindex="-1">URL解析 <a class="header-anchor" href="#url解析" aria-label="Permalink to &quot;URL解析&quot;">​</a></h2><h3 id="url组成信息" tabindex="-1">URL组成信息 <a class="header-anchor" href="#url组成信息" aria-label="Permalink to &quot;URL组成信息&quot;">​</a></h3><p>URL实际上就是<strong>访问 Web服务器里面的文件资源。</strong></p><p><img src="https://s2.loli.net/2025/07/17/evSnU6rzB48X3Kd.png" alt="image.png" loading="lazy"></p><h3 id="组装http报文" tabindex="-1">组装HTTP报文 <a class="header-anchor" href="#组装http报文" aria-label="Permalink to &quot;组装HTTP报文&quot;">​</a></h3><p>根据 URL 解析得到的内容，进行报文组装。</p><blockquote><p>HTTP 作为应用层规范的协议，规定了发往应用层的报文格式。</p></blockquote><p><img src="https://s2.loli.net/2025/07/17/ji7pXFP28hRSuKs.png" alt="image.png" loading="lazy"></p><h2 id="dns域名解析" tabindex="-1">DNS域名解析 <a class="header-anchor" href="#dns域名解析" aria-label="Permalink to &quot;DNS域名解析&quot;">​</a></h2><p>解析URL时，如果web服务器是域名，需要走DNS服务器进行域名解析，得到真实访问的IP地址。</p><h3 id="域名组成" tabindex="-1">域名组成 <a class="header-anchor" href="#域名组成" aria-label="Permalink to &quot;域名组成&quot;">​</a></h3><p><code>www.server.com.</code> 类似树状结构，越右等级越高。</p><p>域名组成都代表了DNS服务器，里面保存了域名和IP的对应关系。</p><p>域名服务器就像是一个树状结构。</p><ul><li>根 DNS 服务器（.）</li><li>顶级域 DNS 服务器（.com）</li><li>权威 DNS 服务器（server.com）</li></ul><p><img src="https://s2.loli.net/2025/07/17/N1KqfZbvLOxYBTz.png" alt="image.png" loading="lazy"></p><h3 id="域名解析的流程" tabindex="-1">域名解析的流程 <a class="header-anchor" href="#域名解析的流程" aria-label="Permalink to &quot;域名解析的流程&quot;">​</a></h3><p>域名解析的过程就是 <strong>只指路不带路，从顶级域一直向下找。</strong></p><p>www.server.com. 最后的 . 代表着根域。</p><blockquote><p>根域的服务器信息在所有的 DNS 服务器都存在，只要找到任意一台 DNS 服务器，都能找到根域，然后一路向下找。</p></blockquote><p><img src="https://s2.loli.net/2025/07/17/kdDrhucnYUZlGJq.png" alt="image.png" loading="lazy"></p><p>本地DNS域名服务器</p><p><img src="https://s2.loli.net/2025/07/17/N5LrD6ytaHmMpGe.png" alt="image.png" loading="lazy"></p><h2 id="协议栈" tabindex="-1">协议栈 <a class="header-anchor" href="#协议栈" aria-label="Permalink to &quot;协议栈&quot;">​</a></h2><p>获取真实IP地址之后，应用层通过调用Socket库，来委托协议栈工作。</p><p>协议栈包含传输层的 TCP 和 UDP 协议，还包含网络层的 IP 协议。</p><p><img src="https://s2.loli.net/2025/07/17/kcx7mfrtB9sg4iq.png" alt="image.png" loading="lazy"></p><h2 id="传输协议tcp" tabindex="-1">传输协议TCP <a class="header-anchor" href="#传输协议tcp" aria-label="Permalink to &quot;传输协议TCP&quot;">​</a></h2><p>像HTTP协议就是基于TCP协议进行传输的。</p><p>通过 TCP 的三次握手，服务端和客户端进行连接。</p><p>应用层的 HTTP报文和 TCP头部封装在一起，形成网络包发给网络层进行网络传输。</p><p><strong>TCP的功能</strong></p><ul><li>确认客户端和服务端的收发能力，确认收消息的服务端。</li><li>组装网络包，交给网络层发送数据。</li></ul><p><img src="https://s2.loli.net/2025/07/17/R5yVic4Wlg3uL2Y.png" alt="image.png" loading="lazy"></p><h2 id="远程定位ip" tabindex="-1">远程定位IP <a class="header-anchor" href="#远程定位ip" aria-label="Permalink to &quot;远程定位IP&quot;">​</a></h2><p>IP协议位于网络层，传输层的 TCP协议发送的数据，都需要委托给网络层的 IP 模块将数据包封装，并进行进一步处理传输。</p><h3 id="ip报文头部" tabindex="-1">IP报文头部 <a class="header-anchor" href="#ip报文头部" aria-label="Permalink to &quot;IP报文头部&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/17/lKI4cDA3YteifGX.png" alt="image.png" loading="lazy"></p><p>IP报文头部需要有源地址 IP 和目标地址 IP。</p><ul><li><p>源地址IP</p></li><li><p>目标地址IP</p><p>DNS域名解析得到的IP地址。</p></li><li><p>协议</p><p>由于HTTP是基于TCP的，IP报文头部的协议需要填 <code>06</code> (16进制），表示 TCP。</p></li></ul><h3 id="源地址ip确认" tabindex="-1">源地址IP确认 <a class="header-anchor" href="#源地址ip确认" aria-label="Permalink to &quot;源地址IP确认&quot;">​</a></h3><blockquote><p>假如客户端有多个网卡，就会有多个 IP 地址，那么如何选择源地址IP?</p></blockquote><p>可以根据路由表来确认由哪一个网卡发送请求，使用网卡IP地址作为源地址 IP。</p><h3 id="查看路由表" tabindex="-1">查看路由表 <a class="header-anchor" href="#查看路由表" aria-label="Permalink to &quot;查看路由表&quot;">​</a></h3><p><code>Plain Text route -n</code></p><p><img src="https://s2.loli.net/2025/07/17/YqODjZv5hJKcFQl.png" alt="image.png" loading="lazy"></p><p>通过路由表可以看到网卡的信息。</p><p>比如 eth0 和 eth1。</p><p>eth0 的网段是 192.168.3.0 , 子网掩码是 255.255.255.0。</p><p>其中第三条是默认网卡，网段 0.0.0.0，Gateway 对应 192.168.3.1，是<strong>路由器的地址。</strong></p><blockquote><p>在匹配不到网卡的时候，使用默认网卡，此时源地址IP 就是路由器地址。</p></blockquote><h3 id="匹配过程" tabindex="-1">匹配过程 <a class="header-anchor" href="#匹配过程" aria-label="Permalink to &quot;匹配过程&quot;">​</a></h3><ul><li>遍历路由表。 <ul><li>将目的端地址与子网掩码进行与运算（求网段）。</li><li>如果网段与网卡的网段一致，则源地址IP 使用该网卡的 IP。如果不匹配接着找下一个网卡。</li><li>如果目的端地址没有匹配到网卡，使用默认网卡，源地址IP 就是路由器IP。</li></ul></li></ul><p><img src="https://s2.loli.net/2025/07/17/iLEDmaWKjtUhTdJ.png" alt="image.png" loading="lazy"></p><h3 id="查看网卡的ip地址" tabindex="-1">查看网卡的IP地址 <a class="header-anchor" href="#查看网卡的ip地址" aria-label="Permalink to &quot;查看网卡的IP地址&quot;">​</a></h3><p><code>Plain Text ifconfig</code></p><p><img src="https://s2.loli.net/2025/07/17/j9tBhE86rSwev1W.png" alt="image.png" loading="lazy"></p><h3 id="网络层报文格式" tabindex="-1">网络层报文格式 <a class="header-anchor" href="#网络层报文格式" aria-label="Permalink to &quot;网络层报文格式&quot;">​</a></h3><p>在传输层发给网络层的 TCP 段基础上，加上 IP 头部。</p><p>保证确认目的端的IP地址。</p><p><img src="https://s2.loli.net/2025/07/17/Anx8YMXtQq5r2ZI.png" alt="image.png" loading="lazy"></p><h2 id="以太网传输mac" tabindex="-1">以太网传输MAC <a class="header-anchor" href="#以太网传输mac" aria-label="Permalink to &quot;以太网传输MAC&quot;">​</a></h2><p>数据通过网络层的 IP协议封装之后，确保了目的端地址。</p><p>通过网络层的 IP 寻址功能，能在互联网中找到对应的网络，但是访问的目标是属于一个局域网（以太网) ,而在以太网中要用 MAC 地址来标识机器。</p><h3 id="有了ip地址为什么还需要mac地址" tabindex="-1">有了IP地址为什么还需要MAC地址 <a class="header-anchor" href="#有了ip地址为什么还需要mac地址" aria-label="Permalink to &quot;有了IP地址为什么还需要MAC地址&quot;">​</a></h3><ul><li><p>IP地址在网络架构里面的网络层，主要是为了定位目的端所在位置。</p><p>IP 地址是会变动的，比如上网选择自动获取 IP地址，那么 IP地址就会发生变化。</p></li><li><p>MAC地址在网络接口层，每台设备都有自己的 MAC地址，是固定不变的。</p><p>两个设备之间需要通过 MAC 地址来确认身份。</p></li></ul><h3 id="mac头部" tabindex="-1">MAC头部 <a class="header-anchor" href="#mac头部" aria-label="Permalink to &quot;MAC头部&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/17/a25Zh1F7qsNAGtU.png" alt="image.png" loading="lazy"></p><ul><li>接收方和发送方MAC地址，保证两点传输。</li><li>协议类型 <ul><li>0800：IP协议</li><li>0806：ARP协议</li></ul></li></ul><h3 id="如何确认mac地址" tabindex="-1">如何确认MAC地址 <a class="header-anchor" href="#如何确认mac地址" aria-label="Permalink to &quot;如何确认MAC地址&quot;">​</a></h3><h3 id="发送方" tabindex="-1">发送方 <a class="header-anchor" href="#发送方" aria-label="Permalink to &quot;发送方&quot;">​</a></h3><p>MAC地址在网卡生产时就设置好了，发送方只需要读取出来，写入MAC头部就好。</p><h3 id="接收方" tabindex="-1">接收方 <a class="header-anchor" href="#接收方" aria-label="Permalink to &quot;接收方&quot;">​</a></h3><blockquote><p>在以太网中，只要告诉以太网对方的MAC地址，以太网就会帮我们把数据包发送过去。</p></blockquote><p>搞清楚要把包发给谁，通过查询路由表，找到匹配的路由。将包发给 Gateway 对应地址。</p><p><strong>ARP协议 - 广播形式</strong></p><p>ARP协议在以太网中，以广播的形式获取 接收方对应的 MAC地址。</p><p><img src="https://s2.loli.net/2025/07/17/uEmCDszJBSeUo9i.png" alt="image.png" loading="lazy"></p><p>ARP协议不需要每次都缓存获取，查询结果放到了 ARP 缓存中，不过缓存时间就几分钟。</p><p>在发包时，查询 ARP 缓存：</p><ul><li>包含 IP 对应的 MAC地址，使用缓存信息。</li><li>缓存不包含，使用 ARP 协议广播查询。</li></ul><h3 id="查看-arp-缓存内容" tabindex="-1">查看 ARP 缓存内容 <a class="header-anchor" href="#查看-arp-缓存内容" aria-label="Permalink to &quot;查看 ARP 缓存内容&quot;">​</a></h3><p><code>Plain Text arp -a</code></p><p><img src="https://s2.loli.net/2025/07/17/JNdeYLTqOVxwEuv.png" alt="image.png" loading="lazy"></p><h3 id="网络接口层报文格式" tabindex="-1">网络接口层报文格式 <a class="header-anchor" href="#网络接口层报文格式" aria-label="Permalink to &quot;网络接口层报文格式&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/07/17/IleyfBm9TMJSz6a.png" alt="image.png" loading="lazy"></p><h2 id="出口-网卡" tabindex="-1">出口-网卡 <a class="header-anchor" href="#出口-网卡" aria-label="Permalink to &quot;出口-网卡&quot;">​</a></h2><p>浏览器的 URL 经过HTTP、TCP、IP、MAC层层封装，形成网络包格式。</p><p>但是还只是存放在内存的二进制信息，要通过网络访问的远程主机，要走网线就要转换为电信号。</p><p><strong>负责执行电信号转换传输的部分是网卡，控制网卡还需要网卡驱动。</strong></p><h3 id="操作流程" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程" aria-label="Permalink to &quot;操作流程&quot;">​</a></h3><p>网卡拿到网络包之后，会将复制到网卡缓冲区，并且在开头和结尾进行封装。</p><p>最后将包转换为电信号，通过网线传输出去。</p><p><img src="https://s2.loli.net/2025/07/17/UYKOeDWM59yqas1.png" alt="image.png" loading="lazy"></p><ul><li><p>报头和起始帧分隔符</p><p>标识包起始位置的标记。</p></li><li><p>FCS - 帧校验序列</p><p>检查包传输过程是否损坏。</p></li></ul><h2 id="送别者-交换机" tabindex="-1">送别者-交换机 <a class="header-anchor" href="#送别者-交换机" aria-label="Permalink to &quot;送别者-交换机&quot;">​</a></h2><p><strong>交换机的设计目的是将网络包转发到目的地。交换机在MAC层（数据链路层）工作.</strong></p><p>在七层网络模型中，数据链路层是第二层，所以<strong>交换机称为二层网络设备。</strong></p><h3 id="交换机的包接受操作" tabindex="-1">交换机的包接受操作 <a class="header-anchor" href="#交换机的包接受操作" aria-label="Permalink to &quot;交换机的包接受操作&quot;">​</a></h3><p>网络包通过网卡发送电信号后，电信号通过网线接口，经交换机的模块进行接收。</p><p>然后<strong>交换机将电信号转换为数字信号</strong>。</p><p>通过网络包的 FSC 校验错误，如果没问题放入缓冲区。</p><h3 id="交换机和网卡的区别" tabindex="-1">交换机和网卡的区别 <a class="header-anchor" href="#交换机和网卡的区别" aria-label="Permalink to &quot;交换机和网卡的区别&quot;">​</a></h3><ul><li>交换机的端口没有MAC地址,而网卡有MAC地址. <ul><li>网卡收到网络包时, 根据网络包对应的接收方 MAC地址,来判断网络包是不是自己的.</li><li>交换机不会识别网络包,而是将所有网络包放到缓冲区.</li></ul></li></ul><h3 id="包转发" tabindex="-1">包转发 <a class="header-anchor" href="#包转发" aria-label="Permalink to &quot;包转发&quot;">​</a></h3><p>交换机通过接收模块将以太网下所有网络包都放到了缓冲区.</p><blockquote><p>在以太网中,每个设备有自己的MAC地址,连接在交换机上的时候,有自己的端口.</p></blockquote><p>接下来要判断网络包发往哪里.</p><p>通过判断接收方MAC地址和端口的匹配关系,也就是交换机-MAC地址表:</p><ul><li>设备的MAC地址.</li><li>设备连接在交换机哪个端口上.</li></ul><p><img src="https://s2.loli.net/2025/07/17/QspcIGlzn13NUJE.png" alt="image.png" loading="lazy"></p><p>对于网络包,交换机根据接收方MAC地址,从MAC地址表里面查,查到对应的端口,然后将信号发送到对应的端口上。</p><h3 id="当mac地址表找不到mac地址" tabindex="-1">当MAC地址表找不到MAC地址? <a class="header-anchor" href="#当mac地址表找不到mac地址" aria-label="Permalink to &quot;当MAC地址表找不到MAC地址?&quot;">​</a></h3><p>当找不到对应的MAC地址时,交换即就会将网络包发给每个端口.</p><p>虽然每个设备都会收到网络包,但是只有真正的接收者才会接收,其它都会忽略.</p><p>而且只要接收方成功接收网络包,向交换机返回响应包后,交换机就会将接收方的MAC地址写入MAC地址表.</p><h3 id="接收方广播" tabindex="-1">接收方广播 <a class="header-anchor" href="#接收方广播" aria-label="Permalink to &quot;接收方广播&quot;">​</a></h3><p>如果接收方的MAC地址是一个广播地址,就会向除了源端口以外的所有端口转发网络包.</p><p>以下两个属于广播地址：</p><ul><li>MAC 地址中的 <code>FF:FF:FF:FF:FF:FF</code></li><li>IP 地址中的 <code>255.255.255.255</code></li></ul><blockquote><p>一个HTTP请求,经过计算机的层层封装,经过网卡转换电信号,发给交换机.目前整个过程都是在局域网中. 主要通过MAC地址进行寻址. 交换机再转发给路由器,路由器就会进入互联网,通过IP寻址.</p></blockquote><h2 id="路由器" tabindex="-1">路由器 <a class="header-anchor" href="#路由器" aria-label="Permalink to &quot;路由器&quot;">​</a></h2><p>网络包经过交换机转发,到达路由器.并由路由器在互联网中转发,转发到下一个路由器或者目标设备.</p><h3 id="路由器和交换机的区别" tabindex="-1">路由器和交换机的区别 <a class="header-anchor" href="#路由器和交换机的区别" aria-label="Permalink to &quot;路由器和交换机的区别&quot;">​</a></h3><ul><li>交换机基于以太网(局域网)设计的,称为二层网络设备.交换机的端口不具有MAC地址.</li><li>路由器基于IP设计的,称为三层网络设备,路由器的各个端口都具有MAC地址和IP地址.</li></ul><h3 id="路由器原理" tabindex="-1">路由器原理 <a class="header-anchor" href="#路由器原理" aria-label="Permalink to &quot;路由器原理&quot;">​</a></h3><p>路由器的端口都具有MAC地址,这就表示它能够作为以太网的接收方和发送方.因为以太网就是基于MAC地址进行信息交互的.</p><p>而同时路由器还有iIP地址,保证在互联网中能通过IP地址进行交互.</p><h3 id="网络包交互" tabindex="-1">网络包交互 <a class="header-anchor" href="#网络包交互" aria-label="Permalink to &quot;网络包交互&quot;">​</a></h3><p>路由器端口会接受发给自己的以太网包,然后根据路由表查询转发目标,再经相应的端口作为发送方将以太网包发送出去.</p><h3 id="网络包接收过程" tabindex="-1">网络包接收过程 <a class="header-anchor" href="#网络包接收过程" aria-label="Permalink to &quot;网络包接收过程&quot;">​</a></h3><ul><li><p>电信号到达网线接口后,路由器的模块会将电信号转换为数字信号.通过末尾的FCS进行错误校验.</p></li><li><p>校验MAC地址</p><ul><li>检查网络包中接收方的MAC地址,如果是发给自己的包,则放到缓冲区,否则就会丢弃.</li><li>路由器的端口都具有MAC地址,只接受与自身匹配的包.</li></ul></li><li><p>去掉MAC头部</p><p>完成接收操作之后,去掉MAC头部.因为MAC头部的作用就是将包送到路由器,网络包中的MAC头部地址对应路由器端口的MAC地址.</p><p>接下来就不需要MAC头部了,需要的是MAC头部后方的IP头部,在互联网中进行包的转发操作.</p></li></ul><h3 id="查询路由表确认输出端口" tabindex="-1">查询路由表确认输出端口 <a class="header-anchor" href="#查询路由表确认输出端口" aria-label="Permalink to &quot;查询路由表确认输出端口&quot;">​</a></h3><ul><li><p>根据路由表判断转发目标</p><p><img src="https://s2.loli.net/2025/07/17/gTBkhwOlLGI4efx.png" alt="image.png" loading="lazy"></p></li><li><p>转发流程和网卡转发一致</p><p>判断接收方地址是否属于某个路由的网段,如果属于,则该路由就属于转发目标.</p><p>如果找不到路由,则使用默认路由,默认路由就作为转发目标</p></li></ul><h3 id="路由器的发送操作" tabindex="-1">路由器的发送操作 <a class="header-anchor" href="#路由器的发送操作" aria-label="Permalink to &quot;路由器的发送操作&quot;">​</a></h3><ol><li>根据路由表确认转发目标的路由.</li><li>根据路由确认归属路由器. <ul><li><p>如果路由的网关是一个IP地址,说明还没到达终点,还需要经过路由器继续转发到下一个网关路由器.</p><p>此时会将该路由网关地址作为接收方地址继续转发.</p></li><li><p>如果网关为空,则接收方的IP地址就是目标地址,说明找到了该网络包归属的路由器.</p></li></ul></li><li>找到路由器之后,通过ARP协议根据IP地址查询MAC地址,将查询结果作为接收方MAC地址.</li></ol><hr><h3 id="路由器的层层转发" tabindex="-1">路由器的层层转发 <a class="header-anchor" href="#路由器的层层转发" aria-label="Permalink to &quot;路由器的层层转发&quot;">​</a></h3><p>发送的网络包通过交换机到达下一个路由器.由于接收方的MAC地址就是下一个路由器的地址,经过层层转发,网络包最终到达目的地.</p><p><strong>在整个转发的过程中,源IP和目的IP始终不会变,一直变化的是MAC地址.</strong></p><blockquote><p>在发送数据包时，如果目标主机不是本地局域网，填入的 MAC 地址是路由器，也就是把数据包转发给路由器，路由器一直转发下一个路由器，直到转发到目标主机的路由器，发现目标 IP 地址是自己局域网内的主机，就会 ARP 请求获取目标主机的 MAC 地址，从而转发到这个服务器主机。</p></blockquote><p>比如在路由器查找路由时,有可能转发的还是路由器,此时接收方MAC地址为转发路由器的MAC地址.</p><p>在层层转发过程中,基本属于以下流程:</p><ul><li>通过路由器查找IP对应的路由.</li><li>路由网关不为空,说明有下层路由,将网关ip作为接收者ip,和该路由对应的MAC地址.作为接收者MAC地址,经路由器端口转发给交换机.</li><li>最终路由网关为空时,说明找到最终路由了.在该路由上根据ARP协议,找到IP地址对应的MAC地址.在通过交换机根据MAC地址转发网络包到对应设备.</li></ul><h2 id="服务端的数据处理" tabindex="-1">服务端的数据处理 <a class="header-anchor" href="#服务端的数据处理" aria-label="Permalink to &quot;服务端的数据处理&quot;">​</a></h2><p>在发送端,计算机会将HTTP请求层层封装.</p><p>而在接收端则要层层拆开,获取最初的网络报文.</p><p><img src="https://s2.loli.net/2025/07/17/gz2lk3UGACSyho6.png" alt="image.png" loading="lazy"></p><h3 id="识别网络包内容" tabindex="-1">识别网络包内容 <a class="header-anchor" href="#识别网络包内容" aria-label="Permalink to &quot;识别网络包内容&quot;">​</a></h3><ul><li>拆开MAC头部,判断是否和服务器MAC地址符合.</li><li>拆IP头部,确认IP地址是否符合,并且判断协议项,知道上层协议是TCP协议.</li><li>拆开TCP协议. <ul><li>根据TCP头部的序列号,判断是否是需要的网络包,如果是的话放入缓存,并且返回ACK确认标识.如果不是丢弃.</li><li>根据TCP头部的端口号,能找到对应的进程,将包发给HTTP进程.</li></ul></li><li>进程获取网络包后,根据HTTP数据发现访问的是一个页面,于是将网络页面封装在HTTP响应报文里面.</li></ul><h3 id="发送响应内容" tabindex="-1">发送响应内容 <a class="header-anchor" href="#发送响应内容" aria-label="Permalink to &quot;发送响应内容&quot;">​</a></h3><ul><li>HTTP进程将结果封装到HTTP响应报文.</li><li>依次封装TCP头部,不过这次源地址是服务端的IP地址,目的地址是客户端的IP地址.</li><li>封装IP头部.</li><li>封装MAC头部.</li><li>服务端将封装好的网络包从网卡转发给交换机,交换机转发给路由器,路由器层层转发到目的路由器.</li><li>目的路由器转发给交换机.交换机转发给客户端.</li><li>客户端收到服务端的响应网络包后,层层拆解.</li><li>最终获取到HTTP响应报文.</li><li>最后,客户端要断开连接,向服务端发起TCP四次挥手,至此双方连接断开.</li></ul>',154)]))}const P=l(p,[["render",o]]);export{u as __pageData,P as default};
