(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{391:function(e,t,a){"use strict";a.r(t);var c=a(40),l=Object(c.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"四种拒绝策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四种拒绝策略"}},[e._v("#")]),e._v(" 四种拒绝策略")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"直接抛出异常-abortpolicy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#直接抛出异常-abortpolicy"}},[e._v("#")]),e._v(" 直接抛出异常：AbortPolicy")]),e._v(" "),a("blockquote",[a("p",[e._v("默认的任务拒绝策略，对于新增任务，拒绝处理，直接抛出RejectedExecutionException异常。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public static class AbortPolicy implements RejectedExecutionHandler {\n    \n    public AbortPolicy() { }\n\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        //直接抛出异常\n        throw new RejectedExecutionException("Task " + r.toString() +\n                                             " rejected from " +\n                                             e.toString());\n    }\n}\n')])])]),a("h4",{attrs:{id:"调用当前线程-callerrunspolicy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用当前线程-callerrunspolicy"}},[e._v("#")]),e._v(" 调用当前线程：CallerRunsPolicy")]),e._v(" "),a("blockquote",[a("p",[e._v("调用自己的线程来执行任务，不创建新的线程，而是用自己当前线程进行执行，会降低对于新任务的提交速度，影响整体性能。如果程序能够容许延时，并且不能丢弃每一个任务，即可采取这个策略。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static class CallerRunsPolicy implements RejectedExecutionHandler {\n    public CallerRunsPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            //调用自己的线程执行\n            r.run();\n        }\n    }\n}\n")])])]),a("h4",{attrs:{id:"不做处理-discardpolicy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不做处理-discardpolicy"}},[e._v("#")]),e._v(" 不做处理： DiscardPolicy")]),e._v(" "),a("blockquote",[a("p",[e._v("不做任何处理，直接丢掉该任务.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static class DiscardPolicy implements RejectedExecutionHandler {\n   \n    public DiscardPolicy() { }\n\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n    }\n}\n")])])]),a("h4",{attrs:{id:"删除队列任务-discardoldestpolicy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除队列任务-discardoldestpolicy"}},[e._v("#")]),e._v(" 删除队列任务： DiscardOldestPolicy")]),e._v(" "),a("blockquote",[a("p",[e._v("删除任务队列中最早的任务，将新增任务添加到任务队列中。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static class DiscardOldestPolicy implements RejectedExecutionHandler {\n   \n    public DiscardOldestPolicy() { }\n\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            //删除线程池的任务队列的第一个元素\n            e.getQueue().poll();\n            e.execute(r);\n        }\n    }\n}\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);