(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{429:function(t,a,_){"use strict";_.r(a);var r=_(26),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"java-内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型"}},[t._v("#")]),t._v(" Java 内存模型")]),t._v(" "),_("p",[t._v("Java 内存模型在 JDK1.7 主要包含以下区域。")]),t._v(" "),_("ul",[_("li",[t._v("程序计数器")]),t._v(" "),_("li",[t._v("虚拟机栈")]),t._v(" "),_("li",[t._v("本地方法栈")]),t._v(" "),_("li",[t._v("方法区")]),t._v(" "),_("li",[t._v("堆")])]),t._v(" "),_("p",[t._v("而在JDK1.8中将运行时数据区中的方法区给取消，换成了元数据区放到了直接内存里。")]),t._v(" "),_("ul",[_("li",[t._v("程序计数器")]),t._v(" "),_("li",[t._v("虚拟机栈")]),t._v(" "),_("li",[t._v("本地方法栈")]),t._v(" "),_("li",[t._v("堆")]),t._v(" "),_("li",[t._v("元数据区")])]),t._v(" "),_("h2",{attrs:{id:"内存模型图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存模型图"}},[t._v("#")]),t._v(" 内存模型图")]),t._v(" "),_("ol",[_("li",[t._v("JDK 1.7 内存模型图")])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlbertYang0801/pic-bed@main/img/20210611155359.png",alt:""}})]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[t._v("JDK 1.8 内存模型图")]),t._v(" "),_("p",[t._v("JDK1.8中取消了运行时数据区中的方法区，换成了元数据区放到了直接内存里。")])])]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AlbertYang0801/pic-bed@main/img/20210611160927.png",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"运行时数据区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区"}},[t._v("#")]),t._v(" 运行时数据区")]),t._v(" "),_("h3",{attrs:{id:"_1、程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、程序计数器"}},[t._v("#")]),t._v(" 1、程序计数器")]),t._v(" "),_("p",[t._v("程序计数器是是线程私有的，各个线程之间互不影响。保存的是程序执行到的指令地址。")]),t._v(" "),_("ul",[_("li",[t._v("如果线程执行的是非 native 方法，则程序计数器保存的是当前需要执行的指令地址。")]),t._v(" "),_("li",[t._v("如果线程执行的是 native 方法，则程序计数器中的值是 undefined。")])]),t._v(" "),_("p",[t._v("由于程序计数器保存的数据占用空间不会随程序执行而改变，因为程序计数器是内存区域中没有规定 OutOfMemoryError 情况的区域。")]),t._v(" "),_("h3",{attrs:{id:"_2、本地方法栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、本地方法栈"}},[t._v("#")]),t._v(" 2、本地方法栈")]),t._v(" "),_("h3",{attrs:{id:"_3、虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、虚拟机栈"}},[t._v("#")]),t._v(" 3、虚拟机栈")]),t._v(" "),_("h3",{attrs:{id:"_4、堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、堆"}},[t._v("#")]),t._v(" 4、堆")]),t._v(" "),_("h3",{attrs:{id:"_5、方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、方法区"}},[t._v("#")]),t._v(" 5、方法区")]),t._v(" "),_("h3",{attrs:{id:"_6、运行时常量池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6、运行时常量池"}},[t._v("#")]),t._v(" 6、运行时常量池")]),t._v(" "),_("h3",{attrs:{id:"_7、直接内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7、直接内存"}},[t._v("#")]),t._v(" 7、直接内存")]),t._v(" "),_("h2",{attrs:{id:"参考链接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6844903909983535111#heading-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java内存管理-JVM内存模型以及JDK7和JDK8内存模型对比总结（三）"),_("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);