(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{468:function(t,a,s){"use strict";s.r(a);var _=s(18),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"对象创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象创建"}},[t._v("#")]),t._v(" 对象创建")]),t._v(" "),a("h2",{attrs:{id:"对象的创建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的创建流程"}},[t._v("#")]),t._v(" 对象的创建流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s2.loli.net/2025/05/29/vo6SudDje4VEkWC.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"类加载检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载检查"}},[t._v("#")]),t._v(" 类加载检查")]),t._v(" "),a("p",[t._v("判断有无加载过该类，有则直接进入下一步、没有则加载类对象。")]),t._v(" "),a("h3",{attrs:{id:"分配内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配内存"}},[t._v("#")]),t._v(" 分配内存")]),t._v(" "),a("p",[t._v("虚拟机为新生对象分配内存。")]),t._v(" "),a("p",[t._v("对象所需内存大小在类检查阶段便可确定，为对象分配空间就是将一块确定大小内存从 Java 堆中划分出来。")]),t._v(" "),a("h3",{attrs:{id:"_1-划分内存的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-划分内存的方法"}},[t._v("#")]),t._v(" 1. 划分内存的方法")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("指针碰撞法")])]),t._v(" "),a("p",[a("strong",[t._v("该方法是JVM中的默认方法。")])]),t._v(" "),a("p",[t._v("它主要就是假设JVM中的内存是绝对规整的，使用过的内存和未使用过的内存分别放在两边，用一个指针来给他们做区分。如果要分配内存，只需要将指针向空闲的那一端移动对象大小的位置就好了。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("空闲列表")])]),t._v(" "),a("p",[t._v("如果JAVA堆中的内存分配并不是规整的，那么就需要一张"),a("strong",[t._v("表来记录某些还未分配的内存大小")]),t._v("，当需要进行内存分配的时候从表中找到足够大小的内存区域来完成分配，并更新列表上的区域。")])])]),t._v(" "),a("h3",{attrs:{id:"_2-解决并发问题的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决并发问题的方法"}},[t._v("#")]),t._v(" 2. 解决并发问题的方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在并发情况下，可能出现多个对象引用同一块内存地址的问题。")])]),t._v(" "),a("li",[a("p",[t._v("CAS")]),t._v(" "),a("p",[t._v("虚拟机默认使用 "),a("strong",[t._v("CAS 配上重试失败")]),t._v("的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理。")])]),t._v(" "),a("li",[a("p",[t._v("本地线程分配缓冲（TLAB)")]),t._v(" "),a("p",[t._v("每个线程在堆上分配一块区域，将内存分配按照不同的线程进行。")])])]),t._v(" "),a("h3",{attrs:{id:"初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),a("p",[t._v("分配完成之后虚拟机需要将分配完成的对象空间都初始化为零值（不包括对象头）。")]),t._v(" "),a("h3",{attrs:{id:"设置对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置对象头"}},[t._v("#")]),t._v(" 设置对象头")]),t._v(" "),a("p",[t._v("初始化零值之后、虚拟机要对对象做一些必要的设置，这些设置是用来帮助虚拟机管理这个对象的。")]),t._v(" "),a("h3",{attrs:{id:"执行init方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行init方法"}},[t._v("#")]),t._v(" 执行init方法")]),t._v(" "),a("p",[t._v("对象按照程序员的意愿进行初始化，也就是给属性赋值（代码中的值）并执行构造方法。")]),t._v(" "),a("h2",{attrs:{id:"堆内存中的对象实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆内存中的对象实例"}},[t._v("#")]),t._v(" 堆内存中的对象实例")]),t._v(" "),a("h3",{attrs:{id:"对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象头"}},[t._v("#")]),t._v(" 对象头")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("存储对象自身的运行时数据。")]),t._v(" "),a("p",[t._v("哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tc-cdn.flowus.cn/oss/04058f37-a074-411e-80c8-25bbe139e5b8/image.png?time=1748506500&token=8af73dd158bcbaeaab8fc99db6fe01c6bb66d48b096fb22fd150c069eeb05bf4&role=free",alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("存储类型指针。")]),t._v(" "),a("p",[t._v("即"),a("strong",[t._v("对象指向它的类元数据的指针")]),t._v("，虚拟机通过这个指针来"),a("strong",[t._v("确定这个对象是哪个类的实例。")])])])]),t._v(" "),a("h3",{attrs:{id:"实例数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例数据"}},[t._v("#")]),t._v(" 实例数据")]),t._v(" "),a("p",[t._v("具体的实例对象数据。")]),t._v(" "),a("h3",{attrs:{id:"对齐填充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对齐填充"}},[t._v("#")]),t._v(" 对齐填充")]),t._v(" "),a("p",[t._v("保证对象是 8 个字节的整数倍。")]),t._v(" "),a("h2",{attrs:{id:"对象指针压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象指针压缩"}},[t._v("#")]),t._v(" 对象指针压缩")]),t._v(" "),a("h3",{attrs:{id:"减少内存消耗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少内存消耗"}},[t._v("#")]),t._v(" "),a("strong",[t._v("减少内存消耗")])]),t._v(" "),a("p",[t._v("指针压缩可以减少每一个堆对象的大小，让同样的内存大小可以放更多的对象，这样就会使得内存存储的数据更多的情况下才会触发GC。（指针压缩在JDK1.6之后是默认开启的）")])])}),[],!1,null,null,null);a.default=v.exports}}]);