(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{454:function(t,l,s){"use strict";s.r(l);var e=s(18),_=Object(e.a)({},(function(){var t=this,l=t._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"io多路复用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用"}},[t._v("#")]),t._v(" IO多路复用")]),t._v(" "),l("p",[l("a",{attrs:{href:"https://www.bilibili.com/video/BV1r54y1f7bU/?spm_id_from=333.337.search-card.all.click&vd_source=e98aef20b1bd281c1b564fb64680bdbc",target:"_blank",rel:"noopener noreferrer"}},[t._v("小白也看得懂的 I/O 多路复用解析（超详细案例）_哔哩哔哩_bilibili"),l("OutboundLink")],1)]),t._v(" "),l("h2",{attrs:{id:"基础概念"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基础概念"}},[t._v("#")]),t._v(" 基础概念")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/ZFcCgP9ytOh4mTi.png",alt:""}})]),t._v(" "),l("ol",[l("li",[l("p",[t._v("Socket")]),t._v(" "),l("p",[t._v("套接字，在网络通信中，就是客户端和服务端的出入口。")]),t._v(" "),l("blockquote",[l("p",[t._v("套接字看作不同主机间的进程进行双间通信的端点。是计算机之间进行通信的一种约定或一种方式，用于描述IP地址和端口。")])])]),t._v(" "),l("li",[l("p",[t._v("fd")]),t._v(" "),l("p",[t._v("文件描述符，是指向资源文件的索引。")])])]),t._v(" "),l("h3",{attrs:{id:"socket通讯的过程"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#socket通讯的过程"}},[t._v("#")]),t._v(" Socket通讯的过程")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/qsfa1ncBJWr47Xw.png",alt:""}})]),t._v(" "),l("ol",[l("li",[t._v("服务端通过 bind 绑定机器的端口号， 进程 listen 某个端口。")]),t._v(" "),l("li",[t._v("客户端和服务端通过 tcp 三次握手建联。")]),t._v(" "),l("li",[t._v("进行数据交互，")]),t._v(" "),l("li",[t._v("最后通过 close 断开连接。")])]),t._v(" "),l("h2",{attrs:{id:"io模型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#io模型"}},[t._v("#")]),t._v(" IO模型")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/inahdX3PRfgQBT7.png",alt:""}})]),t._v(" "),l("h3",{attrs:{id:"同步阻塞io-bio"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#同步阻塞io-bio"}},[t._v("#")]),t._v(" 同步阻塞IO - BIO")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("单线程")]),t._v(" "),l("p",[t._v("单线程情况下，Socket 会阻塞其它 Socket，直到 当前 Socket 结束。")])]),t._v(" "),l("li",[l("p",[t._v("多线程")]),t._v(" "),l("p",[t._v("多线程情况下，假如每个客户端分一个线程，容易造成资源浪费。")]),t._v(" "),l("p",[t._v("比如不同时刻就绪的四个 Scoket，原本一个线程就能执行完。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/qGUzi3YOZyQJ92p.png",alt:""}})])])]),t._v(" "),l("h3",{attrs:{id:"同步非阻塞io-nio"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#同步非阻塞io-nio"}},[t._v("#")]),t._v(" 同步非阻塞IO - NIO")]),t._v(" "),l("blockquote",[l("p",[t._v("阻塞 IO 在处理多个 Scoket 时，如果当前 Socket 无数据发送，会一直等待。")])]),t._v(" "),l("p",[t._v("而非阻塞 IO 就是操作系统为了解决阻塞问题做出的优化。")]),t._v(" "),l("hr"),t._v(" "),l("p",[t._v("非阻塞 IO 在处理多个 Socket 时，如果当前 Socket 无数据到达，会继续检查下一个 Socket。"),l("strong",[t._v("不会阻塞在当前 Socket")]),t._v("。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/WJK8qzUoHr7Qjap.png",alt:""}})]),t._v(" "),l("p",[t._v("当前 Socket 数据到达之后，进行数据交互。")]),t._v(" "),l("blockquote",[l("p",[t._v("数据处理也可以采用异步方式，即开启一个新线程去处理该 Socket 请求。主线程继续判断其它 Socket。")])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Trnk7xXsRIKw2CU.png",alt:""}})]),t._v(" "),l("h3",{attrs:{id:"优缺点"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("优点")]),t._v(" "),l("p",[t._v("解决了Socket 阻塞问题。")])]),t._v(" "),l("li",[l("p",[t._v("缺点")]),t._v(" "),l("p",[t._v("需要不停的轮询，过程中的系统调用、用户态和系统态的切换都是不小的开销。")]),t._v(" "),l("blockquote",[l("p",[t._v("read 函数 从用户态将 fd 拷贝到内核态。")])])])]),t._v(" "),l("h2",{attrs:{id:"io多路复用-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#io多路复用-2"}},[t._v("#")]),t._v(" IO多路复用")]),t._v(" "),l("p",[t._v("多路复用就是使用"),l("code",[t._v("一个或一组线程（线程池）处理多个TCP连接")]),t._v("。")]),t._v(" "),l("ul",[l("li",[t._v("select/poll/epoll 核心是可以同时处理多个connection，而不是更快，所以连接数不高的话，性能不一定比多线程+阻塞IO 好。")])]),t._v(" "),l("h3",{attrs:{id:"select"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[t._v("#")]),t._v(" select")]),t._v(" "),l("p",[t._v("为了解决用户态和内核态的频繁切换，select 函数将 fd 整体拷贝到内核态，在内核态进行轮询。")]),t._v(" "),l("p",[t._v("而轮询过程select 函数是阻塞的，直到以下条件达成。")]),t._v(" "),l("ol",[l("li",[t._v("有监测事件发生，此时select函数返回大于0的值。")]),t._v(" "),l("li",[t._v("超时，此时select函数返回0。")]),t._v(" "),l("li",[t._v("select函数发生错误，此时返回-1。")])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/VU852b9NovWFqth.png",alt:""}})]),t._v(" "),l("p",[t._v("使用 fd_set 表示监听的文件 fd。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/sfCeluJjg9WpxQi.png",alt:""}})]),t._v(" "),l("p",[l("strong",[t._v("fd_set")])]),t._v(" "),l("ul",[l("li",[l("p",[t._v("入参")]),t._v(" "),l("p",[t._v("指定需要监听的 fd，数据长度限制了监听的 fd 个数。")])]),t._v(" "),l("li",[l("p",[t._v("出参")]),t._v(" "),l("p",[t._v("直接修改指定位上的值，表示该位代表的 fd 是否就绪。")])])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Y7tedJvkwg5b4xz.png",alt:""}})]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Oyqxw4SrIGgmNs8.png",alt:""}})]),t._v(" "),l("blockquote",[l("p",[t._v("核心就是将事件就绪检查逻辑整体放到内核态，减少系统调用。")])]),t._v(" "),l("p",[t._v("检查完成之后返回就绪的事件数量，但是没有返回是哪个 fd。")]),t._v(" "),l("p",[t._v("使用select函数进行 IO 请求和 同步阻塞模型 没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。")]),t._v(" "),l("p",[t._v("但是，使用select以后最大的优势是用户可以"),l("strong",[t._v("在一个线程内同时处理多个socket的IO请求")]),t._v("。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可"),l("strong",[t._v("达到在同一个线程内同时处理多个IO请求的目的")]),t._v("。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。")]),t._v(" "),l("p",[l("strong",[t._v("缺点")])]),t._v(" "),l("ul",[l("li",[l("p",[t._v("不知道具体哪个 fd 就绪，需要遍历。")])]),t._v(" "),l("li",[l("p",[t._v("单进程监听的 fd 有限制，默认 1024。")]),t._v(" "),l("p",[t._v("这里的限制跟入参fd_set 的长度有关系（默认 1024）")])]),t._v(" "),l("li",[l("p",[t._v("入参的 fd_set 每次调用都被重置。")]),t._v(" "),l("p",[t._v("使用位图作为数据结构，出参是在入参基础上修改的。所以每次调用都需要重置 fd_set。")])])]),t._v(" "),l("h3",{attrs:{id:"poll"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[t._v("#")]),t._v(" poll")]),t._v(" "),l("p",[t._v("由于 select 的 fd_set 带来的缺点，poll 针对缺点进行了优化。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/VdU9JE1t7MHipZB.png",alt:""}})]),t._v(" "),l("p",[t._v("入参取消 fd_set，改为可以复用的 pollfd。")]),t._v(" "),l("blockquote",[l("p",[t._v("可以看到 pollfd 里面包含了fd、监听的事件和就绪的事件，这样再重复调用的时候就不需要重置参数。")])]),t._v(" "),l("p",[t._v("而且 pollfd 作为集合，拷贝到内核态之后是"),l("code",[t._v("链表")]),t._v("形式，所以是没有长度限制的。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/rH2zRcsV6YkOx5d.png",alt:""}})]),t._v(" "),l("p",[l("code",[t._v("poll 和 select整体对比，其实就是改变了入参，避免了 fd 限制和重置问题。")])]),t._v(" "),l("p",[t._v("但是 poll 还是遗留了两个问题。")]),t._v(" "),l("ul",[l("li",[t._v("每次需要将 fd 从用户态拷贝到内核态。")]),t._v(" "),l("li",[t._v("检测成功后不知道具体就绪的 fd，需要遍历全部的 fd。")])]),t._v(" "),l("h3",{attrs:{id:"epoll"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[t._v("#")]),t._v(" epoll")]),t._v(" "),l("p",[t._v("epoll 就是针对 select 和 poll 的优化，解决 poll 遗留的两个问题。")]),t._v(" "),l("p",[t._v("通过 红黑树 + 链表 + 回调函数解决。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/eZFLQ4fiDGndmYH.png",alt:""}})]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/OhbymDL8VIKcHsr.png",alt:""}})]),t._v(" "),l("h3",{attrs:{id:"epoll-create"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll-create"}},[t._v("#")]),t._v(" epoll_create")]),t._v(" "),l("p",[t._v("当进程调用 "),l("code",[t._v("epoll_create")]),t._v("时候，内核会创建 "),l("code",[t._v("eventpoll")]),t._v("结构体。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/c5EaZVeRKM79Nur.png",alt:"image-20250529185122163"}})]),t._v(" "),l("ul",[l("li",[l("p",[t._v("eventpoll")]),t._v(" "),l("p",[t._v("每个epoll实例有自己的 eventpoll 实例。")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("rbr")]),t._v(" "),l("p",[t._v("红黑树，保存需要监控的 fd。")])]),t._v(" "),l("li",[l("p",[t._v("rdlist")]),t._v(" "),l("p",[t._v("双向链表，存放就绪的 fd。")])])]),t._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("struct eventpoll{\n....\n/*红黑树的根节点，这颗树中存储着所有添加到epoll中的需要监控的事件*/\nstruct rb_root rbr;            //红黑树的根节点\n/*双链表中则存放着将要通过epoll_wait返回给用户的满足条件的事件*/\nstruct list_head rdlist;     //双向列表的头结点\n....\n};\n\n")])]),t._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[t._v("1")]),l("br"),l("span",{staticClass:"line-number"},[t._v("2")]),l("br"),l("span",{staticClass:"line-number"},[t._v("3")]),l("br"),l("span",{staticClass:"line-number"},[t._v("4")]),l("br"),l("span",{staticClass:"line-number"},[t._v("5")]),l("br"),l("span",{staticClass:"line-number"},[t._v("6")]),l("br"),l("span",{staticClass:"line-number"},[t._v("7")]),l("br"),l("span",{staticClass:"line-number"},[t._v("8")]),l("br"),l("span",{staticClass:"line-number"},[t._v("9")]),l("br")])])])]),t._v(" "),l("h3",{attrs:{id:"epoll-ctl"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll-ctl"}},[t._v("#")]),t._v(" epoll_ctl")]),t._v(" "),l("p",[t._v("将需要监听的文件描述符进行注册，内核会为这次动作构建一个红黑树的节点，并插入到红黑树中；")]),t._v(" "),l("p",[t._v("将需要监听的 fd 进行注册，生成 epitem 并添加到 rbr（红黑树）中。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/ufkpwWAtgbY7NU4.png",alt:"image-20250529185057235"}})]),t._v(" "),l("div",{staticClass:"language- line-numbers-mode"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("struct epitem{\n\n  struct rb_node rbn;//红黑树节点\n  struct list_head rdllink;//双向链表节点\n  struct eventpoll *ep; //指向其所属的eventpoll对象\n\n  pwqlist; //回调函数\n\n}\n\n")])]),t._v(" "),l("div",{staticClass:"line-numbers-wrapper"},[l("span",{staticClass:"line-number"},[t._v("1")]),l("br"),l("span",{staticClass:"line-number"},[t._v("2")]),l("br"),l("span",{staticClass:"line-number"},[t._v("3")]),l("br"),l("span",{staticClass:"line-number"},[t._v("4")]),l("br"),l("span",{staticClass:"line-number"},[t._v("5")]),l("br"),l("span",{staticClass:"line-number"},[t._v("6")]),l("br"),l("span",{staticClass:"line-number"},[t._v("7")]),l("br"),l("span",{staticClass:"line-number"},[t._v("8")]),l("br"),l("span",{staticClass:"line-number"},[t._v("9")]),l("br"),l("span",{staticClass:"line-number"},[t._v("10")]),l("br")])]),l("p",[t._v("将 fd 写入到 rbr 之后，"),l("strong",[t._v("内核会为 epitem 设置回调函数")]),t._v("。")]),t._v(" "),l("blockquote",[l("p",[t._v("内核会为这个 fd 与网卡驱动程序建立回调关系，当事件就绪时，会调用已经建立好的回调方法。这个回调方法会将发生的事件添加到就绪链表中；")])]),t._v(" "),l("p",[t._v("通过客户端发来的数据包通过网卡驱动找到对应的 epitem，然后进行操作。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/6Upnt482fNASsMG.png",alt:"image-20250529185046741"}})]),t._v(" "),l("h3",{attrs:{id:"epoll-wait"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll-wait"}},[t._v("#")]),t._v(" epoll_wait")]),t._v(" "),l("p",[t._v("epoll_wait 会检查就绪列表里的事件。")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("就绪列表不为空")]),t._v(" "),l("p",[l("strong",[t._v("有就绪事件，将事件拷贝到用户态进行处理。")])])]),t._v(" "),l("li",[l("p",[t._v("就绪列表为空")]),t._v(" "),l("p",[t._v("将 epoll 进程放到 eventpoll （epoll 实例）的等待队列中，让出 CPU\n。（等待 epitem 对应的回调函数唤醒）")])])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/yAZwCvEm5Y1rqkN.png",alt:""}})]),t._v(" "),l("p",[t._v("通过客户端发来的数据找到对应的 epitem 之后，执行 epitem 的回调函数。执行过程会唤醒 eventpoll 等待队列中的epoll 进程，然后 添加到就绪队列。最后 epoll_wait获取就绪事件。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/FkAfNbrxORjmwHK.png",alt:""}})]),t._v(" "),l("p",[l("code",[t._v("在高并发场景下，epoll_wait 检查就绪队列，就绪事件会很多并且非常快。")])]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/2fdvV7qPSBGDeRU.png",alt:""}})]),t._v(" "),l("ul",[l("li",[t._v("避免了每次都需要将 fd 从用户态拷贝到内核态，epoll 只需要在注册事件的时候拷贝一次。")]),t._v(" "),l("li",[t._v("不需要遍历所有 fd来找到就绪 fd，通过 epoll_wait 检查就绪队列可以直接找到就绪的 fd。")])]),t._v(" "),l("h3",{attrs:{id:"epoll的工作方式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#epoll的工作方式"}},[t._v("#")]),t._v(" epoll的工作方式")]),t._v(" "),l("ul",[l("li",[l("p",[t._v("水平触发（LT）")]),t._v(" "),l("p",[l("strong",[t._v("LT 是 epoll 默认的通知方式。")])]),t._v(" "),l("p",[t._v("epoll_wait 检测到事件就绪后，后续的 epoll_wait 继续检测到该事件后，该事件未完成，会继续发通知。")]),t._v(" "),l("p",[t._v("这样 epoll_wait 的通知次数会增多，性能比 ET 低，但是更可靠。")])]),t._v(" "),l("li",[l("p",[t._v("边缘触发（ET）")]),t._v(" "),l("p",[t._v("ET 是只在第一次监测到时间的时候通知，之后不再通知。epoll_wait 通知次数少，性能更高。")]),t._v(" "),l("p",[l("img",{attrs:{src:"https://s2.loli.net/2025/05/29/uwsWq8tyal9XAdp.png",alt:""}})])])])])}),[],!1,null,null,null);l.default=_.exports}}]);