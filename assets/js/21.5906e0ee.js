(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{385:function(a,t,e){"use strict";e.r(t);var s=e(40),n=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"同步代码块和同步方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步代码块和同步方法"}},[a._v("#")]),a._v(" 同步代码块和同步方法")]),a._v(" "),e("h3",{attrs:{id:"同步代码块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步代码块"}},[a._v("#")]),a._v(" 同步代码块")]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("重点是保证多个线程的锁对象是一致的。")])]),a._v(" "),e("ul",[e("li",[a._v("this作为锁对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//this的锁对象指当前类的实例\nsynchronized (this) {\n    i++;\n}\n")])])]),e("ul",[e("li",[a._v("当前类作为锁对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//使用当前类作为锁对象\nsynchronized (SynchrodizedCodebolck.class) {\n    x++;\n}\n")])])]),e("ul",[e("li",[a._v("不变对象作为锁对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("static final Object OBJECT = new Object();\n//正确使用对象作为锁\nsynchronized (OBJECT) {\n    n++;\n}\n")])])]),e("p",[a._v("参考："),e("a",{attrs:{href:"src/main/java/com/albert/concurrent/synchronizedprac/SynchrodizedCodebolck.java"}},[a._v("synchronized同步代码块的练习")])]),a._v(" "),e("h3",{attrs:{id:"同步方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步方法"}},[a._v("#")]),a._v(" 同步方法")]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("synchronized加在普通方法上或者静态方法上，可实现同步方法。")])]),a._v(" "),e("ul",[e("li",[a._v("同步普通方法")])]),a._v(" "),e("blockquote",[e("p",[a._v("普通同步方法，锁对象为当前类的实例对象等同于this。")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("    public synchronized void increaseI() {\n        i++;\n    }\n    等价于\n    public void increase() {\n        synchronized (this) {\n            i++;\n        }\n    }\n")])])]),e("ul",[e("li",[a._v("同步静态方法")])]),a._v(" "),e("blockquote",[e("p",[a._v("静态同步方法，锁对象为当前类对象")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("    private synchronized static void increaseM() {\n        m++;\n    }\n    等价于\n    private static void increase() {\n        synchronized (NumberOperatingStatic.class) {\n            m++;\n        }\n    }\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);