(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{457:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"reactor模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reactor模式"}},[t._v("#")]),t._v(" Reactor模式")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.jianshu.com/p/188ef8462100",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reactor模式详解＋源码实现"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("整个 reactor 模式解决的主要问题就是在接收到任务后根据分发器快速进行分发给相应的事件处理器，不需要从"),s("strong",[t._v("开始状态就阻塞")]),t._v("。")]),t._v(" "),s("p",[t._v("基于事件驱动模型，当接收到请求后会"),s("strong",[t._v("将请求封装成事件")]),t._v("，并将"),s("strong",[t._v("事件分发给相应处理事件的Handler")]),t._v("，handler处理完成后将事件状态修改为下一个状态，再由Reactor将事件分发给能够处理下一个状态的handler进行处理。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Tut6MdNnG7Zlz8i.png",alt:""}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("EventHandler：事件处理器，可以根据事件的不同状态创建处理不同状态的处理器；")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 事件处理\n     * @param event\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),t._v(" event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("ul",[s("li",[t._v("ReadEventHandler")]),t._v(" "),s("li",[t._v("AcceptEventHandler")])])]),t._v(" "),s("li",[s("p",[t._v("Handle：可以理解为事件，在网络编程中就是一个Socket，在数据库操作中就是一个DBConnection；")]),t._v(" "),s("ul",[s("li",[t._v("Event")])])]),t._v(" "),s("li",[s("p",[t._v("InitiationDispatcher：用于管理EventHandler，分发event的容器，也是一个事件处理调度器，Tomcat 的 Dispatcher 就是一个很好的实现，用于接收到网络请求后进行第一步的任务分发，分发给相应的处理器去异步处理，来保证吞吐量；")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handlerEvents")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadUtil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步非阻塞")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程池异步提交")]),t._v("\n        executorService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从 selector 中阻塞获取数据")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" events "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" selector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Event")]),t._v(" event "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" events"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//分发处理")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventHandler")]),t._v(" eventHandler "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" eventHandlerMap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOrDefault")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getEventType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Objects")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eventHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//处理事件")]),t._v("\n                eventHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])])]),t._v(" "),s("li",[s("p",[t._v("Demultiplexer：阻塞等待一系列的 Handle 中的事件到来，如果阻塞等待返回，即表示在返回的 Handle 中可以不阻塞的执行返回的事件类型。这个模块一般使用操作系统的select来实现。在 Java NIO 中用 Selector 来封装，当 "),s("code",[t._v("Selector.select()")]),t._v(" 返回时，可以调用 Selector的 "),s("code",[t._v("selectedKeys()")]),t._v(" 方法获取 "),s("code",[t._v("Set<SelectionKey>")]),t._v("，一个SelectionKey 表达一个有事件发生的 Channel 以及该 Channel 上的事件类型。")])])]),t._v(" "),s("p",[s("strong",[t._v("源码")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://gitee.com/zztiyjw/JavaAdvance/tree/master/moudle-netty/netty-practice",target:"_blank",rel:"noopener noreferrer"}},[t._v("Albert.Yang/JavaAdvance"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"单线程reactor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单线程reactor"}},[t._v("#")]),t._v(" 单线程Reactor")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/NP3aIjnBZrl62Fc.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("Reactor是一个线程对象，它会开始事件循环，内部使用 Selector（JDK内部使用epoll） 实现 IO多路复用。")]),t._v(" "),s("li",[t._v("Dispatch事件分发器，负责 event 分发以及 eventHandler 的维护。")]),t._v(" "),s("li",[t._v("注册AcceptorEventHandler处理器到Reactor，负责处理Accept类型事件。")]),t._v(" "),s("li",[t._v("READ、WRITE有自己的事件处理器。")])]),t._v(" "),s("blockquote",[s("p",[t._v("这里的单线程指的是IO操作都在一个线程上，比如accept、wirte、read、connect等操作。")])]),t._v(" "),s("h3",{attrs:{id:"工作者线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作者线程池"}},[t._v("#")]),t._v(" 工作者线程池")]),t._v(" "),s("p",[t._v("将非IO操作放到线程池。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/MiDOgCkPHtKNZBG.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"多线程主从reactor模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程主从reactor模式"}},[t._v("#")]),t._v(" 多线程主从Reactor模式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/8uWltxMVkL47T92.png",alt:""}})]),t._v(" "),s("ul",[s("li",[t._v("mainReactor：由主线程接收客户端连接请求。")]),t._v(" "),s("li",[t._v("subReactor：连接建立之后将通信转给subReactor。")]),t._v(" "),s("li",[t._v("ThreadPool：非IO操作还是放到线程池。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);