(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{392:function(a,s,e){"use strict";e.r(s);var t=e(18),n=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"编解码器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编解码器"}},[a._v("#")]),a._v(" 编解码器")]),a._v(" "),s("p",[a._v("在网络传输中，数据是通过字节流传输。")]),a._v(" "),s("p",[a._v("对应到客户端和服务端需要进行对应的编码和解码。")]),a._v(" "),s("h2",{attrs:{id:"解码器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解码器"}},[a._v("#")]),a._v(" 解码器")]),a._v(" "),s("ul",[s("li",[a._v("将字节解码为消息：ByteToMessageDecoder")]),a._v(" "),s("li",[a._v("将一种消息类型解码为另一种：MessageToMessageDecoder。")])]),a._v(" "),s("blockquote",[s("p",[a._v("解码器是负责将入站数据从一种格式转换到另一种格式的，所以 Netty 的解码器实现了 ChannelInboundHandler。")])]),a._v(" "),s("h3",{attrs:{id:"异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[a._v("#")]),a._v(" 异常处理")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("TooLongFrameException")]),a._v(" "),s("p",[a._v("由于 Netty 是一个异步框架，所以需要在字节可以解码之前在内存中缓冲它们。因此，不能让解码器缓冲大量的数据以至于耗尽可用的内存。为了解除这个常见的顾虑，Netty 提供了 TooLongFrameException 类，其将由解码器在帧超出指定的大小限制时抛出。")])])]),a._v(" "),s("h2",{attrs:{id:"编码器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码器"}},[a._v("#")]),a._v(" 编码器")]),a._v(" "),s("ul",[s("li",[a._v("将消息编码为字节；MessageToByteEncoder")]),a._v(" "),s("li",[a._v("将消息编码为消息：MessageToMessageEncoder，T 代表源数据的类型")])]),a._v(" "),s("h2",{attrs:{id:"编码解码器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编码解码器"}},[a._v("#")]),a._v(" 编码解码器")]),a._v(" "),s("p",[a._v("同时实现 ChannelInboundHandler 和 ChannelOutboundHandler 接口。在一个类里面写编码和解码的逻辑。")]),a._v(" "),s("ul",[s("li",[a._v("抽象类 ByteToMessageCodec")]),a._v(" "),s("li",[a._v("抽象类 MessageToMessageCodec")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChannelDuplexHandler")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChannelInboundHandlerAdapter")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChannelOutboundHandler")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ChannelDuplexHandler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);