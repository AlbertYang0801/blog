(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{389:function(t,v,_){"use strict";_.r(v);var r=_(40),n=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"synchronized和lock的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和lock的区别"}},[t._v("#")]),t._v(" synchronized和Lock的区别")]),t._v(" "),_("h3",{attrs:{id:"synchronized和lock的区别-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和lock的区别-2"}},[t._v("#")]),t._v(" synchronized和Lock的区别")]),t._v(" "),_("hr"),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("类别")]),t._v(" "),_("th",[t._v("synchronized")]),t._v(" "),_("th",[t._v("Lock")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("存在类型")]),t._v(" "),_("td",[t._v("Java关键字")]),t._v(" "),_("td",[t._v("是一个接口")])]),t._v(" "),_("tr",[_("td",[t._v("锁的获取")]),t._v(" "),_("td",[t._v("加在方法上，或者同步代码块")]),t._v(" "),_("td",[t._v("手动创建")])]),t._v(" "),_("tr",[_("td",[t._v("锁的释放")]),t._v(" "),_("td",[t._v("1.获取锁的线程执行完同步代码，释放锁。2.线程执行发生异常，jvm会释放锁。")]),t._v(" "),_("td",[t._v("需要手动释放，不然会造成死锁。")])]),t._v(" "),_("tr",[_("td",[t._v("锁状态")]),t._v(" "),_("td",[t._v("无法判断")]),t._v(" "),_("td",[t._v("可以判断")])]),t._v(" "),_("tr",[_("td",[t._v("锁类型")]),t._v(" "),_("td",[t._v("可重入、不可中断、非公平")]),t._v(" "),_("td",[t._v("可重入、可判断、可指定是否公平")])]),t._v(" "),_("tr",[_("td",[t._v("调度")]),t._v(" "),_("td",[t._v("使用Object对象本身的wait、notify、notifyAll调度机制")]),t._v(" "),_("td",[t._v("使用Condition进行线程之间的调度")])])])])])}),[],!1,null,null,null);v.default=n.exports}}]);