(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{463:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"jvm内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存模型"}},[t._v("#")]),t._v(" JVM内存模型")]),t._v(" "),s("p",[t._v("Java 内存模型在 JDK1.7 主要包含以下区域。")]),t._v(" "),s("ul",[s("li",[t._v("程序计数器")]),t._v(" "),s("li",[t._v("虚拟机栈")]),t._v(" "),s("li",[t._v("本地方法栈")]),t._v(" "),s("li",[t._v("方法区")]),t._v(" "),s("li",[t._v("堆")])]),t._v(" "),s("p",[t._v("而在 JDK1.8中将运行时数据区中的方法区给取消了，换成了本地内存中的元数据区。")]),t._v(" "),s("ul",[s("li",[t._v("程序计数器")]),t._v(" "),s("li",[t._v("虚拟机栈")]),t._v(" "),s("li",[t._v("本地方法栈")]),t._v(" "),s("li",[t._v("堆")]),t._v(" "),s("li",[t._v("元数据区")])]),t._v(" "),s("h2",{attrs:{id:"内存模型图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存模型图"}},[t._v("#")]),t._v(" 内存模型图")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("JDK 1.7 内存模型图")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/SYFaLjZb1Ngc6tp.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("JDK 1.8 内存模型图")]),t._v(" "),s("p",[t._v("JDK1.8中取消了运行时数据区中的方法区，换成了元数据区放到了本地内存里。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/eF9AcHLTmiBYqtP.png",alt:""}})])])]),t._v(" "),s("h2",{attrs:{id:"运行时数据区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区"}},[t._v("#")]),t._v(" 运行时数据区")]),t._v(" "),s("h3",{attrs:{id:"_1、程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、程序计数器"}},[t._v("#")]),t._v(" 1、程序计数器")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("作用")]),t._v(" "),s("p",[t._v("程序计数器作用是"),s("strong",[t._v("保存程序要执行的下一条指令的地址")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("特点")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("程序计数器是"),s("strong",[t._v("线程私有")]),t._v("的，各个线程之间互不影响。")])]),t._v(" "),s("li",[s("p",[t._v("程序计数器是 JVM 中唯一没有规定 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 情况的区域。")]),t._v(" "),s("p",[t._v("由于程序计数器保存的数据占用空间不会随程序执行而改变，所以程序计数器是内存区域中没有规定 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 情况的区域。")])])])]),t._v(" "),s("li",[s("p",[t._v("注意")]),t._v(" "),s("ul",[s("li",[t._v("如果线程执行的是非 native 方法，则程序计数器保存的是下一条执行的指令地址。")]),t._v(" "),s("li",[t._v("如果线程执行的是 native 方法，则程序计数器中的值是 undefined。")])])])]),t._v(" "),s("h3",{attrs:{id:"_2、虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、虚拟机栈"}},[t._v("#")]),t._v(" 2、虚拟机栈")]),t._v(" "),s("p",[t._v("虚拟机栈是常说的栈内存，是 Java 方法执行的区域。")]),t._v(" "),s("h3",{attrs:{id:"栈帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈帧"}},[t._v("#")]),t._v(" 栈帧")]),t._v(" "),s("p",[t._v("虚拟机栈存放的是一个个"),s("code",[t._v("栈帧")]),t._v("，每个栈帧对应一个调用的方法。"),s("strong",[t._v("虚拟机栈是线程私有的，每个线程都有自己的虚拟机栈")]),t._v("，保存了线程私有的 Java 方法。")]),t._v(" "),s("p",[s("strong",[t._v("栈帧")]),t._v(" 包含 "),s("strong",[t._v("局部变量表、操作数栈、指向运行时常量池的引用、方法返回地址、附加信息")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/w3FA1cTuM6hVGfx.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("局部变量表")]),t._v(" "),s("blockquote",[s("p",[t._v("主要用来保存方法中的局部变量，包含方法中声明的非静态变量和函数形参。")])]),t._v(" "),s("ul",[s("li",[t._v("基本数据类型保存的是"),s("strong",[t._v("值")]),t._v("。")]),t._v(" "),s("li",[t._v("引用类型保存的是"),s("strong",[t._v("对象引用地址")]),t._v("。")])]),t._v(" "),s("p",[t._v("局部变量表的大小在编译器可以指定其大小，因此在程序执行期间局部变量表的大小是不会改变的。")])]),t._v(" "),s("li",[s("p",[t._v("操作数栈")]),t._v(" "),s("blockquote",[s("p",[t._v("是方法中进行数据运算的地方。用来计算表达式求值，程序中的计算过程都是借助于操作数栈来完成的。")])])]),t._v(" "),s("li",[s("p",[t._v("指向运行时常量池的引用")]),t._v(" "),s("blockquote",[s("p",[t._v("因为在方法执行的过程中可能需要用到类中的变量，所以每个方法也就是栈帧需要保存一个执行运行时常量的引用。")])]),t._v(" "),s("p",[t._v("运行时常量池在方法区中。")])]),t._v(" "),s("li",[s("p",[t._v("方法返回地址")]),t._v(" "),s("blockquote",[s("p",[t._v("在线程中，每个方法执行完成之后，需要返回到之前调用它的地方。所以在栈帧中需要保存方法的返回地址。由于每个线程执行的方法可能不同，所以每个线程都要有一个自己的虚拟机栈。")])])])]),t._v(" "),s("h3",{attrs:{id:"执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行过程"}},[t._v("#")]),t._v(" 执行过程")]),t._v(" "),s("p",[t._v("当线程执行一个方法的时候，对应创建一个栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。"),s("strong",[t._v("线程当前执行的方法必定位于虚拟机栈的顶部。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/cf8t4Odv5eNlL7o.png",alt:""}})]),t._v(" "),s("p",[t._v("在该区域会发生两种异常：")]),t._v(" "),s("ul",[s("li",[t._v("如果线程请求的栈大于虚拟机允许的深度，会抛出 "),s("code",[t._v("StackOverFlowError")]),t._v(" 异常。")]),t._v(" "),s("li",[t._v("如果虚拟机栈可以动态扩展，当扩展到无法申请到足够内存时，就会抛出 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 异常。")])]),t._v(" "),s("h3",{attrs:{id:"问题分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#问题分析"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("垃圾回收是否涉及栈内存？")]),t._v(" "),s("p",[t._v("不涉及栈内存，垃圾回收只涉及存放对象的堆内存。")]),t._v(" "),s("p",[t._v("栈内存存放的是调用方法信息，不需要垃圾回收。")])]),t._v(" "),s("li",[s("p",[t._v("栈内存分配越大越好吗？")]),t._v(" "),s("p",[t._v("栈内存大小在 linux 系统下为 1M。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/wla9tb4Ye6XB1Ag.png",alt:""}})]),t._v(" "),s("p",[t._v("由于物理内存是一定的，假设为 500M，而虚拟机方法栈是"),s("strong",[t._v("每个线程私有")]),t._v("的。在栈内存大小 1M 的情况，可以分配 500个线程。若增大栈内存，则线程数会随之减少。")]),t._v(" "),s("p",[t._v("所以栈内存并不是越大越好，一般使用系统默认的 1m 即可（windows系统除外）。")])]),t._v(" "),s("li",[s("p",[t._v("方法内的局部变量是否线程安全？")]),t._v(" "),s("p",[t._v("方法内的局部变量存在于虚拟机方法栈中，是线程私有的，所以是线程安全的。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalVariable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" executorService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            executorService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalVariable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("        executorService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5000//5000")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意："),s("strong",[t._v("全局静态变量位于方法区，存在线程安全问题。")])]),t._v(" "),s("hr"),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果方法内的局部变量没有逃离方法，在方法内使用，那么它就是线程安全的。")])]),t._v(" "),s("li",[s("p",[t._v("如果局部变量"),s("strong",[t._v("引用")]),t._v("了其它对象，并且逃离了方法的作用范围，需要考虑安全问题。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**     * 线程不安全     */")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),t._v(" stringBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        stringBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        stringBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        stringBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" stringBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//其它方法引用了该方法，需要考虑变量的线程安全问题。    @SneakyThrows    public static void main(String[] args) {        //引用对象        StringBuffer stringBuffer = test2();        for(int i=0;i<2;i++){            new Thread(()->{                stringBuffer.append("o");            }).start();        }        Thread.sleep(1000);        System.out.println(stringBuffer);    }')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])])])]),t._v(" "),s("h3",{attrs:{id:"模拟栈溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模拟栈溢出"}},[t._v("#")]),t._v(" 模拟栈溢出")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("栈帧过多")]),t._v("导致栈内存溢出")]),t._v(" "),s("p",[t._v("两个方法相互调用，导致虚拟机栈不断地压栈，最终抛出 "),s("code",[t._v("StackOverFlowError")]),t._v(" 异常。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/SnJtRIy8DcOPFWC.png",alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("栈帧过大")]),t._v("导致栈内存溢出")])])]),t._v(" "),s("h3",{attrs:{id:"调整栈内存大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调整栈内存大小"}},[t._v("#")]),t._v(" 调整栈内存大小")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Xss256k：调整栈内存大小为 256k。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/eO3nAWJrMZfqbYH.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_3、本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、本地方法栈"}},[t._v("#")]),t._v(" 3、本地方法栈")]),t._v(" "),s("p",[t._v("本地方法栈和虚拟机栈的作用很相似，虚拟机栈为虚拟机执行 Java 方法，而本地方法栈则为 Java 方法使用到的本地方法服务（navite 方法）。")]),t._v(" "),s("p",[s("strong",[t._v("相同的本地方法栈也可能抛出 "),s("code",[t._v("StackOverFlowError")]),t._v(" 和 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 异常")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/gUn2jBLGcxzvhD4.png",alt:""}})]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("Thread 类中就存在很多 native 方法。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/jwRS5gD7rQ1dulN.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_4、堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、堆"}},[t._v("#")]),t._v(" 4、堆")]),t._v(" "),s("p",[t._v("堆是 JVM 内存管理最大的一块区域，堆存放的是内存的实例，所有对象实例都要在堆上分配内存。Java 堆可以处于物理上不连续的空间，只要逻辑上是连续的即可。")]),t._v(" "),s("p",[t._v("堆空间是"),s("strong",[t._v("线程共享")]),t._v("的一个区域，堆中的对象都要"),s("strong",[t._v("考虑线程安全问题")]),t._v("。")]),t._v(" "),s("p",[t._v("若堆内存不足以创建新对象实例时，将抛出 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 异常。")]),t._v(" "),s("h3",{attrs:{id:"堆空间划分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆空间划分"}},[t._v("#")]),t._v(" 堆空间划分")]),t._v(" "),s("p",[t._v("堆是"),s("strong",[t._v("垃圾收集器的主要管理区域")]),t._v("，为了支持垃圾回收，堆被划分为三个区域。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("年轻代")]),t._v(" "),s("p",[t._v("年轻代被划分为 "),s("strong",[t._v("Eden区、S1区和 S2区")]),t._v("（空间分配比例是 8:1:1）。")])]),t._v(" "),s("li",[s("p",[t._v("老年代")])]),t._v(" "),s("li",[s("p",[t._v("永久代（JDK 1.8 已经移除永久代）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/ITJn2vYLzstQaW5.png",alt:""}})])])]),t._v(" "),s("h3",{attrs:{id:"调整堆内存大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调整堆内存大小"}},[t._v("#")]),t._v(" 调整堆内存大小")]),t._v(" "),s("p",[t._v("通过配置 "),s("code",[t._v("-Xmx1024m")]),t._v(" 参数可以修改并指定堆内存大小。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Ff3PpLoZqvS24RE.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"模拟堆内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模拟堆内存溢出"}},[t._v("#")]),t._v(" 模拟堆内存溢出")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SneakyThrows")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//字符串翻倍增长，占满堆内存                a = a + a;                i++;                System.out.println(i);            }        } catch (Exception e) {            e.printStackTrace();            System.out.println(i);        }        Thread.sleep(10000);    }")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/XpP7suYbV6v5nmD.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"堆内存诊断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆内存诊断"}},[t._v("#")]),t._v(" 堆内存诊断")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("jmap")]),t._v(" 工具")]),t._v(" "),s("blockquote",[s("p",[t._v("jmap 只能查看某个时刻的数据。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("使用 jps 查出进程 Id")])]),t._v(" "),s("li",[s("p",[t._v("使用 jmap 分析堆内存")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Jmap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("heap pid\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("新建一个 10MB 的数组，对进程分析得出得出的结果如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Heap Configuration:\n   MinHeapFreeRatio         = 0\n   MaxHeapFreeRatio         = 100\n   MaxHeapSize              = 4259315712 (4062.0MB)\n   NewSize                  = 88604672 (84.5MB)\n   MaxNewSize               = 1419771904 (1354.0MB)\n   OldSize                  = 177733632 (169.5MB)\n   NewRatio                 = 2\n   SurvivorRatio            = 8\n   MetaspaceSize            = 21807104 (20.796875MB)\n   CompressedClassSpaceSize = 1073741824 (1024.0MB)\n   MaxMetaspaceSize         = 17592186044415 MB\n   G1HeapRegionSize         = 0 (0.0MB)\n\nHeap Usage:\nPS Young Generation\nEden Space:     //年轻代：新创建的对象分配到年轻代\n   capacity = 66584576 (63.5MB)\n   used     = 18496920 (17.640037536621094MB)   //堆内存eden区使用17MB（原使用7MB）\n   free     = 48087656 (45.859962463378906MB)\n   27.779586671844243% used\nFrom Space:\n   capacity = 11010048 (10.5MB)\n   used     = 0 (0.0MB)\n   free     = 11010048 (10.5MB)\n   0.0% used\nTo Space:\n   capacity = 11010048 (10.5MB)\n   used     = 0 (0.0MB)\n   free     = 11010048 (10.5MB)\n   0.0% used\nPS Old Generation   //老年代：大对象直接放入老年代；年轻代中多次GC存活下来的对象转移到老年代。\n   capacity = 177733632 (169.5MB)\n   used     = 0 (0.0MB)\n   free     = 177733632 (169.5MB)\n   0.0% used\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br")])])])])]),t._v(" "),s("li",[s("p",[t._v("使用 "),s("strong",[t._v("jconsole")]),t._v(" 工具")]),t._v(" "),s("blockquote",[s("p",[t._v("选择指定的类进行分析，jconsole 工具分析的是连续的数据。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/NJuTFGCpR2UzwHn.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/4fLngD9vjukXds5.png",alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("使用 "),s("strong",[t._v("jvisualvm")]),t._v(" 来进行分析。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/3tqxPSQBgm7p4is.png",alt:""}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("查找最大的对象")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/147PJkyZd3KOfez.png",alt:""}})])])])])]),t._v(" "),s("h3",{attrs:{id:"_5、方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、方法区"}},[t._v("#")]),t._v(" 5、方法区")]),t._v(" "),s("p",[t._v("方法区在 JVM 中也是一个非常重要的区域，"),s("strong",[t._v("是线程共享的内存区域")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[t._v("#")]),t._v(" 组成")]),t._v(" "),s("p",[t._v("在方法区中，存储了每个类的信息、静态变量、常量以及编译后的代码等。")]),t._v(" "),s("ul",[s("li",[t._v("类（包含类名称、方法信息、字段信息）")]),t._v(" "),s("li",[s("strong",[t._v("运行时常量池")]),t._v("（静态变量、常量）")]),t._v(" "),s("li",[t._v("类的加载（编译后的代码）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/unvj8JHQy1lMGtN.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"方法区的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区的实现"}},[t._v("#")]),t._v(" 方法区的实现")]),t._v(" "),s("p",[t._v("方法区是 JVM 中的一种规范定义。")]),t._v(" "),s("ul",[s("li",[t._v("在 JDK 1.7 以及之前版本，"),s("strong",[t._v("永久代")]),t._v("是方法区的实现，位于堆内存中。为了区分 Java 堆，它还有一个别名叫 Non - Heap （非堆）。")]),t._v(" "),s("li",[t._v("在 JDK 1.8 方法区的实现是"),s("strong",[t._v("元数据区")]),t._v("，位于本地内存中。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/UMeTrl4NbnZmdi2.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"方法区内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区内存溢出"}},[t._v("#")]),t._v(" 方法区内存溢出")]),t._v(" "),s("p",[t._v("当方法区无法满足内存分配时，将抛出 "),s("code",[t._v("OutOfMemoryError")]),t._v(" 异常。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("元空间内存溢出")]),t._v(" "),s("p",[t._v("创建类对象导致元空间内存溢出。")]),t._v(" "),s("blockquote",[s("p",[t._v("修改元空间内存大小：-XX:MaxMetaspaceSize=8m")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/jS4QtCvN698WlRn.png",alt:""}})])])]),t._v(" "),s("h3",{attrs:{id:"方法区垃圾回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区垃圾回收"}},[t._v("#")]),t._v(" 方法区垃圾回收")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/jxJZ874k1D6tYMz.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"jdk1-8-为什么将永久代改为元空间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-为什么将永久代改为元空间"}},[t._v("#")]),t._v(" JDK1.8 为什么将永久代改为元空间？")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("解决了永久代大小限制的问题。")]),t._v(" "),s("p",[t._v("由于元空间使用本地内存，因此不再受JVM堆大小的限制，从而避免了因类加载过多而导致的 OutOfMemoryError 错误。")])]),t._v(" "),s("li",[s("p",[t._v("提高了内存使用效率。")]),t._v(" "),s("p",[t._v("方法区主要存储了类的元数据信息、常量、静态变量以及编译器编译后的代码等内容。这部分数据在运行时是只读的，因此将其放到本地内存中可以减轻堆内存的压力，从而提高Java应用程序的运行效率。")])]),t._v(" "),s("li",[s("p",[t._v("更好的性能优化。")]),t._v(" "),s("p",[t._v("将方法区放到本地内存，可以更好地利用操作系统的内存管理机制，从而实现更好的性能优化。")]),t._v(" "),s("p",[t._v("IO 操作上更加高效，本地内存可以直接与操作系统的 IO进行交互。而不需要先将堆里面的数据拷贝到本地内存然后再进行交互。")])])]),t._v(" "),s("h3",{attrs:{id:"_6、运行时常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、运行时常量池"}},[t._v("#")]),t._v(" 6、运行时常量池")]),t._v(" "),s("p",[t._v("运行时常量池是"),s("strong",[t._v("方法区的一部分")]),t._v("，用于存放编译期生成的常量和对象引用，这部分内容将在被类加载后，进入方法区的运行时常量池中存放。运行时常量池是每个类都有一个，而且具备动态性，运行期间也可以放入新的常量。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_45737068/article/details/107149922?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&utm_relevant_index=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解JVM常量池、Class常量池、运行时常量池、字符串常量池"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"字符串常量池-stringtable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池-stringtable"}},[t._v("#")]),t._v(" 字符串常量池-StringTable")]),t._v(" "),s("p",[t._v("存放的是方法中的字符串常量，作用是"),s("strong",[t._v("减少字符串的重复创建")]),t._v("，字符串常量池是共享区域。")]),t._v(" "),s("p",[s("strong",[t._v("StringTable")]),t._v(" 数据结构本质上类似 哈希链表（数组+链表），在 1.6 位于永久代中，之后在"),s("strong",[t._v("堆内存中")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("运行时常量池从永久代转移到了元空间。但是字符串常量池，转移到了堆里面。")])]),t._v(" "),s("p",[t._v("StringTable实现的前提是 String类型不可变的，若String可变，对于不同的引用，指向StringTable的变量值也会随即改变。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/baizhanshi/p/6970583.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么String类是不可变的？"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("StringTable 在 1.6位于永久代中，而永久代只有在 fullGC的时候才会进行垃圾回收，就是在老年代满的时候进行的垃圾回收。StringTable 数据结构本质上类似 HashMap，数据越多的情况效率越低。所以垃圾回收频率低的话，影响到StringTable 的使用。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/UMeTrl4NbnZmdi2.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("懒加载策略")])]),t._v(" "),s("p",[t._v("方法中的字符串，只有用到了该参数，才会放到字符串常量池中，一种懒加载策略。")]),t._v(" "),s("p",[s("strong",[t._v("OOM异常")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JDK1.6之前，StringTable位于永久代中。")]),t._v(" "),s("p",[t._v("当不断向 StringTable 写入数据时，可能造成永久代的 OOM。")])]),t._v(" "),s("li",[s("p",[t._v("JDK1.7之后，StringTable位于堆内存中。")]),t._v(" "),s("p",[t._v("同理，StringTable 可能会造成 OOM。")])])]),t._v(" "),s("p",[s("strong",[t._v("StrintTable垃圾回收")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/zhuxuemin1991/article/details/103940936?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&utm_relevant_index=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("StringTable垃圾回收跟踪案例"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"intern-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intern-方法"}},[t._v("#")]),t._v(" intern()方法")]),t._v(" "),s("p",[s("code",[t._v("intern()")]),t._v(" 方法作用是 "),s("em",[t._v("如果常量池中存在当前字符串, 就会直接返回当前字符串. 如果常量池中没有此字符串, 会将此字符串放入常量池中后, 再返回")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("JDK6")]),t._v(" "),s("p",[t._v("将堆中字符串"),s("strong",[t._v("复制一份")]),t._v("放入串池，若串池存在该字符串，返回串池的引用。若串池不存在，在串池放入复制的字符串的引用。")])]),t._v(" "),s("li",[s("p",[t._v("JDK7")]),t._v(" "),s("p",[t._v("将堆中字符串对象放入串池，若串池存在该字符串，返回串池的引用。若串池不存在，则在串池放入堆中字符串的引用。")])])]),t._v(" "),s("hr"),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1" 作为常量放入串池')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// new String("1") 在堆中创建对象')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s是堆中对象的引用 ，此时 1 的对象。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 将s引用存入串池，但串池已经有了"1"')]),t._v("\n    s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 从串池中找到 "1"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s为堆中对象的引用，没有改变")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s2为串池对象的引用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//jdk1.8               ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1" 作为常量放入串池')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// new String("1") 在堆中创建两个对象')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// s3 = new StringBuilder().append("1").append("1").toString ==> new String("11")')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// s3是堆中字符串 11 的引用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将s3的引用存入串池，串池之前不存在11。")]),t._v("\n    s3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从串池找11，就是s3的引用地址。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"11"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//jdk1.8 true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//jdk1.6 false 因为intern()放到串池的是复制的对象，和堆中对象不是一个")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("p",[s("a",{attrs:{href:"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("美团技术团队：深入解析String#intern"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"stringtable调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stringtable调优"}},[t._v("#")]),t._v(" StringTable调优")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("调整StringTable大小")]),t._v(" "),s("p",[t._v("类比 HashMap，StringTable 的大小就是桶的个数，桶越多，哈希碰撞几率越低。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 最小值为1009\n-XX:StringTable=1009\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("blockquote",[s("p",[t._v("假设写入 StringTable表数据非常多，当 StringTable表的大小越小时，越容易发生哈希碰撞产生链表。而随着数据变多，链表会越来越长。而在写入 StringTable 时，为了保证数据的唯一性，会查找 StringTable 判断数据唯一性。此时链表越长查找效率越低，进而影响了写入的效率。")])]),t._v(" "),s("p",[s("strong",[t._v("若写入串池数据量较大，适当调大该参数")]),t._v("，减少哈希碰撞的几率，用内存空间来换效率。")])]),t._v(" "),s("li",[s("p",[t._v("重复字符串对象放入StringTable")]),t._v(" "),s("p",[t._v("若是重复字符串对象很多，考虑使用 "),s("code",[t._v("intern()")]),t._v(" 方法放入 StringTable 中。")])])]),t._v(" "),s("h3",{attrs:{id:"_7、直接内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、直接内存"}},[t._v("#")]),t._v(" 7、直接内存")]),t._v(" "),s("p",[t._v("直接内存是 JDK 1.8 之后被利用到的区域，并不是虚拟机运行时数据区的一部分，但是这部分内存由于取代了方法区，会被频繁使用也可能导致 "),s("code",[t._v("OutOfMemory")]),t._v(" 异常。")]),t._v(" "),s("ul",[s("li",[t._v("常用于 NIO 操作时，用作数据缓冲区。")]),t._v(" "),s("li",[t._v("分配回收成本较高，但读写性能高。")]),t._v(" "),s("li",[t._v("不受 JVM 内存回收管理。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("读取文件 -> 系统缓冲区 -> java 缓冲区")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/TPJe2zQCjuhGOlD.png",alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("读取文件 -> 直接内存")])]),t._v(" "),s("blockquote",[s("p",[t._v("直接内存是系统内存和 Java 堆内存都可以共享的一个区域，对比之前读取文件时，减少了一次缓冲区的写入和读取，进而提高了效率。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/CQ6X5p32TeonGPf.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"直接内存oom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接内存oom"}},[t._v("#")]),t._v(" 直接内存OOM")]),t._v(" "),s("p",[t._v("不断使用直接内存会使用直接内存 OOM。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DirectBufferOOM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//直接内存使用大小")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),t._v(" byteBuffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ByteBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("allocateDirect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("byteBuffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/Ppth7f6AIbGFYvS.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"直接内存释放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接内存释放"}},[t._v("#")]),t._v(" 直接内存释放")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/ReJMUmFYDz5463C.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),s("h3",{attrs:{id:"_1-jdk-1-7-和-jdk-1-8-内存模型发生的变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-jdk-1-7-和-jdk-1-8-内存模型发生的变化"}},[t._v("#")]),t._v(" 1. JDK 1.7 和 JDK 1.8 内存模型发生的变化？")]),t._v(" "),s("p",[t._v("最大的变化就是在 JDK 1.8 中 元数据区取代了永久代。永久代位于JVM，而元数据区位于本地内存中。")]),t._v(" "),s("h3",{attrs:{id:"_2-方法区和永久代的区分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法区和永久代的区分"}},[t._v("#")]),t._v(" 2. 方法区和永久代的区分？")]),t._v(" "),s("p",[t._v("方法区是 JVM 中的一种规范定义，永久代是其具体的实现，在 JDK 1.8 中 元空间也是方法区的一种实现。")]),t._v(" "),s("h3",{attrs:{id:"_3-为什么取消永久代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么取消永久代"}},[t._v("#")]),t._v(" 3. 为什么取消永久代？")]),t._v(" "),s("ul",[s("li",[t._v("根据官方文档的解释，是为了融合 "),s("code",[t._v("HotSpot JVM")]),t._v(" 和 "),s("code",[t._v("JRockit VM")]),t._v(" 做出的努力，因为 "),s("code",[t._v("JRockit VM")]),t._v(" 没有永久代，不需要配置。")]),t._v(" "),s("li",[t._v("永久代大小指定比较困难，因为存放类和方法信息大小不易确定，并且永久代使用比较频繁，容易发生内存不够用的情况，即容易内存溢出。")]),t._v(" "),s("li",[t._v("永久代容易发生内存泄漏，永久代中的一些类不使用时，也不容易被 GC 回收，容易造成内存泄漏问题。")])]),t._v(" "),s("h3",{attrs:{id:"_4-什么是内存溢出和内存泄漏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是内存溢出和内存泄漏"}},[t._v("#")]),t._v(" 4. 什么是内存溢出和内存泄漏？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内存溢出")]),t._v(" "),s("p",[t._v("当创建新对象的时候无法申请到足够的内存时，就会发生内存溢出。")])]),t._v(" "),s("li",[s("p",[t._v("内存泄露")]),t._v(" "),s("p",[t._v("对象位于内存中不被使用，但是无法被 GC 回收掉，始终堆积在内存中。当堆积到一定程度会发生内存溢出。")])])]),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.cn/post/6844903909983535111#heading-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java内存管理-JVM内存模型以及JDK7和JDK8内存模型对比总结（三）"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);