import{_ as i,c as a,o as l,ag as t}from"./chunks/framework.D7pKEi_Q.js";const o=JSON.parse('{"title":"ClickHouse基础","description":"","frontmatter":{},"headers":[],"relativePath":"database/clickhouse/ClickHouse基础.md","filePath":"database/clickhouse/ClickHouse基础.md"}'),h={name:"database/clickhouse/ClickHouse基础.md"};function k(n,s,p,e,r,E){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="clickhouse基础" tabindex="-1">ClickHouse基础 <a class="header-anchor" href="#clickhouse基础" aria-label="Permalink to &quot;ClickHouse基础&quot;">​</a></h1><h2 id="列式存储" tabindex="-1">列式存储 <a class="header-anchor" href="#列式存储" aria-label="Permalink to &quot;列式存储&quot;">​</a></h2><p>clickhouse 是 <em>列式存储</em> 数据库</p><p>在磁盘上按列存储，即按某个字段进行存储。</p><p><img src="https://s2.loli.net/2025/06/24/vyUe6nuWbLgqfQc.png" alt="Untitled.png"></p><p>所以列式存储更适合进行查询，比如某一行的聚合、计算、求和等。</p><h3 id="列式存储的好处" tabindex="-1">列式存储的好处 <a class="header-anchor" href="#列式存储的好处" aria-label="Permalink to &quot;列式存储的好处&quot;">​</a></h3><ol><li><p>对于某列的聚合、计数、求和等操作要比行式存储更快。</p><p><strong>查询更快</strong>。</p><ul><li>行式存储，增改删更加方便，因为只需要找到对应的行记录，直接删除即可。但是列式存储对比起来，增改删要更繁琐一点。</li></ul></li><li><p>每一列的数据类型是一样的，这样能更好的进行数据压缩。</p><p><strong>方便数据压缩，节省磁盘</strong></p><ul><li>与 es 相比，作为常见的大数据存储数据库。es 的数据压缩性能不强，通常需要占据很大的磁盘空间。而 ck 的压缩性能要好，比 es 占磁盘要小很多。</li></ul></li></ol><h2 id="olap-和-oltp的区别" tabindex="-1">OLAP 和 OLTP的区别 <a class="header-anchor" href="#olap-和-oltp的区别" aria-label="Permalink to &quot;OLAP 和 OLTP的区别&quot;">​</a></h2><h3 id="olap" tabindex="-1">OLAP <a class="header-anchor" href="#olap" aria-label="Permalink to &quot;OLAP&quot;">​</a></h3><ul><li>OLAP 是 <code>On-Line Analytical Processing</code> 联机分析处理，Clickhouse就是典型的 OLAP 联机分析型数据库管理系统(DBMS)。</li><li>OLAP主要针对数据进行复杂分析汇总操作，比如云监控平台需要将采集到的流量数据存入到数据库中，极少对数据进行增删改操作，这就是一个典型的 OLAP 场景。</li></ul><h3 id="oltp" tabindex="-1">OLTP <a class="header-anchor" href="#oltp" aria-label="Permalink to &quot;OLTP&quot;">​</a></h3><ul><li>OLTP 是 <code>On-Line Transaction Processing</code> 联机事务处理。</li><li>在 OLTP 场景中用户并发操作量会很大，要求系统实时进行数据操作的响应，需要支持事务，Mysql、Oracle、SQLServer 等都是 OLTP 型数据库。</li></ul><h3 id="数据分区和线程级并行" tabindex="-1">数据分区和线程级并行 <a class="header-anchor" href="#数据分区和线程级并行" aria-label="Permalink to &quot;数据分区和线程级并行&quot;">​</a></h3><p>ClickHouse 将数据划分为多个 partition，每个 partition 再进一步划分为多个 index granularity(索引粒度)，然后通过多个 CPU核心分别处理其中的一部分来实现并行数据处理。</p><p>单条查询场景下：</p><p><code>单条 Query 就能利用整机的 CPU 来进行查询</code></p><p>查询大数据场景下能够高效并行处理。</p><p>但是在高并发情况下，这种优势就不明显了。所以在高 QPS的情况下，CK 的效率反而不如 ES。</p><ul><li>ClickHouse 的缺陷就在高 QPS情况下不支持，而且查询会很吃 CPU，CPU 是 CK 的一个瓶颈。</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p><a href="https://clickhouse.com/docs/zh/sql-reference/data-types/map" target="_blank" rel="noreferrer">Map(key, value) | ClickHouse Docs</a></p><h3 id="时间类型" tabindex="-1">时间类型 <a class="header-anchor" href="#时间类型" aria-label="Permalink to &quot;时间类型&quot;">​</a></h3><p>目前 ClickHouse 有三种时间类型：</p><ul><li><p>Date</p><p>接受年-月-日的字符串比如 ‘2019-12-16’</p></li><li><p>DateTime</p><p>接受年-月-日 时:分:秒的字符串比如 ‘2019-12-16 20:50:10’</p></li><li><p>DateTime64</p><p>接受年-月-日 时:分:秒.亚秒的字符串比如 ‘2019-12-16 20:50:10.66’</p></li></ul><h3 id="map类型" tabindex="-1">map类型 <a class="header-anchor" href="#map类型" aria-label="Permalink to &quot;map类型&quot;">​</a></h3><ul><li><p>建表语句</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> table_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a Map(String, UInt64)) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Memory;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}), ({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}), ({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;key2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><p>查询语句</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration_ns_count) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestCount,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxTimestamp,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration_ns_buckets[3000000000]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket3s,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration_ns_buckets[5000000000]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket5s,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration_ns_buckets[10000000000]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket10s,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(duration_ns_buckets[20000000000]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket20s,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wkd_key,protocol,content_key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entity_detail </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BETWEEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wkd_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foreach </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">collection=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workloadKeys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workloadKey&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> separator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> close=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            #{workloadKey}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        &lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foreach</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wkd_key,protocol,content_key</span></span></code></pre></div></li><li><p>映射字段</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TableField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sumMap(duration_ns_buckets)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">typeHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FastjsonTypeHandler.class, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insertStrategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FieldStrategy.NEVER, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">updateStrategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FieldStrategy.NEVER)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BigInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BigInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; bucketSum;</span></span></code></pre></div></li></ul>`,27)]))}const g=i(h,[["render",k]]);export{o as __pageData,g as default};
