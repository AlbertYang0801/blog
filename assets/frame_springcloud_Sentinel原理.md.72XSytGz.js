import{_ as a,c as e,o as d,aM as r}from"./chunks/framework.Du1sph90.js";const m=JSON.parse('{"title":"Sentinel原理","description":"","frontmatter":{},"headers":[],"relativePath":"frame/springcloud/Sentinel原理.md","filePath":"frame/springcloud/Sentinel原理.md","lastUpdated":1752832844000}'),l={name:"frame/springcloud/Sentinel原理.md"};function i(n,t,o,p,s,h){return d(),e("div",null,t[0]||(t[0]=[r('<h1 id="sentinel原理" tabindex="-1">Sentinel原理 <a class="header-anchor" href="#sentinel原理" aria-label="Permalink to &quot;Sentinel原理&quot;">​</a></h1><p><a href="https://github.com/alibaba/Sentinel/wiki/Sentinel%E5%B7%A5%E4%BD%9C%E4%B8%BB%E6%B5%81%E7%A8%8B" target="_blank" rel="noreferrer">Sentinel工作主流程</a></p><p><a href="https://www.kancloud.cn/mr_zihan/fix_error/2783766" target="_blank" rel="noreferrer">滑动窗口实现原理 · 吾爱开源 · 看云</a></p><h2 id="限流算法" tabindex="-1">限流算法 <a class="header-anchor" href="#限流算法" aria-label="Permalink to &quot;限流算法&quot;">​</a></h2><h3 id="计数器算法" tabindex="-1">计数器算法 <a class="header-anchor" href="#计数器算法" aria-label="Permalink to &quot;计数器算法&quot;">​</a></h3><p>计数器算法统计某个时间段的请求量，判断是否超过阈值。</p><p><img src="https://s2.loli.net/2025/06/10/zj4MxIZRYkhfU1E.png" alt="" loading="lazy"></p><p>存在的问题：</p><p>如上图中，在时间段的临界处加起来其实QPS 超过了阈值，但是平均到单个时间段未发生。</p><p>单纯的计数器算法存在 <strong>临界统计不准确</strong> 的问题。</p><h3 id="滑动窗口计数器算法" tabindex="-1">滑动窗口计数器算法 <a class="header-anchor" href="#滑动窗口计数器算法" aria-label="Permalink to &quot;滑动窗口计数器算法&quot;">​</a></h3><p>解决滑动窗口存在的问题，引入了滑动窗口计数器。</p><p>我们将统计时间细分，比如将 1s 统计时长分为 5个 时间窗口，通过 <strong>滚动统计所有时间窗口的QPS 作为系统实际的 QPS</strong> 的方式，就能解决上述 <strong>临界统计</strong> 问题。</p><p><img src="https://s2.loli.net/2025/06/10/IHrOeQ8f2qWBvmo.png" alt="" loading="lazy"></p><h3 id="漏斗算法" tabindex="-1">漏斗算法 <a class="header-anchor" href="#漏斗算法" aria-label="Permalink to &quot;漏斗算法&quot;">​</a></h3><p>类似一个队列，每隔10ms从队列头部取出流量进行放行，而我们的队列也就是漏桶，当流量大于队列的长度的时候，我们就可以拒绝超出的部分。</p><p>存在的问题：</p><p>由于漏斗要求请求比较均匀，不适合突发流量。</p><p>适合消费 MQ 这种请求均匀的情况，达到控制请求速率的场景。</p><h3 id="令牌桶算法" tabindex="-1">令牌桶算法 <a class="header-anchor" href="#令牌桶算法" aria-label="Permalink to &quot;令牌桶算法&quot;">​</a></h3><p>令牌桶存放一定数量的令牌，请求过来获取到令牌才会放行。</p><p>可以应对突发流量的情况。</p><h2 id="滑动窗口算法的实现-leaparray" tabindex="-1">滑动窗口算法的实现-LeapArray <a class="header-anchor" href="#滑动窗口算法的实现-leaparray" aria-label="Permalink to &quot;滑动窗口算法的实现-LeapArray&quot;">​</a></h2><p><img src="https://s2.loli.net/2025/06/10/rpU3iKyY7NAbxqd.png" alt="" loading="lazy"></p><p><img src="https://s2.loli.net/2025/06/10/esKcDpR8oH1divG.png" alt="" loading="lazy"></p><p>滑动窗口将一段时间间隔（<code>intervalInMs</code>）划分成了由 N个（<code>sampleCount</code>）桶（<code>Bucket</code>）组成的时间片数组，每个桶的时间长度是 <code>windowLengthInMs</code>，桶里面保存了统计的相关数据。</p><p>对所有有效桶内的 QP（请求量）求和就能得出单位有效时间内的 QPS。</p><p><img src="https://s2.loli.net/2025/06/10/vLcPUjtGTQBnof2.png" alt="" loading="lazy"></p><ul><li><p>情况一：缺少桶，需要创建新桶并更新到数组。</p><p>判断当前时间段的桶是否存在，如果不存在，则创建一个新的桶，并尝试使用 CAS 操作将其更新到滑动窗口的桶数组中，如果更新成功，则返回新的桶。</p><p><img src="https://s2.loli.net/2025/06/10/t9juXv5csD1VMme.png" alt="" loading="lazy"></p></li><li><p>情况二：最新桶，直接返回。</p><p>如果桶已经存在，并且与当前时间段的起始时间相同，则说明这个桶是最新的，可以直接返回。</p><p><img src="https://s2.loli.net/2025/06/10/SNMPL9FWq3CgJmr.png" alt="" loading="lazy"></p></li><li><p>情况三：桶被丢弃，需要重置</p><p>如果桶已经存在，但其起始时间已经过期，则需要更新这个桶。</p><p><img src="https://s2.loli.net/2025/06/10/kD9oMFEzpq6SlWi.png" alt="" loading="lazy"></p></li></ul><h2 id="关键类" tabindex="-1">关键类 <a class="header-anchor" href="#关键类" aria-label="Permalink to &quot;关键类&quot;">​</a></h2><ul><li><code>StatisticNode</code></li><li><code>StatisticSlot</code></li><li><code>ArrayMetric</code></li><li><code>LeapArray</code></li></ul><p>当 Sentinel 监控系统对某个资源进行监控时，会创建一个对应的 StatisticNode 节点。</p><p>该节点通过 StatisticSlot 统计槽收集和处理数据。</p><p>并通过 ArrayMetric 数组度量器来维护收集的数据。</p><p>LeapArray 则相当于一个滑动时间窗口，用于按照时间周期将各个 ArrayMetric 链接起来，以形成一个时间线的统计图。</p><p><img src="https://s2.loli.net/2025/06/10/mkrRENuLOba5FH9.png" alt="" loading="lazy"></p><h2 id="同类组件功能对比" tabindex="-1">同类组件功能对比 <a class="header-anchor" href="#同类组件功能对比" aria-label="Permalink to &quot;同类组件功能对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>Sentinel</th><th>Hystrix</th><th>resilience4j</th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离（并发控制）</td><td>线程池隔离/信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例、异常比例、异常数</td><td>基于异常比例</td><td>基于异常比例、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持近十种动态数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>单机限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>集群流控</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>流量整形</td><td>支持预热模式与匀速排队控制效果</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>热点识别/防护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>多语言支持</td><td>Java/Go/C++</td><td>Java</td><td>Java</td></tr><tr><td>Service Mesh 支持</td><td>支持 Envoy/Istio</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><p><img src="https://s2.loli.net/2025/06/10/C5wsJjVGdoDgl91.png" alt="" loading="lazy"></p><ul><li>线程池隔离： <ol><li>调用线程和 hystrixCommand 线程不是同一个线程，并发请求数受到线程池（不是容器 tomcat 的线程池，而是 hystrixCommand 所属于线程组的线程池）中的线程数限制，默认是10。</li><li>这个是默认的隔离机制。</li><li>hystrixCommand 线程无法获取到调用线程中的 ThreadLocal 中的值。</li></ol></li><li>信号量隔离： <ol><li>调用线程和 hystrixCommand 线程是同一个线程，默认最大并发请求数是10。</li><li>调用数度快，开销小，由于和调用线程是处于同一个线程，所以必须确保调用的微服务可用性足够高并且返回快才用。</li></ol></li></ul><p>注意：如果发生找不到上下文的运行时异常，可考虑将隔离策略设置为 SEMAPHONE。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://blog.csdn.net/Michelle_Zhong/article/details/131144748" target="_blank" rel="noreferrer">【RuoYi-Cloud-Plus】学习笔记 06 - Sentinel（一）关于 StatisticSlot 以及 LeapArray_sentinel leaparray-CSDN博客</a></p><p><a href="https://www.processon.com/view/link/62e24778e0b34d06e56ab4b9" target="_blank" rel="noreferrer">Sentinel 1.8.4 规则持久化源码分析| ProcessOn免费在线作图,在线流程图,在线思维导图</a></p><h2 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h2><h3 id="告警压缩功能可以用滑动窗口去做吗" tabindex="-1">告警压缩功能可以用滑动窗口去做吗 <a class="header-anchor" href="#告警压缩功能可以用滑动窗口去做吗" aria-label="Permalink to &quot;告警压缩功能可以用滑动窗口去做吗&quot;">​</a></h3><ul><li>告警压缩也是用滑动窗口实现。 <ul><li>比如一分钟内同机器CPU超过80告警。针对机器生成一个时间桶，写入数据时判断桶内数据是否达到阈值。</li></ul></li></ul>',47)]))}const u=a(l,[["render",i]]);export{m as __pageData,u as default};
