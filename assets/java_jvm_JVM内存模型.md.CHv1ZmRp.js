import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.BAYqcHKv.js";const g=JSON.parse('{"title":"JVM内存模型","description":"","frontmatter":{},"headers":[],"relativePath":"java/jvm/JVM内存模型.md","filePath":"java/jvm/JVM内存模型.md"}'),t={name:"java/jvm/JVM内存模型.md"};function p(e,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="jvm内存模型" tabindex="-1">JVM内存模型 <a class="header-anchor" href="#jvm内存模型" aria-label="Permalink to &quot;JVM内存模型&quot;">​</a></h1><p>Java 内存模型在 JDK1.7 主要包含以下区域。</p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li><li>方法区</li><li>堆</li></ul><p>而在 JDK1.8中将运行时数据区中的方法区给取消了，换成了本地内存中的元数据区。</p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li><li>堆</li><li>元数据区</li></ul><h2 id="内存模型图" tabindex="-1">内存模型图 <a class="header-anchor" href="#内存模型图" aria-label="Permalink to &quot;内存模型图&quot;">​</a></h2><ol><li><p>JDK 1.7 内存模型图</p><p><img src="https://s2.loli.net/2025/05/29/SYFaLjZb1Ngc6tp.png" alt=""></p></li><li><p>JDK 1.8 内存模型图</p><p>JDK1.8中取消了运行时数据区中的方法区，换成了元数据区放到了本地内存里。</p><p><img src="https://s2.loli.net/2025/05/29/eF9AcHLTmiBYqtP.png" alt=""></p></li></ol><h2 id="运行时数据区" tabindex="-1">运行时数据区 <a class="header-anchor" href="#运行时数据区" aria-label="Permalink to &quot;运行时数据区&quot;">​</a></h2><h3 id="_1、程序计数器" tabindex="-1">1、程序计数器 <a class="header-anchor" href="#_1、程序计数器" aria-label="Permalink to &quot;1、程序计数器&quot;">​</a></h3><ul><li><p>作用</p><p>程序计数器作用是<strong>保存程序要执行的下一条指令的地址</strong>。</p></li><li><p>特点</p><ul><li><p>程序计数器是<strong>线程私有</strong>的，各个线程之间互不影响。</p></li><li><p>程序计数器是 JVM 中唯一没有规定 <code>OutOfMemoryError</code> 情况的区域。</p><p>由于程序计数器保存的数据占用空间不会随程序执行而改变，所以程序计数器是内存区域中没有规定 <code>OutOfMemoryError</code> 情况的区域。</p></li></ul></li><li><p>注意</p><ul><li>如果线程执行的是非 native 方法，则程序计数器保存的是下一条执行的指令地址。</li><li>如果线程执行的是 native 方法，则程序计数器中的值是 undefined。</li></ul></li></ul><h3 id="_2、虚拟机栈" tabindex="-1">2、虚拟机栈 <a class="header-anchor" href="#_2、虚拟机栈" aria-label="Permalink to &quot;2、虚拟机栈&quot;">​</a></h3><p>虚拟机栈是常说的栈内存，是 Java 方法执行的区域。</p><h3 id="栈帧" tabindex="-1">栈帧 <a class="header-anchor" href="#栈帧" aria-label="Permalink to &quot;栈帧&quot;">​</a></h3><p>虚拟机栈存放的是一个个<code>栈帧</code>，每个栈帧对应一个调用的方法。<strong>虚拟机栈是线程私有的，每个线程都有自己的虚拟机栈</strong>，保存了线程私有的 Java 方法。</p><p><strong>栈帧</strong> 包含 <strong>局部变量表、操作数栈、指向运行时常量池的引用、方法返回地址、附加信息</strong>。</p><p><img src="https://s2.loli.net/2025/05/29/w3FA1cTuM6hVGfx.png" alt=""></p><ul><li><p>局部变量表</p><blockquote><p>主要用来保存方法中的局部变量，包含方法中声明的非静态变量和函数形参。</p></blockquote><ul><li>基本数据类型保存的是<strong>值</strong>。</li><li>引用类型保存的是<strong>对象引用地址</strong>。</li></ul><p>局部变量表的大小在编译器可以指定其大小，因此在程序执行期间局部变量表的大小是不会改变的。</p></li><li><p>操作数栈</p><blockquote><p>是方法中进行数据运算的地方。用来计算表达式求值，程序中的计算过程都是借助于操作数栈来完成的。</p></blockquote></li><li><p>指向运行时常量池的引用</p><blockquote><p>因为在方法执行的过程中可能需要用到类中的变量，所以每个方法也就是栈帧需要保存一个执行运行时常量的引用。</p></blockquote><p>运行时常量池在方法区中。</p></li><li><p>方法返回地址</p><blockquote><p>在线程中，每个方法执行完成之后，需要返回到之前调用它的地方。所以在栈帧中需要保存方法的返回地址。由于每个线程执行的方法可能不同，所以每个线程都要有一个自己的虚拟机栈。</p></blockquote></li></ul><h3 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h3><p>当线程执行一个方法的时候，对应创建一个栈帧压栈。当方法执行完毕之后，便会将栈帧出栈。<strong>线程当前执行的方法必定位于虚拟机栈的顶部。</strong></p><p><img src="https://s2.loli.net/2025/05/29/cf8t4Odv5eNlL7o.png" alt=""></p><p>在该区域会发生两种异常：</p><ul><li>如果线程请求的栈大于虚拟机允许的深度，会抛出 <code>StackOverFlowError</code> 异常。</li><li>如果虚拟机栈可以动态扩展，当扩展到无法申请到足够内存时，就会抛出 <code>OutOfMemoryError</code> 异常。</li></ul><h3 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-label="Permalink to &quot;问题分析&quot;">​</a></h3><ol><li><p>垃圾回收是否涉及栈内存？</p><p>不涉及栈内存，垃圾回收只涉及存放对象的堆内存。</p><p>栈内存存放的是调用方法信息，不需要垃圾回收。</p></li><li><p>栈内存分配越大越好吗？</p><p>栈内存大小在 linux 系统下为 1M。</p><p><img src="https://s2.loli.net/2025/05/29/wla9tb4Ye6XB1Ag.png" alt=""></p><p>由于物理内存是一定的，假设为 500M，而虚拟机方法栈是<strong>每个线程私有</strong>的。在栈内存大小 1M 的情况，可以分配 500个线程。若增大栈内存，则线程数会随之减少。</p><p>所以栈内存并不是越大越好，一般使用系统默认的 1m 即可（windows系统除外）。</p></li><li><p>方法内的局部变量是否线程安全？</p><p>方法内的局部变量存在于虚拟机方法栈中，是线程私有的，所以是线程安全的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LocalVariable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {            x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        }        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);    }    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {        ExecutorService executorService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){            executorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LocalVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());        }        executorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5000//5000</span></span></code></pre></div><p>注意：<strong>全局静态变量位于方法区，存在线程安全问题。</strong></p><hr><ul><li><p>如果方法内的局部变量没有逃离方法，在方法内使用，那么它就是线程安全的。</p></li><li><p>如果局部变量<strong>引用</strong>了其它对象，并且逃离了方法的作用范围，需要考虑安全问题。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**     * 线程不安全     */</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StringBuffer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {        StringBuffer stringBuffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();        stringBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        stringBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        stringBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringBuffer;    }    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//其它方法引用了该方法，需要考虑变量的线程安全问题。    @SneakyThrows    public static void main(String[] args) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //引用对象        StringBuffer stringBuffer = test2();        for(int i=0;i&lt;2;i++){            new Thread(()-&gt;{                stringBuffer.append(&quot;o&quot;);            }).start();        }        Thread.sleep(1000);        System.out.println(stringBuffer);    }</span></span></code></pre></div></li></ul></li></ol><h3 id="模拟栈溢出" tabindex="-1">模拟栈溢出 <a class="header-anchor" href="#模拟栈溢出" aria-label="Permalink to &quot;模拟栈溢出&quot;">​</a></h3><ol><li><p><strong>栈帧过多</strong>导致栈内存溢出</p><p>两个方法相互调用，导致虚拟机栈不断地压栈，最终抛出 <code>StackOverFlowError</code> 异常。</p><p><img src="https://s2.loli.net/2025/05/29/SnJtRIy8DcOPFWC.png" alt=""></p></li><li><p><strong>栈帧过大</strong>导致栈内存溢出</p></li></ol><h3 id="调整栈内存大小" tabindex="-1">调整栈内存大小 <a class="header-anchor" href="#调整栈内存大小" aria-label="Permalink to &quot;调整栈内存大小&quot;">​</a></h3><ul><li><strong>Xss256k：调整栈内存大小为 256k。</strong></li></ul><p><img src="https://s2.loli.net/2025/05/29/eO3nAWJrMZfqbYH.png" alt=""></p><h3 id="_3、本地方法栈" tabindex="-1">3、本地方法栈 <a class="header-anchor" href="#_3、本地方法栈" aria-label="Permalink to &quot;3、本地方法栈&quot;">​</a></h3><p>本地方法栈和虚拟机栈的作用很相似，虚拟机栈为虚拟机执行 Java 方法，而本地方法栈则为 Java 方法使用到的本地方法服务（navite 方法）。</p><p><strong>相同的本地方法栈也可能抛出 <code>StackOverFlowError</code> 和 <code>OutOfMemoryError</code> 异常</strong>。</p><p><img src="https://s2.loli.net/2025/05/29/gUn2jBLGcxzvhD4.png" alt=""></p><hr><p>Thread 类中就存在很多 native 方法。</p><p><img src="https://s2.loli.net/2025/05/29/jwRS5gD7rQ1dulN.png" alt=""></p><h3 id="_4、堆" tabindex="-1">4、堆 <a class="header-anchor" href="#_4、堆" aria-label="Permalink to &quot;4、堆&quot;">​</a></h3><p>堆是 JVM 内存管理最大的一块区域，堆存放的是内存的实例，所有对象实例都要在堆上分配内存。Java 堆可以处于物理上不连续的空间，只要逻辑上是连续的即可。</p><p>堆空间是<strong>线程共享</strong>的一个区域，堆中的对象都要<strong>考虑线程安全问题</strong>。</p><p>若堆内存不足以创建新对象实例时，将抛出 <code>OutOfMemoryError</code> 异常。</p><h3 id="堆空间划分" tabindex="-1">堆空间划分 <a class="header-anchor" href="#堆空间划分" aria-label="Permalink to &quot;堆空间划分&quot;">​</a></h3><p>堆是<strong>垃圾收集器的主要管理区域</strong>，为了支持垃圾回收，堆被划分为三个区域。</p><ul><li><p>年轻代</p><p>年轻代被划分为 <strong>Eden区、S1区和 S2区</strong>（空间分配比例是 8:1:1）。</p></li><li><p>老年代</p></li><li><p>永久代（JDK 1.8 已经移除永久代）</p><p><img src="https://s2.loli.net/2025/05/29/ITJn2vYLzstQaW5.png" alt=""></p></li></ul><h3 id="调整堆内存大小" tabindex="-1">调整堆内存大小 <a class="header-anchor" href="#调整堆内存大小" aria-label="Permalink to &quot;调整堆内存大小&quot;">​</a></h3><p>通过配置 <code>-Xmx1024m</code> 参数可以修改并指定堆内存大小。</p><p><img src="https://s2.loli.net/2025/05/29/Ff3PpLoZqvS24RE.png" alt=""></p><h3 id="模拟堆内存溢出" tabindex="-1">模拟堆内存溢出 <a class="header-anchor" href="#模拟堆内存溢出" aria-label="Permalink to &quot;模拟堆内存溢出&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SneakyThrows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {            List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();            String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;            </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {                list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//字符串翻倍增长，占满堆内存                a = a + a;                i++;                System.out.println(i);            }        } catch (Exception e) {            e.printStackTrace();            System.out.println(i);        }        Thread.sleep(10000);    }</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/05/29/XpP7suYbV6v5nmD.png" alt=""></p><h3 id="堆内存诊断" tabindex="-1">堆内存诊断 <a class="header-anchor" href="#堆内存诊断" aria-label="Permalink to &quot;堆内存诊断&quot;">​</a></h3><ol><li><p><strong>jmap</strong> 工具</p><blockquote><p>jmap 只能查看某个时刻的数据。</p></blockquote><ul><li><p>使用 jps 查出进程 Id</p></li><li><p>使用 jmap 分析堆内存</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Jmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">heap pid</span></span></code></pre></div><p>新建一个 10MB 的数组，对进程分析得出得出的结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Heap Configuration:</span></span>
<span class="line"><span>   MinHeapFreeRatio         = 0</span></span>
<span class="line"><span>   MaxHeapFreeRatio         = 100</span></span>
<span class="line"><span>   MaxHeapSize              = 4259315712 (4062.0MB)</span></span>
<span class="line"><span>   NewSize                  = 88604672 (84.5MB)</span></span>
<span class="line"><span>   MaxNewSize               = 1419771904 (1354.0MB)</span></span>
<span class="line"><span>   OldSize                  = 177733632 (169.5MB)</span></span>
<span class="line"><span>   NewRatio                 = 2</span></span>
<span class="line"><span>   SurvivorRatio            = 8</span></span>
<span class="line"><span>   MetaspaceSize            = 21807104 (20.796875MB)</span></span>
<span class="line"><span>   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span></span>
<span class="line"><span>   MaxMetaspaceSize         = 17592186044415 MB</span></span>
<span class="line"><span>   G1HeapRegionSize         = 0 (0.0MB)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Heap Usage:</span></span>
<span class="line"><span>PS Young Generation</span></span>
<span class="line"><span>Eden Space:     //年轻代：新创建的对象分配到年轻代</span></span>
<span class="line"><span>   capacity = 66584576 (63.5MB)</span></span>
<span class="line"><span>   used     = 18496920 (17.640037536621094MB)   //堆内存eden区使用17MB（原使用7MB）</span></span>
<span class="line"><span>   free     = 48087656 (45.859962463378906MB)</span></span>
<span class="line"><span>   27.779586671844243% used</span></span>
<span class="line"><span>From Space:</span></span>
<span class="line"><span>   capacity = 11010048 (10.5MB)</span></span>
<span class="line"><span>   used     = 0 (0.0MB)</span></span>
<span class="line"><span>   free     = 11010048 (10.5MB)</span></span>
<span class="line"><span>   0.0% used</span></span>
<span class="line"><span>To Space:</span></span>
<span class="line"><span>   capacity = 11010048 (10.5MB)</span></span>
<span class="line"><span>   used     = 0 (0.0MB)</span></span>
<span class="line"><span>   free     = 11010048 (10.5MB)</span></span>
<span class="line"><span>   0.0% used</span></span>
<span class="line"><span>PS Old Generation   //老年代：大对象直接放入老年代；年轻代中多次GC存活下来的对象转移到老年代。</span></span>
<span class="line"><span>   capacity = 177733632 (169.5MB)</span></span>
<span class="line"><span>   used     = 0 (0.0MB)</span></span>
<span class="line"><span>   free     = 177733632 (169.5MB)</span></span>
<span class="line"><span>   0.0% used</span></span></code></pre></div></li></ul></li><li><p>使用 <strong>jconsole</strong> 工具</p><blockquote><p>选择指定的类进行分析，jconsole 工具分析的是连续的数据。</p></blockquote><p><img src="https://s2.loli.net/2025/05/29/NJuTFGCpR2UzwHn.png" alt=""></p><p><img src="https://s2.loli.net/2025/05/29/4fLngD9vjukXds5.png" alt=""></p></li><li><p>使用 <strong>jvisualvm</strong> 来进行分析。</p><p><img src="https://s2.loli.net/2025/05/29/3tqxPSQBgm7p4is.png" alt=""></p><ul><li><p>查找最大的对象</p><p><img src="https://s2.loli.net/2025/05/29/147PJkyZd3KOfez.png" alt=""></p></li></ul></li></ol><h3 id="_5、方法区" tabindex="-1">5、方法区 <a class="header-anchor" href="#_5、方法区" aria-label="Permalink to &quot;5、方法区&quot;">​</a></h3><p>方法区在 JVM 中也是一个非常重要的区域，<strong>是线程共享的内存区域</strong>。</p><h3 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h3><p>在方法区中，存储了每个类的信息、静态变量、常量以及编译后的代码等。</p><ul><li>类（包含类名称、方法信息、字段信息）</li><li><strong>运行时常量池</strong>（静态变量、常量）</li><li>类的加载（编译后的代码）</li></ul><p><img src="https://s2.loli.net/2025/05/29/unvj8JHQy1lMGtN.png" alt=""></p><h3 id="方法区的实现" tabindex="-1">方法区的实现 <a class="header-anchor" href="#方法区的实现" aria-label="Permalink to &quot;方法区的实现&quot;">​</a></h3><p>方法区是 JVM 中的一种规范定义。</p><ul><li>在 JDK 1.7 以及之前版本，<strong>永久代</strong>是方法区的实现，位于堆内存中。为了区分 Java 堆，它还有一个别名叫 Non - Heap （非堆）。</li><li>在 JDK 1.8 方法区的实现是<strong>元数据区</strong>，位于本地内存中。</li></ul><p><img src="https://s2.loli.net/2025/05/29/UMeTrl4NbnZmdi2.png" alt=""></p><h3 id="方法区内存溢出" tabindex="-1">方法区内存溢出 <a class="header-anchor" href="#方法区内存溢出" aria-label="Permalink to &quot;方法区内存溢出&quot;">​</a></h3><p>当方法区无法满足内存分配时，将抛出 <code>OutOfMemoryError</code> 异常。</p><ul><li><p>元空间内存溢出</p><p>创建类对象导致元空间内存溢出。</p><blockquote><p>修改元空间内存大小：-XX:MaxMetaspaceSize=8m</p></blockquote><p><img src="https://s2.loli.net/2025/05/29/jS4QtCvN698WlRn.png" alt=""></p></li></ul><h3 id="方法区垃圾回收" tabindex="-1">方法区垃圾回收 <a class="header-anchor" href="#方法区垃圾回收" aria-label="Permalink to &quot;方法区垃圾回收&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/05/29/jxJZ874k1D6tYMz.png" alt=""></p><h3 id="jdk1-8-为什么将永久代改为元空间" tabindex="-1">JDK1.8 为什么将永久代改为元空间？ <a class="header-anchor" href="#jdk1-8-为什么将永久代改为元空间" aria-label="Permalink to &quot;JDK1.8 为什么将永久代改为元空间？&quot;">​</a></h3><ol><li><p>解决了永久代大小限制的问题。</p><p>由于元空间使用本地内存，因此不再受JVM堆大小的限制，从而避免了因类加载过多而导致的 OutOfMemoryError 错误。</p></li><li><p>提高了内存使用效率。</p><p>方法区主要存储了类的元数据信息、常量、静态变量以及编译器编译后的代码等内容。这部分数据在运行时是只读的，因此将其放到本地内存中可以减轻堆内存的压力，从而提高Java应用程序的运行效率。</p></li><li><p>更好的性能优化。</p><p>将方法区放到本地内存，可以更好地利用操作系统的内存管理机制，从而实现更好的性能优化。</p><p>IO 操作上更加高效，本地内存可以直接与操作系统的 IO进行交互。而不需要先将堆里面的数据拷贝到本地内存然后再进行交互。</p></li></ol><h3 id="_6、运行时常量池" tabindex="-1">6、运行时常量池 <a class="header-anchor" href="#_6、运行时常量池" aria-label="Permalink to &quot;6、运行时常量池&quot;">​</a></h3><p>运行时常量池是<strong>方法区的一部分</strong>，用于存放编译期生成的常量和对象引用，这部分内容将在被类加载后，进入方法区的运行时常量池中存放。运行时常量池是每个类都有一个，而且具备动态性，运行期间也可以放入新的常量。</p><p><a href="https://blog.csdn.net/qq_45737068/article/details/107149922?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1" target="_blank" rel="noreferrer">详解JVM常量池、Class常量池、运行时常量池、字符串常量池</a></p><h3 id="字符串常量池-stringtable" tabindex="-1">字符串常量池-StringTable <a class="header-anchor" href="#字符串常量池-stringtable" aria-label="Permalink to &quot;字符串常量池-StringTable&quot;">​</a></h3><p>存放的是方法中的字符串常量，作用是<strong>减少字符串的重复创建</strong>，字符串常量池是共享区域。</p><p><strong>StringTable</strong> 数据结构本质上类似 哈希链表（数组+链表），在 1.6 位于永久代中，之后在<strong>堆内存中</strong>。</p><blockquote><p>运行时常量池从永久代转移到了元空间。但是字符串常量池，转移到了堆里面。</p></blockquote><p>StringTable实现的前提是 String类型不可变的，若String可变，对于不同的引用，指向StringTable的变量值也会随即改变。</p><p><a href="https://www.cnblogs.com/baizhanshi/p/6970583.html" target="_blank" rel="noreferrer">为什么String类是不可变的？</a></p><blockquote><p>StringTable 在 1.6位于永久代中，而永久代只有在 fullGC的时候才会进行垃圾回收，就是在老年代满的时候进行的垃圾回收。StringTable 数据结构本质上类似 HashMap，数据越多的情况效率越低。所以垃圾回收频率低的话，影响到StringTable 的使用。</p></blockquote><p><img src="https://s2.loli.net/2025/05/29/UMeTrl4NbnZmdi2.png" alt=""></p><p><strong>懒加载策略</strong></p><p>方法中的字符串，只有用到了该参数，才会放到字符串常量池中，一种懒加载策略。</p><p><strong>OOM异常</strong></p><ul><li><p>JDK1.6之前，StringTable位于永久代中。</p><p>当不断向 StringTable 写入数据时，可能造成永久代的 OOM。</p></li><li><p>JDK1.7之后，StringTable位于堆内存中。</p><p>同理，StringTable 可能会造成 OOM。</p></li></ul><p><strong>StrintTable垃圾回收</strong></p><p><a href="https://blog.csdn.net/zhuxuemin1991/article/details/103940936?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1" target="_blank" rel="noreferrer">StringTable垃圾回收跟踪案例</a></p><h3 id="intern-方法" tabindex="-1">intern()方法 <a class="header-anchor" href="#intern-方法" aria-label="Permalink to &quot;intern()方法&quot;">​</a></h3><p><code>intern()</code> 方法作用是 <em>如果常量池中存在当前字符串, 就会直接返回当前字符串. 如果常量池中没有此字符串, 会将此字符串放入常量池中后, 再返回</em>。</p><ul><li><p>JDK6</p><p>将堆中字符串<strong>复制一份</strong>放入串池，若串池存在该字符串，返回串池的引用。若串池不存在，在串池放入复制的字符串的引用。</p></li><li><p>JDK7</p><p>将堆中字符串对象放入串池，若串池存在该字符串，返回串池的引用。若串池不存在，则在串池放入堆中字符串的引用。</p></li></ul><hr><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;1&quot; 作为常量放入串池</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // new String(&quot;1&quot;) 在堆中创建对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // s是堆中对象的引用 ，此时 1 的对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将s引用存入串池，但串池已经有了&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从串池中找到 &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // s为堆中对象的引用，没有改变</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // s2为串池对象的引用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //jdk1.8               </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;1&quot; 作为常量放入串池</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // new String(&quot;1&quot;) 在堆中创建两个对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // s3 = new StringBuilder().append(&quot;1&quot;).append(&quot;1&quot;).toString ==&gt; new String(&quot;11&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // s3是堆中字符串 11 的引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将s3的引用存入串池，串池之前不存在11。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从串池找11，就是s3的引用地址。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //jdk1.8 true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //jdk1.6 false 因为intern()放到串池的是复制的对象，和堆中对象不是一个</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html" target="_blank" rel="noreferrer">美团技术团队：深入解析String#intern</a></p><h3 id="stringtable调优" tabindex="-1">StringTable调优 <a class="header-anchor" href="#stringtable调优" aria-label="Permalink to &quot;StringTable调优&quot;">​</a></h3><ul><li><p>调整StringTable大小</p><p>类比 HashMap，StringTable 的大小就是桶的个数，桶越多，哈希碰撞几率越低。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 最小值为1009</span></span>
<span class="line"><span>-XX:StringTable=1009</span></span></code></pre></div><blockquote><p>假设写入 StringTable表数据非常多，当 StringTable表的大小越小时，越容易发生哈希碰撞产生链表。而随着数据变多，链表会越来越长。而在写入 StringTable 时，为了保证数据的唯一性，会查找 StringTable 判断数据唯一性。此时链表越长查找效率越低，进而影响了写入的效率。</p></blockquote><p><strong>若写入串池数据量较大，适当调大该参数</strong>，减少哈希碰撞的几率，用内存空间来换效率。</p></li><li><p>重复字符串对象放入StringTable</p><p>若是重复字符串对象很多，考虑使用 <code>intern()</code> 方法放入 StringTable 中。</p></li></ul><h3 id="_7、直接内存" tabindex="-1">7、直接内存 <a class="header-anchor" href="#_7、直接内存" aria-label="Permalink to &quot;7、直接内存&quot;">​</a></h3><p>直接内存是 JDK 1.8 之后被利用到的区域，并不是虚拟机运行时数据区的一部分，但是这部分内存由于取代了方法区，会被频繁使用也可能导致 <code>OutOfMemory</code> 异常。</p><ul><li>常用于 NIO 操作时，用作数据缓冲区。</li><li>分配回收成本较高，但读写性能高。</li><li>不受 JVM 内存回收管理。</li></ul><hr><p><strong>读取文件 -&gt; 系统缓冲区 -&gt; java 缓冲区</strong></p><p><img src="https://s2.loli.net/2025/05/29/TPJe2zQCjuhGOlD.png" alt=""></p><p><strong>读取文件 -&gt; 直接内存</strong></p><blockquote><p>直接内存是系统内存和 Java 堆内存都可以共享的一个区域，对比之前读取文件时，减少了一次缓冲区的写入和读取，进而提高了效率。</p></blockquote><p><img src="https://s2.loli.net/2025/05/29/CQ6X5p32TeonGPf.png" alt=""></p><h3 id="直接内存oom" tabindex="-1">直接内存OOM <a class="header-anchor" href="#直接内存oom" aria-label="Permalink to &quot;直接内存OOM&quot;">​</a></h3><p>不断使用直接内存会使用直接内存 OOM。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectBufferOOM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ByteBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //直接内存使用大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ByteBuffer byteBuffer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteBuffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocateDirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteBuffer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://s2.loli.net/2025/05/29/Ppth7f6AIbGFYvS.png" alt=""></p><h3 id="直接内存释放" tabindex="-1">直接内存释放 <a class="header-anchor" href="#直接内存释放" aria-label="Permalink to &quot;直接内存释放&quot;">​</a></h3><p><img src="https://s2.loli.net/2025/05/29/ReJMUmFYDz5463C.png" alt=""></p><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><h3 id="_1-jdk-1-7-和-jdk-1-8-内存模型发生的变化" tabindex="-1">1. JDK 1.7 和 JDK 1.8 内存模型发生的变化？ <a class="header-anchor" href="#_1-jdk-1-7-和-jdk-1-8-内存模型发生的变化" aria-label="Permalink to &quot;1. JDK 1.7 和 JDK 1.8 内存模型发生的变化？&quot;">​</a></h3><p>最大的变化就是在 JDK 1.8 中 元数据区取代了永久代。永久代位于JVM，而元数据区位于本地内存中。</p><h3 id="_2-方法区和永久代的区分" tabindex="-1">2. 方法区和永久代的区分？ <a class="header-anchor" href="#_2-方法区和永久代的区分" aria-label="Permalink to &quot;2. 方法区和永久代的区分？&quot;">​</a></h3><p>方法区是 JVM 中的一种规范定义，永久代是其具体的实现，在 JDK 1.8 中 元空间也是方法区的一种实现。</p><h3 id="_3-为什么取消永久代" tabindex="-1">3. 为什么取消永久代？ <a class="header-anchor" href="#_3-为什么取消永久代" aria-label="Permalink to &quot;3. 为什么取消永久代？&quot;">​</a></h3><ul><li>根据官方文档的解释，是为了融合 <code>HotSpot JVM</code> 和 <code>JRockit VM</code> 做出的努力，因为 <code>JRockit VM</code> 没有永久代，不需要配置。</li><li>永久代大小指定比较困难，因为存放类和方法信息大小不易确定，并且永久代使用比较频繁，容易发生内存不够用的情况，即容易内存溢出。</li><li>永久代容易发生内存泄漏，永久代中的一些类不使用时，也不容易被 GC 回收，容易造成内存泄漏问题。</li></ul><h3 id="_4-什么是内存溢出和内存泄漏" tabindex="-1">4. 什么是内存溢出和内存泄漏？ <a class="header-anchor" href="#_4-什么是内存溢出和内存泄漏" aria-label="Permalink to &quot;4. 什么是内存溢出和内存泄漏？&quot;">​</a></h3><ul><li><p>内存溢出</p><p>当创建新对象的时候无法申请到足够的内存时，就会发生内存溢出。</p></li><li><p>内存泄露</p><p>对象位于内存中不被使用，但是无法被 GC 回收掉，始终堆积在内存中。当堆积到一定程度会发生内存溢出。</p></li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903909983535111#heading-8" target="_blank" rel="noreferrer">Java内存管理-JVM内存模型以及JDK7和JDK8内存模型对比总结（三）</a></p>`,119)]))}const E=i(t,[["render",p]]);export{g as __pageData,E as default};
