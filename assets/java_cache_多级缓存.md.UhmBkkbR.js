import{_ as e,c as t,o as l,aN as i}from"./chunks/framework.A-MC8nKA.js";const _=JSON.parse('{"title":"多级缓存","description":"","frontmatter":{},"headers":[],"relativePath":"java/cache/多级缓存.md","filePath":"java/cache/多级缓存.md","lastUpdated":1751453543000}'),o={name:"java/cache/多级缓存.md"};function r(n,a,p,s,c,d){return l(),t("div",null,a[0]||(a[0]=[i('<h1 id="多级缓存" tabindex="-1">多级缓存 <a class="header-anchor" href="#多级缓存" aria-label="Permalink to &quot;多级缓存&quot;">​</a></h1><h2 id="二级缓存" tabindex="-1">二级缓存 <a class="header-anchor" href="#二级缓存" aria-label="Permalink to &quot;二级缓存&quot;">​</a></h2><p>二级缓存<strong>没有网络开销</strong></p><p><img src="https://s2.loli.net/2025/05/29/3qxMZKgJCf1Bz7p.png" alt="" loading="lazy"></p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>减少网络请求，提高性能。</li><li>减少远程缓存的读压力。</li><li>天然分布式缓存，只存在于当前节点服务。</li></ol><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li><p>占用本地内存，空间有限，不支持大数据量。</p><p>只存储最热的数据到本地缓存，结合热点服务探测。</p></li><li><p>重启数据会丢失。</p><p>重启丢失数据无法避免，但是可以在重启项目的时候把最热的数据加到本地缓存。</p></li><li><p>分布式场景，数据可能不一致。</p></li><li><p>和远程缓存可能存在不一致的问题。</p><p><strong>只能保证最终一致性，尽可能让本地缓存过期时间短一点，这样就能加载远程缓存，达到最终一致性。</strong></p></li></ol>',8)]))}const m=e(o,[["render",r]]);export{_ as __pageData,m as default};
