import{_ as s,c as a,o as e,aM as i}from"./chunks/framework.Du1sph90.js";const k=JSON.parse('{"title":"HTTP常见字段","description":"","frontmatter":{},"headers":[],"relativePath":"other/network/HTTP常见字段.md","filePath":"other/network/HTTP常见字段.md","lastUpdated":1752827268000}'),t={name:"other/network/HTTP常见字段.md"};function p(l,n,r,o,c,h){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="http常见字段" tabindex="-1">HTTP常见字段 <a class="header-anchor" href="#http常见字段" aria-label="Permalink to &quot;HTTP常见字段&quot;">​</a></h1><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST /apmServer-sl/sys-user/login HTTP/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Accept: application/json, text/plain, *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Accept-Encoding: gzip, deflate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Accept-Language: zh-CN,zh;q=0.9</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Authorization: clusterid34</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Connection: keep-alive</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Content-Length: 101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Content-Type: application/json</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Cookie: apm.name=admin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Host: 10.10.103.37:39910</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Origin: http://10.10.103.37:39910</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">Referer: http://10.10.103.37:39910/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">X-Auth-Token:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="content-length" tabindex="-1">Content-length <a class="header-anchor" href="#content-length" aria-label="Permalink to &quot;Content-length&quot;">​</a></h3><p>包响应的字节长度。由于TCP协议是基于字节传输的，发一次包可能包含多次请求的数据。所以需要根据请求返回数据长度设置边界。这是 TCP 粘包问题。</p><ul><li>HTTP协议通过设置回车符和换行符作为HTTP Header的边界。</li><li>根据 Content-length 字段确认 HTTP body 的边界。</li></ul><p>这两种方式都是为了解决 粘包的问题。</p><p><img src="https://s2.loli.net/2025/07/17/efap9jux4JnI1UL.png" alt="image.png" loading="lazy"></p><h3 id="connection" tabindex="-1">Connection <a class="header-anchor" href="#connection" aria-label="Permalink to &quot;Connection&quot;">​</a></h3><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Connection: keep-alive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Connection 支持的是 HTTP 长连接机制。</p><p>当客户端请求头部带有 <code>[Connection: keep-alive](Connection: keep-alive)</code>时，意味着客户端要保持对服务端的长连接。如果一方不主动断开，则该连接一直保有。 后续请求也可以复用该连接。</p><p><img src="https://s2.loli.net/2025/07/17/INAkZp9FLvxeC6P.png" alt="image.png" loading="lazy"></p><p>HTTP 长连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p><p><img src="https://s2.loli.net/2025/07/17/cHzmZwfXMTCJ7AP.png" alt="image.png" loading="lazy"></p><h3 id="content-type-和-accept" tabindex="-1">Content-Type 和 Accept <a class="header-anchor" href="#content-type-和-accept" aria-label="Permalink to &quot;Content-Type 和 Accept&quot;">​</a></h3><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Accept: application/json, text/plain, *</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*Content-Type: application/json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://s2.loli.net/2025/07/17/UWYdXgQ8HyonAC5.png" alt="image.png" loading="lazy"></p><ul><li>Accept 表示客户端可以接收的数据格式。</li><li>Content-Type 表示服务端返回数据的格式。</li></ul>`,18)]))}const g=s(t,[["render",p]]);export{k as __pageData,g as default};
